
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d24  00100000  00100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000000  00103d24  00103d24  000100d8  2**0
                  CONTENTS
  2 .dtors        00000000  00103d24  00103d24  000100d8  2**0
                  CONTENTS
  3 .rodata       000006df  00103d24  00103d24  0000bd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000d8  00200000  00104404  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          0000104a  002000d8  002000d8  000100d8  2**2
                  ALLOC
  6 .comment      0000019e  00000000  00000000  000100d8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003b8  00000000  00000000  00010278  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f7c  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000098de  00000000  00000000  000115ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ea3  00000000  00000000  0001ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000198c  00000000  00000000  0001cd2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001314  00000000  00000000  0001e6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001dab  00000000  00000000  0001f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ece  00000000  00000000  0002177b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f8  00000000  00000000  00026649  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00100000 <Vectors>:
			.text
			.arm
			.section .vectrom, "ax"

Vectors:        LDR     PC,Reset_Addr         
  100000:	e59ff018 	ldr	pc, [pc, #24]	; 100020 <Reset_Addr>
                LDR     PC,Undef_Addr
  100004:	e59ff018 	ldr	pc, [pc, #24]	; 100024 <Undef_Addr>
                LDR     PC,SWI_Addr
  100008:	e59ff018 	ldr	pc, [pc, #24]	; 100028 <SWI_Addr>
                LDR     PC,PAbt_Addr
  10000c:	e59ff018 	ldr	pc, [pc, #24]	; 10002c <PAbt_Addr>
                LDR     PC,DAbt_Addr
  100010:	e59ff018 	ldr	pc, [pc, #24]	; 100030 <DAbt_Addr>
                NOP                            /* Reserved Vector */
  100014:	e1a00000 	nop			(mov r0,r0)
//                LDR     PC,IRQ_Addr
                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_IVR */
  100018:	e51fff20 	ldr	pc, [pc, #-3872]	; ff100 <PMC_OSCOUNT+0xef200>
//                LDR     PC,FIQ_Addr
                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_FVR */
  10001c:	e51fff20 	ldr	pc, [pc, #-3872]	; ff104 <PMC_OSCOUNT+0xef204>

00100020 <Reset_Addr>:
  100020:	0010005c 	andeqs	r0, r0, ip, asr r0

00100024 <Undef_Addr>:
  100024:	00100040 	andeqs	r0, r0, r0, asr #32

00100028 <SWI_Addr>:
  100028:	00100044 	andeqs	r0, r0, r4, asr #32

0010002c <PAbt_Addr>:
  10002c:	00100048 	andeqs	r0, r0, r8, asr #32

00100030 <DAbt_Addr>:
  100030:	0010004c 	andeqs	r0, r0, ip, asr #32
  100034:	00000000 	andeq	r0, r0, r0

00100038 <IRQ_Addr>:
  100038:	00100050 	andeqs	r0, r0, r0, asr r0

0010003c <FIQ_Addr>:
  10003c:	00100054 	andeqs	r0, r0, r4, asr r0

00100040 <Undef_Handler>:

Reset_Addr:     .word   Reset_Handler
Undef_Addr:     .word   Undef_Handler
SWI_Addr:       .word   SWI_Handler
PAbt_Addr:      .word   PAbt_Handler
DAbt_Addr:      .word   DAbt_Handler
                .word   0                      /* Reserved Address */
IRQ_Addr:       .word   IRQ_Handler
FIQ_Addr:       .word   FIQ_Handler

Undef_Handler:  B       Undef_Handler
  100040:	eafffffe 	b	100040 <Undef_Handler>

00100044 <SWI_Handler>:
SWI_Handler:    B       SWI_Handler
  100044:	eafffffe 	b	100044 <SWI_Handler>

00100048 <PAbt_Handler>:
PAbt_Handler:   B       PAbt_Handler
  100048:	eafffffe 	b	100048 <PAbt_Handler>

0010004c <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
  10004c:	eafffffe 	b	10004c <DAbt_Handler>

00100050 <IRQ_Handler>:
IRQ_Handler:    B       IRQ_Handler
  100050:	eafffffe 	b	100050 <IRQ_Handler>

00100054 <FIQ_Handler>:
FIQ_Handler:    B       FIQ_Handler
  100054:	eafffffe 	b	100054 <FIQ_Handler>

00100058 <_startup>:


// Starupt Code must be linked first at Address at which it expects to run.

		.text
		.arm
		.section .init, "ax"
	
		.global _startup
		.func   _startup
_startup:


// Reset Handler
                LDR     pc, =Reset_Handler
  100058:	e59ff120 	ldr	pc, [pc, #288]	; 100180 <.text+0x180>

0010005c <Reset_Handler>:
Reset_Handler:

// Setup EFC
.if EFC_SETUP
                LDR     R0, =EFC_BASE
  10005c:	e3e000ff 	mvn	r0, #255	; 0xff
                LDR     R1, =EFC_FMR_Val
  100060:	e59f111c 	ldr	r1, [pc, #284]	; 100184 <.text+0x184>
                STR     R1, [R0, #EFC_FMR]
  100064:	e5801060 	str	r1, [r0, #96]
.endif


// Setup WDT
.if WDT_SETUP
                LDR     R0, =WDT_BASE
  100068:	e59f0118 	ldr	r0, [pc, #280]	; 100188 <.text+0x188>
                LDR     R1, =WDT_MR_Val
  10006c:	e3a01902 	mov	r1, #32768	; 0x8000
                STR     R1, [R0, #WDT_MR]
  100070:	e5801004 	str	r1, [r0, #4]
.endif


// Setup PMC
.if PMC_SETUP
                LDR     R0, =PMC_BASE
  100074:	e59f0110 	ldr	r0, [pc, #272]	; 10018c <.text+0x18c>

//  Setup Main Oscillator
                LDR     R1, =PMC_MOR_Val
  100078:	e59f1110 	ldr	r1, [pc, #272]	; 100190 <.text+0x190>
                STR     R1, [R0, #PMC_MOR]
  10007c:	e5801020 	str	r1, [r0, #32]

00100080 <MOSCS_Loop>:

//  Wait until Main Oscillator is stablilized
.if (PMC_MOR_Val & PMC_MOSCEN)
MOSCS_Loop:     LDR     R2, [R0, #PMC_SR]
  100080:	e5902068 	ldr	r2, [r0, #104]
                ANDS    R2, R2, #PMC_MOSCS
  100084:	e2122001 	ands	r2, r2, #1	; 0x1
                BEQ     MOSCS_Loop
  100088:	0afffffc 	beq	100080 <MOSCS_Loop>
.endif

//  Setup the PLL
.if (PMC_PLLR_Val & PMC_MUL)
                LDR     R1, =PMC_PLLR_Val
  10008c:	e59f1100 	ldr	r1, [pc, #256]	; 100194 <.text+0x194>
                STR     R1, [R0, #PMC_PLLR]
  100090:	e580102c 	str	r1, [r0, #44]

00100094 <PLL_Loop>:

//  Wait until PLL is stabilized
PLL_Loop:       LDR     R2, [R0, #PMC_SR]
  100094:	e5902068 	ldr	r2, [r0, #104]
                ANDS    R2, R2, #PMC_LOCK
  100098:	e2122004 	ands	r2, r2, #4	; 0x4
                BEQ     PLL_Loop
  10009c:	0afffffc 	beq	100094 <PLL_Loop>
.endif

//  Select Clock
                LDR     R1, =PMC_MCKR_Val
  1000a0:	e3a01007 	mov	r1, #7	; 0x7
                STR     R1, [R0, #PMC_MCKR]
  1000a4:	e5801030 	str	r1, [r0, #48]
.endif


// Setup Stack for each mode

                LDR     R0, =Top_Stack
  1000a8:	e3a00981 	mov	r0, #2113536	; 0x204000

//  Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
  1000ac:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
  1000b0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
  1000b4:	e2400004 	sub	r0, r0, #4	; 0x4

//  Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
  1000b8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
  1000bc:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
  1000c0:	e2400004 	sub	r0, r0, #4	; 0x4

//  Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
  1000c4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
  1000c8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
  1000cc:	e2400004 	sub	r0, r0, #4	; 0x4

//  Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
  1000d0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
  1000d4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
  1000d8:	e2400c01 	sub	r0, r0, #256	; 0x100

//  Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
  1000dc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
  1000e0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
  1000e4:	e2400c01 	sub	r0, r0, #256	; 0x100

//  Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_USR
  1000e8:	e321f010 	msr	CPSR_c, #16	; 0x10
                MOV     SP, R0
  1000ec:	e1a0d000 	mov	sp, r0

// Setup a default Stack Limit (when compiled with "-mapcs-stack-check")
                SUB     SL, SP, #USR_Stack_Size
  1000f0:	e24dab01 	sub	sl, sp, #1024	; 0x400

#ifdef ROM_RUN
// Relocate .data section (Copy from ROM to RAM)
                LDR     R1, =_etext
  1000f4:	e59f109c 	ldr	r1, [pc, #156]	; 100198 <.text+0x198>
                LDR     R2, =_data
  1000f8:	e59f209c 	ldr	r2, [pc, #156]	; 10019c <.text+0x19c>
                LDR     R3, =_edata
  1000fc:	e59f309c 	ldr	r3, [pc, #156]	; 1001a0 <.text+0x1a0>

00100100 <LoopRel>:
LoopRel:        CMP     R2, R3
  100100:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4
  100104:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4
  100108:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel
  10010c:	3afffffb 	bcc	100100 <LoopRel>
#endif

// Clear .bss section (Zero init)
                MOV     R0, #0
  100110:	e3a00000 	mov	r0, #0	; 0x0
                LDR     R1, =__bss_start__
  100114:	e59f1088 	ldr	r1, [pc, #136]	; 1001a4 <.text+0x1a4>
                LDR     R2, =__bss_end__
  100118:	e59f2088 	ldr	r2, [pc, #136]	; 1001a8 <.text+0x1a8>

0010011c <LoopZI>:
LoopZI:         CMP     R1, R2
  10011c:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4
  100120:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI
  100124:	3afffffc 	bcc	10011c <LoopZI>


#if defined(VECTORS_IN_RAM) || defined(RAM_RUN)
/* 
   *** Remap ***
   ROM_RUN: exception vectors for RAM have been already copied 
     to 0x00200000 by the .data copy-loop 
   RAM_RUN: exception vectors are already placed at 0x0020000 by
     linker settings
*/
				.equ    MC_BASE,0xFFFFFF00  /* MC Base Address */
				.equ    MC_RCR, 0x00        /* MC_RCR Offset */

				LDR     R0, =MC_BASE
  100128:	e3e000ff 	mvn	r0, #255	; 0xff
				MOV     R1, #1
  10012c:	e3a01001 	mov	r1, #1	; 0x1
				STR     R1, [R0, #MC_RCR]   // Remap
  100130:	e5801000 	str	r1, [r0]
#endif /* VECTORS_IN_RAM || RAM_RUN */


/*
   Call C++ constructors (for objects in "global scope")
   added by Martin Thomas based on a Anglia Design 
   example-application for STR7 ARM
*/

			LDR 	r0, =__ctors_start__
  100134:	e59f0070 	ldr	r0, [pc, #112]	; 1001ac <.text+0x1ac>
			LDR 	r1, =__ctors_end__
  100138:	e59f1070 	ldr	r1, [pc, #112]	; 1001b0 <.text+0x1b0>

0010013c <ctor_loop>:
ctor_loop:
			CMP 	r0, r1
  10013c:	e1500001 	cmp	r0, r1
			BEQ 	ctor_end
  100140:	0a000005 	beq	10015c <ctor_end>
			LDR 	r2, [r0], #4   /* this ctor's address */
  100144:	e4902004 	ldr	r2, [r0], #4
			STMFD 	sp!, {r0-r1}   /* save loop counters  */
  100148:	e92d0003 	stmdb	sp!, {r0, r1}
			MOV 	lr, pc         /* set return address  */
  10014c:	e1a0e00f 	mov	lr, pc
//			MOV 	pc, r2
			BX      r2             /* call ctor */
  100150:	e12fff12 	bx	r2
			LDMFD 	sp!, {r0-r1}   /* restore loop counters */
  100154:	e8bd0003 	ldmia	sp!, {r0, r1}
			B 		ctor_loop
  100158:	eafffff7 	b	10013c <ctor_loop>

0010015c <ctor_end>:
ctor_end:

       
// Enter the C code
				mov   r0,#0            // no arguments (argc = 0)
  10015c:	e3a00000 	mov	r0, #0	; 0x0
				mov   r1,r0
  100160:	e1a01000 	mov	r1, r0
				mov   r2,r0
  100164:	e1a02000 	mov	r2, r0
				mov   fp,r0            // null frame pointer
  100168:	e1a0b000 	mov	fp, r0
				mov   r7,r0            // null frame pointer for thumb
  10016c:	e1a07000 	mov	r7, r0
				ldr   r10,=main
  100170:	e59fa03c 	ldr	sl, [pc, #60]	; 1001b4 <.text+0x1b4>
				adr   lr, __main_exit
  100174:	e28fe000 	add	lr, pc, #0	; 0x0
				bx    r10              // enter main()
  100178:	e12fff1a 	bx	sl

0010017c <__main_exit>:

__main_exit:    B       __main_exit
  10017c:	eafffffe 	b	10017c <__main_exit>
  100180:	0010005c 	andeqs	r0, r0, ip, asr r0
  100184:	00320100 	eoreqs	r0, r2, r0, lsl #2
  100188:	fffffd40 	swinv	0x00fffd40
  10018c:	fffffc00 	swinv	0x00fffc00
  100190:	00000601 	andeq	r0, r0, r1, lsl #12
  100194:	00191c05 	andeqs	r1, r9, r5, lsl #24
  100198:	00104404 	andeqs	r4, r0, r4, lsl #8
  10019c:	00200000 	eoreq	r0, r0, r0
  1001a0:	002000d8 	ldreqd	r0, [r0], -r8
  1001a4:	002000d8 	ldreqd	r0, [r0], -r8
  1001a8:	00201124 	eoreq	r1, r0, r4, lsr #2
  1001ac:	00103d24 	andeqs	r3, r0, r4, lsr #26
  1001b0:	00103d24 	andeqs	r3, r0, r4, lsr #26
  1001b4:	00100291 	muleqs	r0, r1, r2

001001b8 <restoreIRQ>:

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  );
  1001b8:	e10f2000 	mrs	r2, CPSR
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );
  1001bc:	e2000080 	and	r0, r0, #128	; 0x80
  1001c0:	e3c23080 	bic	r3, r2, #128	; 0x80
  1001c4:	e1833000 	orr	r3, r3, r0
  1001c8:	e129f003 	msr	CPSR_fc, r3
}

unsigned disableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
  return _cpsr;
}

unsigned restoreIRQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  return _cpsr;
}
  1001cc:	e1a00002 	mov	r0, r2
  1001d0:	e12fff1e 	bx	lr

001001d4 <restoreFIQ>:
  1001d4:	e10f2000 	mrs	r2, CPSR
  1001d8:	e2000040 	and	r0, r0, #64	; 0x40
  1001dc:	e3c23040 	bic	r3, r2, #64	; 0x40
  1001e0:	e1833000 	orr	r3, r3, r0
  1001e4:	e129f003 	msr	CPSR_fc, r3

unsigned enableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
  return _cpsr;
}

unsigned disableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
  return _cpsr;
}

unsigned restoreFIQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
  return _cpsr;
}
  1001e8:	e1a00002 	mov	r0, r2
  1001ec:	e12fff1e 	bx	lr

001001f0 <disableFIQ>:
  1001f0:	e10f0000 	mrs	r0, CPSR
  1001f4:	e3803040 	orr	r3, r0, #64	; 0x40
  1001f8:	e129f003 	msr	CPSR_fc, r3
  1001fc:	e12fff1e 	bx	lr

00100200 <enableFIQ>:
  100200:	e10f0000 	mrs	r0, CPSR
  100204:	e3c03040 	bic	r3, r0, #64	; 0x40
  100208:	e129f003 	msr	CPSR_fc, r3

unsigned enableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
  return _cpsr;
}
  10020c:	e12fff1e 	bx	lr

00100210 <disableIRQ>:
  100210:	e10f0000 	mrs	r0, CPSR
  100214:	e3803080 	orr	r3, r0, #128	; 0x80
  100218:	e129f003 	msr	CPSR_fc, r3
  10021c:	e12fff1e 	bx	lr

00100220 <enableIRQ>:
  100220:	e10f0000 	mrs	r0, CPSR
  100224:	e3c03080 	bic	r3, r0, #128	; 0x80
  100228:	e129f003 	msr	CPSR_fc, r3
  10022c:	e12fff1e 	bx	lr

00100230 <systime_init>:

void systime_init(void) {                    /* Setup PIT with Interrupt */
	volatile AT91S_AIC * pAIC = AT91C_BASE_AIC;
	
	*AT91C_PIOA_OWER = LED4;     // LED4 ODSR Write Enable
  100230:	e3e02000 	mvn	r2, #0	; 0x0
  100234:	e3a03008 	mov	r3, #8	; 0x8
  100238:	e5023b5f 	str	r3, [r2, #-2911]

	*AT91C_PITC_PIMR = AT91C_PITC_PITIEN |    /* PIT Interrupt Enable */ 
  10023c:	e59f3020 	ldr	r3, [pc, #32]	; 100264 <.text+0x264>
                     AT91C_PITC_PITEN  |    /* PIT Enable */
                     PIV;                   /* Periodic Interval Value */ 

	/* Setup System Interrupt Mode and Vector with Priority 7 and Enable it */
	pAIC->AIC_SMR[AT91C_ID_SYS] = AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE | 7;
  100240:	e3e01c0f 	mvn	r1, #3840	; 0xf00
  100244:	e50232cf 	str	r3, [r2, #-719]
  100248:	e3a03027 	mov	r3, #39	; 0x27
  10024c:	e50130fb 	str	r3, [r1, #-251]
	pAIC->AIC_SVR[AT91C_ID_SYS] = (unsigned long) systime_isr;
  100250:	e59f3010 	ldr	r3, [pc, #16]	; 100268 <.text+0x268>
  100254:	e501307b 	str	r3, [r1, #-123]
	pAIC->AIC_IECR = (1 << AT91C_ID_SYS);
  100258:	e3a03002 	mov	r3, #2	; 0x2
  10025c:	e5813021 	str	r3, [r1, #33]
}
  100260:	e12fff1e 	bx	lr
  100264:	03000bba 	tsteq	r0, #190464	; 0x2e800
  100268:	0020006c 	eoreq	r0, r0, ip, rrx

0010026c <systime_get>:

unsigned long systime_get(void)
{
  10026c:	e92d4010 	stmdb	sp!, {r4, lr}
	unsigned state;
	unsigned long ret;
	
	state = disableIRQ();
  100270:	ebffffe6 	bl	100210 <disableIRQ>
	ret = systime_value;
  100274:	e59f3010 	ldr	r3, [pc, #16]	; 10028c <.text+0x28c>
  100278:	e5934000 	ldr	r4, [r3]
	restoreIRQ(state);
  10027c:	ebffffcd 	bl	1001b8 <restoreIRQ>
	
	return ret;
}
  100280:	e1a00004 	mov	r0, r4
  100284:	e8bd4010 	ldmia	sp!, {r4, lr}
  100288:	e12fff1e 	bx	lr
  10028c:	002000e0 	eoreq	r0, r0, r0, ror #1

00100290 <main>:
}


int main(void)
{
  100290:	b5f0      	push	{r4, r5, r6, r7, lr}
	signed char res;
	int c, flag = 0;
	
	AT91PS_PMC  pPMC  = AT91C_BASE_PMC;
	AT91PS_PIO  pPIOA = AT91C_BASE_PIOA;
	AT91PS_RSTC pRSTC = AT91C_BASE_RSTC;
	
	// Enable the clock for PIO and UART0
	pPMC->PMC_PCER = ( ( 1 << AT91C_ID_PIOA ) | ( 1 << AT91C_ID_US0 ) ); // n.b. IDs are just bit-numbers
  100292:	4bd0      	ldr	r3, [pc, #832]	(1005d4 <.text+0x5d4>)
	
	// Configure the PIO Lines corresponding to LED1 to LED4
	pPIOA->PIO_PER = LED_MASK; // pins controlled by PIO (GPIO)
  100294:	4dd0      	ldr	r5, [pc, #832]	(1005d8 <.text+0x5d8>)
  100296:	2244      	mov	r2, #68
  100298:	611a      	str	r2, [r3, #16]
  10029a:	230f      	mov	r3, #15
	pPIOA->PIO_OER = LED_MASK; // pins outputs
	
	// Turn off the LEDs. Low Active: set bits to turn off 
	pPIOA->PIO_SODR = LED_MASK;
	
	// enable reset-key on demo-board 
	pRSTC->RSTC_RMR = (0xA5000000 | AT91C_RSTC_URSTEN);
  10029c:	4acf      	ldr	r2, [pc, #828]	(1005dc <.text+0x5dc>)
  10029e:	602b      	str	r3, [r5, #0]
  1002a0:	612b      	str	r3, [r5, #16]
  1002a2:	632b      	str	r3, [r5, #48]
  1002a4:	4bce      	ldr	r3, [pc, #824]	(1005e0 <.text+0x5e0>)
  1002a6:	b083      	sub	sp, #12
  1002a8:	609a      	str	r2, [r3, #8]

	systime_init();
  1002aa:	fd33f003 	bl	103d14 <__systime_init_from_thumb>

	uart0_init();
  1002ae:	f9dff000 	bl	100670 <uart0_init>
	uart0_prints("\n\nAT91SAM7 Filesystem-Demo (P:AT91SAM7S64 L:efsl)\n");
  1002b2:	48cc      	ldr	r0, [pc, #816]	(1005e4 <.text+0x5e4>)
  1002b4:	fa34f000 	bl	100720 <uart0_prints>
	uart0_prints("efsl AT91-Interface and this Demo-Application\n");
  1002b8:	48cb      	ldr	r0, [pc, #812]	(1005e8 <.text+0x5e8>)
  1002ba:	fa31f000 	bl	100720 <uart0_prints>
	uart0_prints("done by Martin Thomas, Kaiserslautern, Germany\n\n");
  1002be:	48cb      	ldr	r0, [pc, #812]	(1005ec <.text+0x5ec>)
  1002c0:	fa2ef000 	bl	100720 <uart0_prints>
  1002c4:	2601      	mov	r6, #1
	
	/* init efsl debug-output */
	efsl_debug_devopen_arm(uart0_putc);
  1002c6:	48ca      	ldr	r0, [pc, #808]	(1005f0 <.text+0x5f0>)
  1002c8:	f8a0f003 	bl	10340c <efsl_debug_devopen_arm>
	
	led1(1);
	
	rprintf("CARD init...");
  1002cc:	48c9      	ldr	r0, [pc, #804]	(1005f4 <.text+0x5f4>)
  1002ce:	636e      	str	r6, [r5, #52]
  1002d0:	f8b6f003 	bl	103440 <efsl_debug_printf_arm>

	if ( ( res = efs_init( &efs, 0 ) ) != 0 ) {
  1002d4:	4cc8      	ldr	r4, [pc, #800]	(1005f8 <.text+0x5f8>)
  1002d6:	2100      	mov	r1, #0
  1002d8:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1002da:	fb79f000 	bl	1009d0 <efs_init>
  1002de:	0600      	lsl	r0, r0, #24
  1002e0:	0e01      	lsr	r1, r0, #24
  1002e2:	2900      	cmp	r1, #0
  1002e4:	d005      	beq	1002f2 <main+0x62>
		rprintf("failed with %i\n",res);
  1002e6:	0609      	lsl	r1, r1, #24
  1002e8:	48c4      	ldr	r0, [pc, #784]	(1005fc <.text+0x5fc>)
  1002ea:	1609      	asr	r1, r1, #24
  1002ec:	f8a8f003 	bl	103440 <efsl_debug_printf_arm>
  1002f0:	e0a8      	b	100444 <main+0x1b4>
	}
	else {
		rprintf("ok\n");
  1002f2:	48c3      	ldr	r0, [pc, #780]	(100600 <.text+0x600>)
  1002f4:	f8a4f003 	bl	103440 <efsl_debug_printf_arm>
  1002f8:	632e      	str	r6, [r5, #48]
		
		led1(0);
		
		rprintf("\nDirectory of 'root':\n");
  1002fa:	48c2      	ldr	r0, [pc, #776]	(100604 <.text+0x604>)
  1002fc:	f8a0f003 	bl	103440 <efsl_debug_printf_arm>
		ls_openDir( &list, &(efs.myFs) , "/");
  100300:	4bc1      	ldr	r3, [pc, #772]	(100608 <.text+0x608>)
  100302:	4ac2      	ldr	r2, [pc, #776]	(10060c <.text+0x60c>)
  100304:	18e1      	add	r1, r4, r3
  100306:	48c2      	ldr	r0, [pc, #776]	(100610 <.text+0x610>)
  100308:	f85af003 	bl	1033c0 <ls_openDir>
  10030c:	e006      	b	10031c <main+0x8c>
		while ( ls_getNext( &list ) == 0 ) {
			list.currentEntry.FileName[LIST_MAXLENFILENAME-1] = '\0';
			rprintf( "%s ( %li bytes )\n" ,
  10030e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100310:	74e0      	strb	r0, [r4, #19]
  100312:	3108      	add	r1, #8
  100314:	48bf      	ldr	r0, [pc, #764]	(100614 <.text+0x614>)
  100316:	6962      	ldr	r2, [r4, #20]
  100318:	f892f003 	bl	103440 <efsl_debug_printf_arm>
  10031c:	4cbc      	ldr	r4, [pc, #752]	(100610 <.text+0x610>)
  10031e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100320:	f832f003 	bl	103388 <ls_getNext>
  100324:	0600      	lsl	r0, r0, #24
  100326:	0e00      	lsr	r0, r0, #24
  100328:	2800      	cmp	r0, #0
  10032a:	d0f0      	beq	10030e <main+0x7e>
  10032c:	4baa      	ldr	r3, [pc, #680]	(1005d8 <.text+0x5d8>)
				list.currentEntry.FileName,
				list.currentEntry.FileSize ) ;
		}

#if 1

		led1(1);
		
		if ( file_fopen( &filer, &efs.myFs , LogFileName , 'r' ) == 0 ) {
  10032e:	4cba      	ldr	r4, [pc, #744]	(100618 <.text+0x618>)
  100330:	2201      	mov	r2, #1
  100332:	635a      	str	r2, [r3, #52]
  100334:	48b9      	ldr	r0, [pc, #740]	(10061c <.text+0x61c>)
  100336:	49ba      	ldr	r1, [pc, #744]	(100620 <.text+0x620>)
  100338:	1c22      	mov	r2, r4		(add r2, r4, #0)
  10033a:	2372      	mov	r3, #114
  10033c:	fdaef001 	bl	101e9c <file_fopen>
  100340:	0600      	lsl	r0, r0, #24
  100342:	2800      	cmp	r0, #0
  100344:	d11d      	bne	100382 <main+0xf2>
			rprintf("\nFile %s open. Content:\n", LogFileName);
  100346:	48b7      	ldr	r0, [pc, #732]	(100624 <.text+0x624>)
  100348:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10034a:	f879f003 	bl	103440 <efsl_debug_printf_arm>
  10034e:	e004      	b	10035a <main+0xca>
			while ( ( e = file_read( &filer, 512, buf ) ) != 0 ) {
				buf[e]='\0';
  100350:	2300      	mov	r3, #0
  100352:	5423      	strb	r3, [r4, r0]
				uart0_puts((char*)buf);
  100354:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100356:	f9bbf000 	bl	1006d0 <uart0_puts>
  10035a:	4db0      	ldr	r5, [pc, #704]	(10061c <.text+0x61c>)
  10035c:	4cb2      	ldr	r4, [pc, #712]	(100628 <.text+0x628>)
  10035e:	2180      	mov	r1, #128
  100360:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100362:	0089      	lsl	r1, r1, #2
  100364:	1c22      	mov	r2, r4		(add r2, r4, #0)
  100366:	fca5f001 	bl	101cb4 <file_read>
  10036a:	4bb0      	ldr	r3, [pc, #704]	(10062c <.text+0x62c>)
  10036c:	0400      	lsl	r0, r0, #16
  10036e:	0c00      	lsr	r0, r0, #16
  100370:	8018      	strh	r0, [r3, #0]
  100372:	2800      	cmp	r0, #0
  100374:	d1ec      	bne	100350 <main+0xc0>
			}
			rprintf("\n");
  100376:	48ae      	ldr	r0, [pc, #696]	(100630 <.text+0x630>)
  100378:	f862f003 	bl	103440 <efsl_debug_printf_arm>
			file_fclose( &filer );
  10037c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10037e:	fd59f001 	bl	101e34 <file_fclose>
  100382:	4b95      	ldr	r3, [pc, #596]	(1005d8 <.text+0x5d8>)
		}
		
		led1(0);
		
		if ( file_fopen( &filew, &efs.myFs , LogFileName , 'a' ) == 0 ) {
  100384:	4dab      	ldr	r5, [pc, #684]	(100634 <.text+0x634>)
  100386:	4ea4      	ldr	r6, [pc, #656]	(100618 <.text+0x618>)
  100388:	2201      	mov	r2, #1
  10038a:	631a      	str	r2, [r3, #48]
  10038c:	49a4      	ldr	r1, [pc, #656]	(100620 <.text+0x620>)
  10038e:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100390:	1c32      	mov	r2, r6		(add r2, r6, #0)
  100392:	2361      	mov	r3, #97
  100394:	fd82f001 	bl	101e9c <file_fopen>
  100398:	0600      	lsl	r0, r0, #24
  10039a:	2800      	cmp	r0, #0
  10039c:	d121      	bne	1003e2 <main+0x152>
			rprintf("\nFile %s open for append. Appending...", LogFileName);
  10039e:	48a6      	ldr	r0, [pc, #664]	(100638 <.text+0x638>)
  1003a0:	1c31      	mov	r1, r6		(add r1, r6, #0)
  1003a2:	f84df003 	bl	103440 <efsl_debug_printf_arm>
			strcpy((char*)buf, "Martin hat's angehaengt\r\n");
  1003a6:	4ca0      	ldr	r4, [pc, #640]	(100628 <.text+0x628>)
  1003a8:	49a4      	ldr	r1, [pc, #656]	(10063c <.text+0x63c>)
  1003aa:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1003ac:	fa14f000 	bl	1007d8 <strcpy>
			if ( file_write( &filew, strlen((char*)buf), buf ) == strlen((char*)buf) ) {
  1003b0:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1003b2:	fa39f000 	bl	100828 <strlen>
  1003b6:	1c22      	mov	r2, r4		(add r2, r4, #0)
  1003b8:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1003ba:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1003bc:	fd2cf001 	bl	101e18 <file_write>
  1003c0:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1003c2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1003c4:	fa30f000 	bl	100828 <strlen>
  1003c8:	4285      	cmp	r5, r0
  1003ca:	d103      	bne	1003d4 <main+0x144>
				rprintf("ok\n");
  1003cc:	488c      	ldr	r0, [pc, #560]	(100600 <.text+0x600>)
  1003ce:	f837f003 	bl	103440 <efsl_debug_printf_arm>
  1003d2:	e003      	b	1003dc <main+0x14c>
			}
			else {
				rprintf("failed\n", LogFileName);
  1003d4:	489a      	ldr	r0, [pc, #616]	(100640 <.text+0x640>)
  1003d6:	1c31      	mov	r1, r6		(add r1, r6, #0)
  1003d8:	f832f003 	bl	103440 <efsl_debug_printf_arm>
			}
			file_fclose( &filew );
  1003dc:	4895      	ldr	r0, [pc, #596]	(100634 <.text+0x634>)
  1003de:	fd29f001 	bl	101e34 <file_fclose>
  1003e2:	4b7d      	ldr	r3, [pc, #500]	(1005d8 <.text+0x5d8>)
		}
		
		led1(1);
		
		if ( file_fopen( &filer, &efs.myFs , LogFileName , 'r' ) == 0 ) {
  1003e4:	4c8c      	ldr	r4, [pc, #560]	(100618 <.text+0x618>)
  1003e6:	2201      	mov	r2, #1
  1003e8:	635a      	str	r2, [r3, #52]
  1003ea:	488c      	ldr	r0, [pc, #560]	(10061c <.text+0x61c>)
  1003ec:	498c      	ldr	r1, [pc, #560]	(100620 <.text+0x620>)
  1003ee:	1c22      	mov	r2, r4		(add r2, r4, #0)
  1003f0:	2372      	mov	r3, #114
  1003f2:	fd53f001 	bl	101e9c <file_fopen>
  1003f6:	0600      	lsl	r0, r0, #24
  1003f8:	2800      	cmp	r0, #0
  1003fa:	d11d      	bne	100438 <main+0x1a8>
			rprintf("\nFile %s open. Content:\n", LogFileName);
  1003fc:	4889      	ldr	r0, [pc, #548]	(100624 <.text+0x624>)
  1003fe:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100400:	f81ef003 	bl	103440 <efsl_debug_printf_arm>
  100404:	e004      	b	100410 <main+0x180>
			while ( ( e = file_read( &filer, 512, buf ) ) != 0 ) {
				buf[e]='\0';
  100406:	2300      	mov	r3, #0
  100408:	5423      	strb	r3, [r4, r0]
				uart0_puts((char*)buf);
  10040a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10040c:	f960f000 	bl	1006d0 <uart0_puts>
  100410:	4d82      	ldr	r5, [pc, #520]	(10061c <.text+0x61c>)
  100412:	4c85      	ldr	r4, [pc, #532]	(100628 <.text+0x628>)
  100414:	2180      	mov	r1, #128
  100416:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100418:	0089      	lsl	r1, r1, #2
  10041a:	1c22      	mov	r2, r4		(add r2, r4, #0)
  10041c:	fc4af001 	bl	101cb4 <file_read>
  100420:	4b82      	ldr	r3, [pc, #520]	(10062c <.text+0x62c>)
  100422:	0400      	lsl	r0, r0, #16
  100424:	0c00      	lsr	r0, r0, #16
  100426:	8018      	strh	r0, [r3, #0]
  100428:	2800      	cmp	r0, #0
  10042a:	d1ec      	bne	100406 <main+0x176>
			}
			rprintf("\n");
  10042c:	4880      	ldr	r0, [pc, #512]	(100630 <.text+0x630>)
  10042e:	f807f003 	bl	103440 <efsl_debug_printf_arm>
			file_fclose( &filer );
  100432:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100434:	fcfef001 	bl	101e34 <file_fclose>
  100438:	4a67      	ldr	r2, [pc, #412]	(1005d8 <.text+0x5d8>)
  10043a:	2301      	mov	r3, #1
  10043c:	6313      	str	r3, [r2, #48]
		}

#endif
		
		led1(0);
		
		fs_umount( &efs.myFs ) ;
  10043e:	4878      	ldr	r0, [pc, #480]	(100620 <.text+0x620>)
  100440:	fd8af000 	bl	100f58 <fs_umount>
	}
	
	rprintf("\nHit B to start the benchmark\n");
  100444:	487f      	ldr	r0, [pc, #508]	(100644 <.text+0x644>)
  100446:	fffbf002 	bl	103440 <efsl_debug_printf_arm>
  10044a:	2000      	mov	r0, #0
  10044c:	9000      	str	r0, [sp, #0]
	
	for (;;) {
	
		if ( uart0_kbhit() ) {
  10044e:	f92df000 	bl	1006ac <uart0_kbhit>
  100452:	2800      	cmp	r0, #0
  100454:	d0fb      	beq	10044e <main+0x1be>
			c = uart0_getc();
  100456:	f931f000 	bl	1006bc <uart0_getc>
  10045a:	1c01      	mov	r1, r0		(add r1, r0, #0)
			if ( c == 'B' ) {
  10045c:	2842      	cmp	r0, #66
  10045e:	d000      	beq	100462 <main+0x1d2>
  100460:	e09d      	b	10059e <main+0x30e>
  100462:	4b79      	ldr	r3, [pc, #484]	(100648 <.text+0x648>)
  100464:	4d64      	ldr	r5, [pc, #400]	(1005f8 <.text+0x5f8>)
  100466:	ac01      	add	r4, sp, #4
  100468:	1c22      	mov	r2, r4		(add r2, r4, #0)
  10046a:	cb03      	ldmia	r3!,{r0, r1}
  10046c:	c203      	stmia	r2!,{r0, r1}
  10046e:	2100      	mov	r1, #0
  100470:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100472:	faadf000 	bl	1009d0 <efs_init>
  100476:	0600      	lsl	r0, r0, #24
  100478:	0e01      	lsr	r1, r0, #24
  10047a:	2900      	cmp	r1, #0
  10047c:	d003      	beq	100486 <main+0x1f6>
  10047e:	0609      	lsl	r1, r1, #24
  100480:	4872      	ldr	r0, [pc, #456]	(10064c <.text+0x64c>)
  100482:	1609      	asr	r1, r1, #24
  100484:	e08e      	b	1005a4 <main+0x314>
  100486:	4960      	ldr	r1, [pc, #384]	(100608 <.text+0x608>)
  100488:	186d      	add	r5, r5, r1
  10048a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10048c:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10048e:	fdaff002 	bl	102ff0 <rmfile>
  100492:	4868      	ldr	r0, [pc, #416]	(100634 <.text+0x634>)
  100494:	1c29      	mov	r1, r5		(add r1, r5, #0)
  100496:	1c22      	mov	r2, r4		(add r2, r4, #0)
  100498:	2377      	mov	r3, #119
  10049a:	fcfff001 	bl	101e9c <file_fopen>
  10049e:	0600      	lsl	r0, r0, #24
  1004a0:	2800      	cmp	r0, #0
  1004a2:	d14a      	bne	10053a <main+0x2aa>
  1004a4:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1004a6:	486a      	ldr	r0, [pc, #424]	(100650 <.text+0x650>)
  1004a8:	2264      	mov	r2, #100
  1004aa:	ffc9f002 	bl	103440 <efsl_debug_printf_arm>
  1004ae:	fc35f003 	bl	103d1c <__systime_get_from_thumb>
  1004b2:	2700      	mov	r7, #0
  1004b4:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1004b6:	2600      	mov	r6, #0
  1004b8:	485e      	ldr	r0, [pc, #376]	(100634 <.text+0x634>)
  1004ba:	4a5b      	ldr	r2, [pc, #364]	(100628 <.text+0x628>)
  1004bc:	2164      	mov	r1, #100
  1004be:	fcabf001 	bl	101e18 <file_write>
  1004c2:	2864      	cmp	r0, #100
  1004c4:	d001      	beq	1004ca <main+0x23a>
  1004c6:	2601      	mov	r6, #1
  1004c8:	e000      	b	1004cc <main+0x23c>
  1004ca:	3764      	add	r7, #100
  1004cc:	fc26f003 	bl	103d1c <__systime_get_from_thumb>
  1004d0:	4b60      	ldr	r3, [pc, #384]	(100654 <.text+0x654>)
  1004d2:	1b00      	sub	r0, r0, r4
  1004d4:	4298      	cmp	r0, r3
  1004d6:	d802      	bhi	1004de <main+0x24e>
  1004d8:	2e00      	cmp	r6, #0
  1004da:	d171      	bne	1005c0 <main+0x330>
  1004dc:	e7ec      	b	1004b8 <main+0x228>
  1004de:	4855      	ldr	r0, [pc, #340]	(100634 <.text+0x634>)
  1004e0:	fca8f001 	bl	101e34 <file_fclose>
  1004e4:	484e      	ldr	r0, [pc, #312]	(100620 <.text+0x620>)
  1004e6:	fd2bf000 	bl	100f40 <fs_flushFs>
  1004ea:	fc17f003 	bl	103d1c <__systime_get_from_thumb>
  1004ee:	1b05      	sub	r5, r0, r4
  1004f0:	2e00      	cmp	r6, #0
  1004f2:	d002      	beq	1004fa <main+0x26a>
  1004f4:	4858      	ldr	r0, [pc, #352]	(100658 <.text+0x658>)
  1004f6:	ffa3f002 	bl	103440 <efsl_debug_printf_arm>
  1004fa:	1c29      	mov	r1, r5		(add r1, r5, #0)
  1004fc:	1c38      	mov	r0, r7		(add r0, r7, #0)
  1004fe:	f9bbf000 	bl	100878 <__aeabi_uidiv>
  100502:	0143      	lsl	r3, r0, #5
  100504:	1a1b      	sub	r3, r3, r0
  100506:	009b      	lsl	r3, r3, #2
  100508:	4c54      	ldr	r4, [pc, #336]	(10065c <.text+0x65c>)
  10050a:	181b      	add	r3, r3, r0
  10050c:	00db      	lsl	r3, r3, #3
  10050e:	0a9b      	lsr	r3, r3, #10
  100510:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100512:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  100514:	1c39      	mov	r1, r7		(add r1, r7, #0)
  100516:	ac01      	add	r4, sp, #4
  100518:	ff92f002 	bl	103440 <efsl_debug_printf_arm>
  10051c:	4850      	ldr	r0, [pc, #320]	(100660 <.text+0x660>)
  10051e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100520:	2264      	mov	r2, #100
  100522:	ff8df002 	bl	103440 <efsl_debug_printf_arm>
  100526:	4d3e      	ldr	r5, [pc, #248]	(100620 <.text+0x620>)
  100528:	483c      	ldr	r0, [pc, #240]	(10061c <.text+0x61c>)
  10052a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  10052c:	1c22      	mov	r2, r4		(add r2, r4, #0)
  10052e:	2372      	mov	r3, #114
  100530:	fcb4f001 	bl	101e9c <file_fopen>
  100534:	0600      	lsl	r0, r0, #24
  100536:	2800      	cmp	r0, #0
  100538:	d005      	beq	100546 <main+0x2b6>
  10053a:	484a      	ldr	r0, [pc, #296]	(100664 <.text+0x664>)
  10053c:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10053e:	ff7ff002 	bl	103440 <efsl_debug_printf_arm>
  100542:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100544:	e028      	b	100598 <main+0x308>
  100546:	fbe9f003 	bl	103d1c <__systime_get_from_thumb>
  10054a:	2600      	mov	r6, #0
  10054c:	1c05      	mov	r5, r0		(add r5, r0, #0)
  10054e:	e000      	b	100552 <main+0x2c2>
  100550:	1836      	add	r6, r6, r0
  100552:	4c32      	ldr	r4, [pc, #200]	(10061c <.text+0x61c>)
  100554:	4a34      	ldr	r2, [pc, #208]	(100628 <.text+0x628>)
  100556:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100558:	2164      	mov	r1, #100
  10055a:	fbabf001 	bl	101cb4 <file_read>
  10055e:	4b33      	ldr	r3, [pc, #204]	(10062c <.text+0x62c>)
  100560:	0400      	lsl	r0, r0, #16
  100562:	0c00      	lsr	r0, r0, #16
  100564:	8018      	strh	r0, [r3, #0]
  100566:	2800      	cmp	r0, #0
  100568:	d1f2      	bne	100550 <main+0x2c0>
  10056a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10056c:	fc62f001 	bl	101e34 <file_fclose>
  100570:	fbd4f003 	bl	103d1c <__systime_get_from_thumb>
  100574:	1b44      	sub	r4, r0, r5
  100576:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100578:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10057a:	f97df000 	bl	100878 <__aeabi_uidiv>
  10057e:	0143      	lsl	r3, r0, #5
  100580:	1a1b      	sub	r3, r3, r0
  100582:	009b      	lsl	r3, r3, #2
  100584:	4d38      	ldr	r5, [pc, #224]	(100668 <.text+0x668>)
  100586:	181b      	add	r3, r3, r0
  100588:	00db      	lsl	r3, r3, #3
  10058a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10058c:	0a9b      	lsr	r3, r3, #10
  10058e:	1c31      	mov	r1, r6		(add r1, r6, #0)
  100590:	1c22      	mov	r2, r4		(add r2, r4, #0)
  100592:	ff55f002 	bl	103440 <efsl_debug_printf_arm>
  100596:	4822      	ldr	r0, [pc, #136]	(100620 <.text+0x620>)
  100598:	fcdef000 	bl	100f58 <fs_umount>
  10059c:	e004      	b	1005a8 <main+0x318>
				benchmark();
			}
			else {
				rprintf("\nYou pressed the \"%c\" key\n", (char)c);
  10059e:	0609      	lsl	r1, r1, #24
  1005a0:	4832      	ldr	r0, [pc, #200]	(10066c <.text+0x66c>)
  1005a2:	0e09      	lsr	r1, r1, #24
  1005a4:	ff4cf002 	bl	103440 <efsl_debug_printf_arm>
			}
			if ( flag ) {
  1005a8:	9b00      	ldr	r3, [sp, #0]
  1005aa:	2b00      	cmp	r3, #0
  1005ac:	d003      	beq	1005b6 <main+0x326>
  1005ae:	4b0a      	ldr	r3, [pc, #40]	(1005d8 <.text+0x5d8>)
  1005b0:	2201      	mov	r2, #1
  1005b2:	631a      	str	r2, [r3, #48]
  1005b4:	e749      	b	10044a <main+0x1ba>
  1005b6:	4b08      	ldr	r3, [pc, #32]	(1005d8 <.text+0x5d8>)
  1005b8:	2201      	mov	r2, #1
  1005ba:	635a      	str	r2, [r3, #52]
  1005bc:	9200      	str	r2, [sp, #0]
  1005be:	e746      	b	10044e <main+0x1be>
  1005c0:	481c      	ldr	r0, [pc, #112]	(100634 <.text+0x634>)
  1005c2:	fc37f001 	bl	101e34 <file_fclose>
  1005c6:	4816      	ldr	r0, [pc, #88]	(100620 <.text+0x620>)
  1005c8:	fcbaf000 	bl	100f40 <fs_flushFs>
  1005cc:	fba6f003 	bl	103d1c <__systime_get_from_thumb>
  1005d0:	1b05      	sub	r5, r0, r4
  1005d2:	e78f      	b	1004f4 <main+0x264>
  1005d4:	fc00      	second half of BL instruction 0xfc00
  1005d6:	ffff      	second half of BL instruction 0xffff
  1005d8:	fffff400 	bl	ffd015da <PMC_USBDIV+0xcfd015da>
  1005dc:	0001      	lsl	r1, r0, #0
  1005de:	a500      	add	r5, pc, #0	(adr r5,1005e0 <.text+0x5e0>)
  1005e0:	fd00      	second half of BL instruction 0xfd00
  1005e2:	ffff      	second half of BL instruction 0xffff
  1005e4:	3d24      	sub	r5, #36
  1005e6:	0010      	lsl	r0, r2, #0
  1005e8:	3d58      	sub	r5, #88
  1005ea:	0010      	lsl	r0, r2, #0
  1005ec:	3d88      	sub	r5, #136
  1005ee:	0010      	lsl	r0, r2, #0
  1005f0:	0699      	lsl	r1, r3, #26
  1005f2:	0010      	lsl	r0, r2, #0
  1005f4:	3dbc      	sub	r5, #188
  1005f6:	0010      	lsl	r0, r2, #0
  1005f8:	0118      	lsl	r0, r3, #4
  1005fa:	0020      	lsl	r0, r4, #0
  1005fc:	3dcc      	sub	r5, #204
  1005fe:	0010      	lsl	r0, r2, #0
  100600:	3ddc      	sub	r5, #220
  100602:	0010      	lsl	r0, r2, #0
  100604:	3de0      	sub	r5, #224
  100606:	0010      	lsl	r0, r2, #0
  100608:	0d24      	lsr	r4, r4, #20
  10060a:	0000      	lsl	r0, r0, #0
  10060c:	3df8      	sub	r5, #248
  10060e:	0010      	lsl	r0, r2, #0
  100610:	00e4      	lsl	r4, r4, #3
  100612:	0020      	lsl	r0, r4, #0
  100614:	3dfc      	sub	r5, #252
  100616:	0010      	lsl	r0, r2, #0
  100618:	0058      	lsl	r0, r3, #1
  10061a:	0020      	lsl	r0, r4, #0
  10061c:	0e7c      	lsr	r4, r7, #25
  10061e:	0020      	lsl	r0, r4, #0
  100620:	0e3c      	lsr	r4, r7, #24
  100622:	0020      	lsl	r0, r4, #0
  100624:	3e10      	sub	r6, #16
  100626:	0010      	lsl	r0, r2, #0
  100628:	0ecc      	lsr	r4, r1, #27
  10062a:	0020      	lsl	r0, r4, #0
  10062c:	1120      	asr	r0, r4, #4
  10062e:	0020      	lsl	r0, r4, #0
  100630:	3e6c      	sub	r6, #108
  100632:	0010      	lsl	r0, r2, #0
  100634:	10d0      	asr	r0, r2, #3
  100636:	0020      	lsl	r0, r4, #0
  100638:	3e2c      	sub	r6, #44
  10063a:	0010      	lsl	r0, r2, #0
  10063c:	3e54      	sub	r6, #84
  10063e:	0010      	lsl	r0, r2, #0
  100640:	3e70      	sub	r6, #112
  100642:	0010      	lsl	r0, r2, #0
  100644:	3e78      	sub	r6, #120
  100646:	0010      	lsl	r0, r2, #0
  100648:	3fe0      	sub	r7, #224
  10064a:	0010      	lsl	r0, r2, #0
  10064c:	3e98      	sub	r6, #152
  10064e:	0010      	lsl	r0, r2, #0
  100650:	3ed0      	sub	r6, #208
  100652:	0010      	lsl	r0, r2, #0
  100654:	1387      	asr	r7, r0, #14
  100656:	0000      	lsl	r0, r0, #0
  100658:	3f0c      	sub	r7, #12
  10065a:	0010      	lsl	r0, r2, #0
  10065c:	3f2c      	sub	r7, #44
  10065e:	0010      	lsl	r0, r2, #0
  100660:	3f5c      	sub	r7, #92
  100662:	0010      	lsl	r0, r2, #0
  100664:	3eb4      	sub	r6, #180
  100666:	0010      	lsl	r0, r2, #0
  100668:	3f98      	sub	r7, #152
  10066a:	0010      	lsl	r0, r2, #0
  10066c:	3fc4      	sub	r7, #196
  10066e:	0010      	lsl	r0, r2, #0

00100670 <uart0_init>:
void uart0_init (void) {                   /* Initialize Serial Interface */

  /* mt: n.b: uart0 clock must be enabled to use it */

  *AT91C_PIOA_PDR = AT91C_PA5_RXD0 |        /* Enable RxD0 Pin */
  100670:	4b07      	ldr	r3, [pc, #28]	(100690 <.text+0x690>)
  100672:	2260      	mov	r2, #96
  100674:	601a      	str	r2, [r3, #0]
                    AT91C_PA6_TXD0;         /* Enalbe TxD0 Pin */

  pUSART->US_CR = AT91C_US_RSTRX |          /* Reset Receiver      */
  100676:	4b07      	ldr	r3, [pc, #28]	(100694 <.text+0x694>)
  100678:	681a      	ldr	r2, [r3, #0]
  10067a:	23ac      	mov	r3, #172
  10067c:	6013      	str	r3, [r2, #0]
                  AT91C_US_RSTTX |          /* Reset Transmitter   */
                  AT91C_US_RXDIS |          /* Receiver Disable    */
                  AT91C_US_TXDIS;           /* Transmitter Disable */

  pUSART->US_MR = AT91C_US_USMODE_NORMAL |  /* Normal Mode */
  10067e:	238c      	mov	r3, #140
  100680:	011b      	lsl	r3, r3, #4
  100682:	6053      	str	r3, [r2, #4]
                  AT91C_US_CLKS_CLOCK    |  /* Clock = MCK */
                  AT91C_US_CHRL_8_BITS   |  /* 8-bit Data  */
                  AT91C_US_PAR_NONE      |  /* No Parity   */
                  AT91C_US_NBSTOP_1_BIT;    /* 1 Stop Bit  */

  pUSART->US_BRGR = BRD;                    /* Baud Rate Divisor */
  100684:	231a      	mov	r3, #26
  100686:	6213      	str	r3, [r2, #32]

  pUSART->US_CR = AT91C_US_RXEN  |          /* Receiver Enable     */
  100688:	2350      	mov	r3, #80
  10068a:	6013      	str	r3, [r2, #0]
                  AT91C_US_TXEN;            /* Transmitter Enable  */
}
  10068c:	4770      	bx	lr
  10068e:	0000      	lsl	r0, r0, #0
  100690:	fffff404 	bl	ffd05692 <PMC_USBDIV+0xcfd05692>
  100694:	0068      	lsl	r0, r5, #1
  100696:	0020      	lsl	r0, r4, #0

00100698 <uart0_putc>:


int uart0_putc(int ch) 
{
	while (!(pUSART->US_CSR & AT91C_US_TXRDY));   /* Wait for Empty Tx Buffer */
  100698:	4b03      	ldr	r3, [pc, #12]	(1006a8 <.text+0x6a8>)
  10069a:	681a      	ldr	r2, [r3, #0]
  10069c:	6953      	ldr	r3, [r2, #20]
  10069e:	0799      	lsl	r1, r3, #30
  1006a0:	d5fc      	bpl	10069c <uart0_putc+0x4>
	return (pUSART->US_THR = ch);                 /* Transmit Character */
  1006a2:	61d0      	str	r0, [r2, #28]
  1006a4:	69d0      	ldr	r0, [r2, #28]
}	
  1006a6:	4770      	bx	lr
  1006a8:	0068      	lsl	r0, r5, #1
  1006aa:	0020      	lsl	r0, r4, #0

001006ac <uart0_kbhit>:

int uart0_putchar (int ch) {                      /* Write Character to Serial Port */

  if (ch == '\n')  {                            /* Check for LF */
    uart0_putc( '\r' );                         /* Output CR */
  }
  return uart0_putc( ch );                     /* Transmit Character */
}

int uart0_puts ( char* s )
{
	int i = 0;
	while ( *s ) {
		uart0_putc( *s++ );
		i++;
	}
	return i;
}

int uart0_prints ( char* s )
{
	int i = 0;
	while ( *s ) {
		uart0_putchar( *s++ );
		i++;
	}
	return i;
}

int uart0_kbhit( void ) /* returns true if character in receive buffer */
{
	if ( pUSART->US_CSR & AT91C_US_RXRDY) {
  1006ac:	4b02      	ldr	r3, [pc, #8]	(1006b8 <.text+0x6b8>)
  1006ae:	681b      	ldr	r3, [r3, #0]
  1006b0:	6958      	ldr	r0, [r3, #20]
  1006b2:	2301      	mov	r3, #1
  1006b4:	4018      	and	r0, r3
		return 1;
	}
	else {
		return 0;
	}
}
  1006b6:	4770      	bx	lr
  1006b8:	0068      	lsl	r0, r5, #1
  1006ba:	0020      	lsl	r0, r4, #0

001006bc <uart0_getc>:

int uart0_getc ( void )  /* Read Character from Serial Port */
{    
  while (!(pUSART->US_CSR & AT91C_US_RXRDY));   /* Wait for Full Rx Buffer */
  1006bc:	4b03      	ldr	r3, [pc, #12]	(1006cc <.text+0x6cc>)
  1006be:	681a      	ldr	r2, [r3, #0]
  1006c0:	6953      	ldr	r3, [r2, #20]
  1006c2:	07d9      	lsl	r1, r3, #31
  1006c4:	d5fc      	bpl	1006c0 <uart0_getc+0x4>
  return (pUSART->US_RHR);                      /* Read Character */
  1006c6:	6990      	ldr	r0, [r2, #24]
}
  1006c8:	4770      	bx	lr
  1006ca:	0000      	lsl	r0, r0, #0
  1006cc:	0068      	lsl	r0, r5, #1
  1006ce:	0020      	lsl	r0, r4, #0

001006d0 <uart0_puts>:
  1006d0:	b570      	push	{r4, r5, r6, lr}
  1006d2:	4c08      	ldr	r4, [pc, #32]	(1006f4 <.text+0x6f4>)
  1006d4:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1006d6:	2000      	mov	r0, #0
  1006d8:	e006      	b	1006e8 <uart0_puts+0x18>
  1006da:	6822      	ldr	r2, [r4, #0]
  1006dc:	6953      	ldr	r3, [r2, #20]
  1006de:	079e      	lsl	r6, r3, #30
  1006e0:	d5fc      	bpl	1006dc <uart0_puts+0xc>
  1006e2:	61d1      	str	r1, [r2, #28]
  1006e4:	69d3      	ldr	r3, [r2, #28]
  1006e6:	3001      	add	r0, #1
  1006e8:	5d41      	ldrb	r1, [r0, r5]
  1006ea:	2900      	cmp	r1, #0
  1006ec:	d1f5      	bne	1006da <uart0_puts+0xa>
  1006ee:	bc70      	pop	{r4, r5, r6}
  1006f0:	bc02      	pop	{r1}
  1006f2:	4708      	bx	r1
  1006f4:	0068      	lsl	r0, r5, #1
  1006f6:	0020      	lsl	r0, r4, #0

001006f8 <uart0_putchar>:
  1006f8:	280a      	cmp	r0, #10
  1006fa:	d107      	bne	10070c <uart0_putchar+0x14>
  1006fc:	4b07      	ldr	r3, [pc, #28]	(10071c <.text+0x71c>)
  1006fe:	681a      	ldr	r2, [r3, #0]
  100700:	6953      	ldr	r3, [r2, #20]
  100702:	0799      	lsl	r1, r3, #30
  100704:	d5fc      	bpl	100700 <uart0_putchar+0x8>
  100706:	230d      	mov	r3, #13
  100708:	61d3      	str	r3, [r2, #28]
  10070a:	69d3      	ldr	r3, [r2, #28]
  10070c:	4b03      	ldr	r3, [pc, #12]	(10071c <.text+0x71c>)
  10070e:	681a      	ldr	r2, [r3, #0]
  100710:	6953      	ldr	r3, [r2, #20]
  100712:	0799      	lsl	r1, r3, #30
  100714:	d5fc      	bpl	100710 <uart0_putchar+0x18>
  100716:	61d0      	str	r0, [r2, #28]
  100718:	69d0      	ldr	r0, [r2, #28]
  10071a:	4770      	bx	lr
  10071c:	0068      	lsl	r0, r5, #1
  10071e:	0020      	lsl	r0, r4, #0

00100720 <uart0_prints>:
  100720:	b530      	push	{r4, r5, lr}
  100722:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100724:	2400      	mov	r4, #0
  100726:	e002      	b	10072e <uart0_prints+0xe>
  100728:	ffe6f7ff 	bl	1006f8 <uart0_putchar>
  10072c:	3401      	add	r4, #1
  10072e:	5d60      	ldrb	r0, [r4, r5]
  100730:	2800      	cmp	r0, #0
  100732:	d1f9      	bne	100728 <uart0_prints+0x8>
  100734:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100736:	bc30      	pop	{r4, r5}
  100738:	bc02      	pop	{r1}
  10073a:	4708      	bx	r1

0010073c <_close_r>:
    struct _reent *r, 
    int file)
{
	return 0;
}
  10073c:	2000      	mov	r0, #0
  10073e:	4770      	bx	lr

00100740 <_lseek_r>:


_off_t _lseek_r(
    struct _reent *r, 
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.  */
}
  100740:	2000      	mov	r0, #0
  100742:	4770      	bx	lr

00100744 <_fstat_r>:


int _fstat_r(
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;
  100744:	2380      	mov	r3, #128
  100746:	019b      	lsl	r3, r3, #6
	/* assigned to strong type with implicit 	*/
	/* signed/unsigned conversion.  Required by 	*/
	/* newlib.					*/

	return 0;
}
  100748:	2000      	mov	r0, #0
  10074a:	6053      	str	r3, [r2, #4]
  10074c:	4770      	bx	lr
	...

00100750 <isatty>:


int isatty(int file); /* avoid warning */

int isatty(int file)
{
	return 1;
}
  100750:	2001      	mov	r0, #1
  100752:	4770      	bx	lr

00100754 <_sbrk_r>:


#if 0
static void _exit (int n) {
label:  goto label; /* endless loop */
}
#endif 


/* "malloc clue function" from newlib-lpc/Keil-Demo/"generic" */

/**** Locally used variables. ****/
// mt: "cleaner": extern char* end;
extern char end[];              /*  end is set in the linker command 	*/
				/* file and is the end of statically 	*/
				/* allocated data (thus start of heap).	*/

static char *heap_ptr;		/* Points to current end of the heap.	*/

/************************** _sbrk_r *************************************
 * Support function. Adjusts end of heap to provide more memory to
 * memory allocator. Simple and dumb with no sanity checks.

 *  struct _reent *r -- re-entrancy structure, used by newlib to
 *                      support multiple threads of operation.
 *  ptrdiff_t nbytes -- number of bytes to add.
 *                      Returns pointer to start of new heap area.
 *
 *  Note:  This implementation is not thread safe (despite taking a
 *         _reent structure as a parameter).
 *         Since _s_r is not used in the current implementation, 
 *         the following messages must be suppressed.
 */
void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error  */

	if (!heap_ptr) {	/*  Initialize if first time through.  */
  100754:	4a04      	ldr	r2, [pc, #16]	(100768 <.text+0x768>)
  100756:	6813      	ldr	r3, [r2, #0]
  100758:	2b00      	cmp	r3, #0
  10075a:	d101      	bne	100760 <_sbrk_r+0xc>
		heap_ptr = end;
  10075c:	4b03      	ldr	r3, [pc, #12]	(10076c <.text+0x76c>)
  10075e:	6013      	str	r3, [r2, #0]
	}
	base = heap_ptr;	/*  Point to end of heap.  */
  100760:	6810      	ldr	r0, [r2, #0]
	heap_ptr += nbytes;	/*  Increase heap.  */
  100762:	1843      	add	r3, r0, r1
  100764:	6013      	str	r3, [r2, #0]
	
	return base;		/*  Return pointer to start of new heap area.  */
}
  100766:	4770      	bx	lr
  100768:	00d8      	lsl	r0, r3, #3
  10076a:	0020      	lsl	r0, r4, #0
  10076c:	1124      	asr	r4, r4, #4
  10076e:	0020      	lsl	r0, r4, #0

00100770 <_write_r>:
  100770:	b570      	push	{r4, r5, r6, lr}
  100772:	1c15      	mov	r5, r2		(add r5, r2, #0)
  100774:	1c1e      	mov	r6, r3		(add r6, r3, #0)
  100776:	2400      	mov	r4, #0
  100778:	e009      	b	10078e <_write_r+0x1e>
  10077a:	5d63      	ldrb	r3, [r4, r5]
  10077c:	2b0a      	cmp	r3, #10
  10077e:	d102      	bne	100786 <_write_r+0x16>
  100780:	200d      	mov	r0, #13
  100782:	ff89f7ff 	bl	100698 <uart0_putc>
  100786:	5d60      	ldrb	r0, [r4, r5]
  100788:	ff86f7ff 	bl	100698 <uart0_putc>
  10078c:	3401      	add	r4, #1
  10078e:	42b4      	cmp	r4, r6
  100790:	d1f3      	bne	10077a <_write_r+0xa>
  100792:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100794:	bc70      	pop	{r4, r5, r6}
  100796:	bc02      	pop	{r1}
  100798:	4708      	bx	r1
	...

0010079c <_read_r>:
  10079c:	b5f0      	push	{r4, r5, r6, r7, lr}
  10079e:	1c16      	mov	r6, r2		(add r6, r2, #0)
  1007a0:	1c1f      	mov	r7, r3		(add r7, r3, #0)
  1007a2:	2400      	mov	r4, #0
  1007a4:	e010      	b	1007c8 <_read_r+0x2c>
  1007a6:	2300      	mov	r3, #0
  1007a8:	702b      	strb	r3, [r5, #0]
  1007aa:	e010      	b	1007ce <_read_r+0x32>
  1007ac:	ff7ef7ff 	bl	1006ac <uart0_kbhit>
  1007b0:	2800      	cmp	r0, #0
  1007b2:	d0fb      	beq	1007ac <_read_r+0x10>
  1007b4:	ff82f7ff 	bl	1006bc <uart0_getc>
  1007b8:	0600      	lsl	r0, r0, #24
  1007ba:	0e00      	lsr	r0, r0, #24
  1007bc:	280d      	cmp	r0, #13
  1007be:	d0f2      	beq	1007a6 <_read_r+0xa>
  1007c0:	55a0      	strb	r0, [r4, r6]
  1007c2:	ff69f7ff 	bl	100698 <uart0_putc>
  1007c6:	3401      	add	r4, #1
  1007c8:	1935      	add	r5, r6, r4
  1007ca:	42bc      	cmp	r4, r7
  1007cc:	d1ee      	bne	1007ac <_read_r+0x10>
  1007ce:	1b38      	sub	r0, r7, r4
  1007d0:	bcf0      	pop	{r4, r5, r6, r7}
  1007d2:	bc02      	pop	{r1}
  1007d4:	4708      	bx	r1
  1007d6:	46c0      	nop			(mov r8, r8)

001007d8 <strcpy>:
  1007d8:	b570      	push	{r4, r5, r6, lr}
  1007da:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  1007dc:	4302      	orr	r2, r0
  1007de:	2303      	mov	r3, #3
  1007e0:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1007e2:	421a      	tst	r2, r3
  1007e4:	d00a      	beq	1007fc <strcpy+0x24>
  1007e6:	1c02      	mov	r2, r0		(add r2, r0, #0)
  1007e8:	780b      	ldrb	r3, [r1, #0]
  1007ea:	3101      	add	r1, #1
  1007ec:	7013      	strb	r3, [r2, #0]
  1007ee:	3201      	add	r2, #1
  1007f0:	2b00      	cmp	r3, #0
  1007f2:	d1f9      	bne	1007e8 <strcpy+0x10>
  1007f4:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1007f6:	bc70      	pop	{r4, r5, r6}
  1007f8:	bc02      	pop	{r1}
  1007fa:	4708      	bx	r1
  1007fc:	680a      	ldr	r2, [r1, #0]
  1007fe:	4c08      	ldr	r4, [pc, #32]	(100820 <.text+0x820>)
  100800:	1913      	add	r3, r2, r4
  100802:	4c08      	ldr	r4, [pc, #32]	(100824 <.text+0x824>)
  100804:	4393      	bic	r3, r2
  100806:	4223      	tst	r3, r4
  100808:	d107      	bne	10081a <strcpy+0x42>
  10080a:	c004      	stmia	r0!,{r2}
  10080c:	3104      	add	r1, #4
  10080e:	680a      	ldr	r2, [r1, #0]
  100810:	4e03      	ldr	r6, [pc, #12]	(100820 <.text+0x820>)
  100812:	1993      	add	r3, r2, r6
  100814:	4393      	bic	r3, r2
  100816:	4223      	tst	r3, r4
  100818:	d0f7      	beq	10080a <strcpy+0x32>
  10081a:	1c02      	mov	r2, r0		(add r2, r0, #0)
  10081c:	e7e4      	b	1007e8 <strcpy+0x10>
  10081e:	0000      	lsl	r0, r0, #0
  100820:	feff      	second half of BL instruction 0xfeff
  100822:	fefe      	second half of BL instruction 0xfefe
  100824:	8080      	strh	r0, [r0, #4]
  100826:	8080      	strh	r0, [r0, #4]

00100828 <strlen>:
  100828:	b530      	push	{r4, r5, lr}
  10082a:	2303      	mov	r3, #3
  10082c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10082e:	4218      	tst	r0, r3
  100830:	d116      	bne	100860 <strlen+0x38>
  100832:	490f      	ldr	r1, [pc, #60]	(100870 <.text+0x870>)
  100834:	6802      	ldr	r2, [r0, #0]
  100836:	1853      	add	r3, r2, r1
  100838:	490e      	ldr	r1, [pc, #56]	(100874 <.text+0x874>)
  10083a:	400b      	and	r3, r1
  10083c:	4393      	bic	r3, r2
  10083e:	d10f      	bne	100860 <strlen+0x38>
  100840:	3004      	add	r0, #4
  100842:	6802      	ldr	r2, [r0, #0]
  100844:	4d0a      	ldr	r5, [pc, #40]	(100870 <.text+0x870>)
  100846:	1953      	add	r3, r2, r5
  100848:	400b      	and	r3, r1
  10084a:	4393      	bic	r3, r2
  10084c:	d108      	bne	100860 <strlen+0x38>
  10084e:	3004      	add	r0, #4
  100850:	6802      	ldr	r2, [r0, #0]
  100852:	4d07      	ldr	r5, [pc, #28]	(100870 <.text+0x870>)
  100854:	1953      	add	r3, r2, r5
  100856:	400b      	and	r3, r1
  100858:	4393      	bic	r3, r2
  10085a:	d0f1      	beq	100840 <strlen+0x18>
  10085c:	e000      	b	100860 <strlen+0x38>
  10085e:	3001      	add	r0, #1
  100860:	7803      	ldrb	r3, [r0, #0]
  100862:	2b00      	cmp	r3, #0
  100864:	d1fb      	bne	10085e <strlen+0x36>
  100866:	1b00      	sub	r0, r0, r4
  100868:	bc30      	pop	{r4, r5}
  10086a:	bc02      	pop	{r1}
  10086c:	4708      	bx	r1
  10086e:	0000      	lsl	r0, r0, #0
  100870:	feff      	second half of BL instruction 0xfeff
  100872:	fefe      	second half of BL instruction 0xfefe
  100874:	8080      	strh	r0, [r0, #4]
  100876:	8080      	strh	r0, [r0, #4]

00100878 <__aeabi_uidiv>:
  100878:	2900      	cmp	r1, #0
  10087a:	d034      	beq	1008e6 <__aeabi_uidiv+0x6e>
  10087c:	2301      	mov	r3, #1
  10087e:	2200      	mov	r2, #0
  100880:	b410      	push	{r4}
  100882:	4288      	cmp	r0, r1
  100884:	d32c      	bcc	1008e0 <__aeabi_uidiv+0x68>
  100886:	2401      	mov	r4, #1
  100888:	0724      	lsl	r4, r4, #28
  10088a:	42a1      	cmp	r1, r4
  10088c:	d204      	bcs	100898 <__aeabi_uidiv+0x20>
  10088e:	4281      	cmp	r1, r0
  100890:	d202      	bcs	100898 <__aeabi_uidiv+0x20>
  100892:	0109      	lsl	r1, r1, #4
  100894:	011b      	lsl	r3, r3, #4
  100896:	e7f8      	b	10088a <__aeabi_uidiv+0x12>
  100898:	00e4      	lsl	r4, r4, #3
  10089a:	42a1      	cmp	r1, r4
  10089c:	d204      	bcs	1008a8 <__aeabi_uidiv+0x30>
  10089e:	4281      	cmp	r1, r0
  1008a0:	d202      	bcs	1008a8 <__aeabi_uidiv+0x30>
  1008a2:	0049      	lsl	r1, r1, #1
  1008a4:	005b      	lsl	r3, r3, #1
  1008a6:	e7f8      	b	10089a <__aeabi_uidiv+0x22>
  1008a8:	4288      	cmp	r0, r1
  1008aa:	d301      	bcc	1008b0 <__aeabi_uidiv+0x38>
  1008ac:	1a40      	sub	r0, r0, r1
  1008ae:	431a      	orr	r2, r3
  1008b0:	084c      	lsr	r4, r1, #1
  1008b2:	42a0      	cmp	r0, r4
  1008b4:	d302      	bcc	1008bc <__aeabi_uidiv+0x44>
  1008b6:	1b00      	sub	r0, r0, r4
  1008b8:	085c      	lsr	r4, r3, #1
  1008ba:	4322      	orr	r2, r4
  1008bc:	088c      	lsr	r4, r1, #2
  1008be:	42a0      	cmp	r0, r4
  1008c0:	d302      	bcc	1008c8 <__aeabi_uidiv+0x50>
  1008c2:	1b00      	sub	r0, r0, r4
  1008c4:	089c      	lsr	r4, r3, #2
  1008c6:	4322      	orr	r2, r4
  1008c8:	08cc      	lsr	r4, r1, #3
  1008ca:	42a0      	cmp	r0, r4
  1008cc:	d302      	bcc	1008d4 <__aeabi_uidiv+0x5c>
  1008ce:	1b00      	sub	r0, r0, r4
  1008d0:	08dc      	lsr	r4, r3, #3
  1008d2:	4322      	orr	r2, r4
  1008d4:	2800      	cmp	r0, #0
  1008d6:	d003      	beq	1008e0 <__aeabi_uidiv+0x68>
  1008d8:	091b      	lsr	r3, r3, #4
  1008da:	d001      	beq	1008e0 <__aeabi_uidiv+0x68>
  1008dc:	0909      	lsr	r1, r1, #4
  1008de:	e7e3      	b	1008a8 <__aeabi_uidiv+0x30>
  1008e0:	1c10      	mov	r0, r2		(add r0, r2, #0)
  1008e2:	bc10      	pop	{r4}
  1008e4:	4770      	bx	lr
  1008e6:	b502      	push	{r1, lr}
  1008e8:	f870f000 	bl	1009cc <__aeabi_idiv0>
  1008ec:	2000      	mov	r0, #0
  1008ee:	bc06      	pop	{r1, r2}
  1008f0:	4710      	bx	r2
	...

001008f4 <__aeabi_uidivmod>:
  1008f4:	b503      	push	{r0, r1, lr}
  1008f6:	ffbff7ff 	bl	100878 <__aeabi_uidiv>
  1008fa:	bc0e      	pop	{r1, r2, r3}
  1008fc:	4342      	mul	r2, r0
  1008fe:	1a89      	sub	r1, r1, r2
  100900:	4718      	bx	r3
  100902:	46c0      	nop			(mov r8, r8)

00100904 <__umodsi3>:
  100904:	2900      	cmp	r1, #0
  100906:	d05a      	beq	1009be <__umodsi3+0xba>
  100908:	2301      	mov	r3, #1
  10090a:	4288      	cmp	r0, r1
  10090c:	d200      	bcs	100910 <__umodsi3+0xc>
  10090e:	4770      	bx	lr
  100910:	b410      	push	{r4}
  100912:	2401      	mov	r4, #1
  100914:	0724      	lsl	r4, r4, #28
  100916:	42a1      	cmp	r1, r4
  100918:	d204      	bcs	100924 <__umodsi3+0x20>
  10091a:	4281      	cmp	r1, r0
  10091c:	d202      	bcs	100924 <__umodsi3+0x20>
  10091e:	0109      	lsl	r1, r1, #4
  100920:	011b      	lsl	r3, r3, #4
  100922:	e7f8      	b	100916 <__umodsi3+0x12>
  100924:	00e4      	lsl	r4, r4, #3
  100926:	42a1      	cmp	r1, r4
  100928:	d204      	bcs	100934 <__umodsi3+0x30>
  10092a:	4281      	cmp	r1, r0
  10092c:	d202      	bcs	100934 <__umodsi3+0x30>
  10092e:	0049      	lsl	r1, r1, #1
  100930:	005b      	lsl	r3, r3, #1
  100932:	e7f8      	b	100926 <__umodsi3+0x22>
  100934:	2200      	mov	r2, #0
  100936:	4288      	cmp	r0, r1
  100938:	d300      	bcc	10093c <__umodsi3+0x38>
  10093a:	1a40      	sub	r0, r0, r1
  10093c:	084c      	lsr	r4, r1, #1
  10093e:	42a0      	cmp	r0, r4
  100940:	d305      	bcc	10094e <__umodsi3+0x4a>
  100942:	1b00      	sub	r0, r0, r4
  100944:	469c      	mov	ip, r3
  100946:	2401      	mov	r4, #1
  100948:	41e3      	ror	r3, r4
  10094a:	431a      	orr	r2, r3
  10094c:	4663      	mov	r3, ip
  10094e:	088c      	lsr	r4, r1, #2
  100950:	42a0      	cmp	r0, r4
  100952:	d305      	bcc	100960 <__umodsi3+0x5c>
  100954:	1b00      	sub	r0, r0, r4
  100956:	469c      	mov	ip, r3
  100958:	2402      	mov	r4, #2
  10095a:	41e3      	ror	r3, r4
  10095c:	431a      	orr	r2, r3
  10095e:	4663      	mov	r3, ip
  100960:	08cc      	lsr	r4, r1, #3
  100962:	42a0      	cmp	r0, r4
  100964:	d305      	bcc	100972 <__umodsi3+0x6e>
  100966:	1b00      	sub	r0, r0, r4
  100968:	469c      	mov	ip, r3
  10096a:	2403      	mov	r4, #3
  10096c:	41e3      	ror	r3, r4
  10096e:	431a      	orr	r2, r3
  100970:	4663      	mov	r3, ip
  100972:	469c      	mov	ip, r3
  100974:	2800      	cmp	r0, #0
  100976:	d003      	beq	100980 <__umodsi3+0x7c>
  100978:	091b      	lsr	r3, r3, #4
  10097a:	d001      	beq	100980 <__umodsi3+0x7c>
  10097c:	0909      	lsr	r1, r1, #4
  10097e:	e7d9      	b	100934 <__umodsi3+0x30>
  100980:	240e      	mov	r4, #14
  100982:	0724      	lsl	r4, r4, #28
  100984:	4022      	and	r2, r4
  100986:	d018      	beq	1009ba <__umodsi3+0xb6>
  100988:	4663      	mov	r3, ip
  10098a:	2407      	mov	r4, #7
  10098c:	4223      	tst	r3, r4
  10098e:	d014      	beq	1009ba <__umodsi3+0xb6>
  100990:	4663      	mov	r3, ip
  100992:	2403      	mov	r4, #3
  100994:	41e3      	ror	r3, r4
  100996:	421a      	tst	r2, r3
  100998:	d001      	beq	10099e <__umodsi3+0x9a>
  10099a:	08cc      	lsr	r4, r1, #3
  10099c:	1900      	add	r0, r0, r4
  10099e:	4663      	mov	r3, ip
  1009a0:	2402      	mov	r4, #2
  1009a2:	41e3      	ror	r3, r4
  1009a4:	421a      	tst	r2, r3
  1009a6:	d001      	beq	1009ac <__umodsi3+0xa8>
  1009a8:	088c      	lsr	r4, r1, #2
  1009aa:	1900      	add	r0, r0, r4
  1009ac:	4663      	mov	r3, ip
  1009ae:	2401      	mov	r4, #1
  1009b0:	41e3      	ror	r3, r4
  1009b2:	421a      	tst	r2, r3
  1009b4:	d001      	beq	1009ba <__umodsi3+0xb6>
  1009b6:	084c      	lsr	r4, r1, #1
  1009b8:	1900      	add	r0, r0, r4
  1009ba:	bc10      	pop	{r4}
  1009bc:	4770      	bx	lr
  1009be:	b502      	push	{r1, lr}
  1009c0:	f804f000 	bl	1009cc <__aeabi_idiv0>
  1009c4:	2000      	mov	r0, #0
  1009c6:	bc06      	pop	{r1, r2}
  1009c8:	4710      	bx	r2
  1009ca:	46c0      	nop			(mov r8, r8)

001009cc <__aeabi_idiv0>:
  1009cc:	4770      	bx	lr
  1009ce:	46c0      	nop			(mov r8, r8)

001009d0 <efs_init>:
  1009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  1009d2:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1009d4:	fe5cf002 	bl	103690 <if_initInterface>
  1009d8:	0600      	lsl	r0, r0, #24
  1009da:	0e07      	lsr	r7, r0, #24
  1009dc:	2f00      	cmp	r7, #0
  1009de:	d001      	beq	1009e4 <efs_init+0x14>
  1009e0:	2001      	mov	r0, #1
  1009e2:	e02c      	b	100a3e <efs_init+0x6e>
  1009e4:	1d2c      	add	r4, r5, #4
  1009e6:	2200      	mov	r2, #0
  1009e8:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1009ea:	1c29      	mov	r1, r5		(add r1, r5, #0)
  1009ec:	fa36f002 	bl	102e5c <ioman_init>
  1009f0:	4b16      	ldr	r3, [pc, #88]	(100a4c <.text+0xa4c>)
  1009f2:	18ee      	add	r6, r5, r3
  1009f4:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1009f6:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1009f8:	f850f000 	bl	100a9c <disc_initDisc>
  1009fc:	4b14      	ldr	r3, [pc, #80]	(100a50 <.text+0xa50>)
  1009fe:	18ec      	add	r4, r5, r3
  100a00:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100a02:	1c31      	mov	r1, r6		(add r1, r6, #0)
  100a04:	f866f000 	bl	100ad4 <part_initPartition>
  100a08:	23d2      	mov	r3, #210
  100a0a:	011b      	lsl	r3, r3, #4
  100a0c:	56eb      	ldrsb	r3, [r5, r3]
  100a0e:	3301      	add	r3, #1
  100a10:	d10c      	bne	100a2c <efs_init+0x5c>
  100a12:	23ce      	mov	r3, #206
  100a14:	011b      	lsl	r3, r3, #4
  100a16:	220b      	mov	r2, #11
  100a18:	54ea      	strb	r2, [r5, r3]
  100a1a:	4b0e      	ldr	r3, [pc, #56]	(100a54 <.text+0xa54>)
  100a1c:	50ef      	str	r7, [r5, r3]
  100a1e:	682a      	ldr	r2, [r5, #0]
  100a20:	3304      	add	r3, #4
  100a22:	50ea      	str	r2, [r5, r3]
  100a24:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100a26:	1c31      	mov	r1, r6		(add r1, r6, #0)
  100a28:	f854f000 	bl	100ad4 <part_initPartition>
  100a2c:	4b0a      	ldr	r3, [pc, #40]	(100a58 <.text+0xa58>)
  100a2e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100a30:	18e8      	add	r0, r5, r3
  100a32:	fbe3f000 	bl	1011fc <fs_initFs>
  100a36:	0400      	lsl	r0, r0, #16
  100a38:	2800      	cmp	r0, #0
  100a3a:	d002      	beq	100a42 <efs_init+0x72>
  100a3c:	2002      	mov	r0, #2
  100a3e:	4240      	neg	r0, r0
  100a40:	e000      	b	100a44 <efs_init+0x74>
  100a42:	2000      	mov	r0, #0
  100a44:	bcf0      	pop	{r4, r5, r6, r7}
  100a46:	bc02      	pop	{r1}
  100a48:	4708      	bx	r1
  100a4a:	0000      	lsl	r0, r0, #0
  100a4c:	0cd4      	lsr	r4, r2, #19
  100a4e:	0000      	lsl	r0, r0, #0
  100a50:	0d1c      	lsr	r4, r3, #20
  100a52:	0000      	lsl	r0, r0, #0
  100a54:	0ce4      	lsr	r4, r4, #19
  100a56:	0000      	lsl	r0, r0, #0
  100a58:	0d24      	lsr	r4, r4, #20
	...

00100a5c <disc_loadMBR>:
  100a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  100a5e:	b081      	sub	sp, #4
  100a60:	1c06      	mov	r6, r0		(add r6, r0, #0)
  100a62:	2100      	mov	r1, #0
  100a64:	6800      	ldr	r0, [r0, #0]
  100a66:	2205      	mov	r2, #5
  100a68:	f968f002 	bl	102d3c <ioman_getSector>
  100a6c:	1c34      	mov	r4, r6		(add r4, r6, #0)
  100a6e:	25df      	mov	r5, #223
  100a70:	9000      	str	r0, [sp, #0]
  100a72:	2700      	mov	r7, #0
  100a74:	3408      	add	r4, #8
  100a76:	006d      	lsl	r5, r5, #1
  100a78:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100a7a:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  100a7c:	9800      	ldr	r0, [sp, #0]
  100a7e:	3701      	add	r7, #1
  100a80:	fbb2f002 	bl	1031e8 <ex_getPartitionField>
  100a84:	3510      	add	r5, #16
  100a86:	3410      	add	r4, #16
  100a88:	2f04      	cmp	r7, #4
  100a8a:	d1f5      	bne	100a78 <disc_loadMBR+0x1c>
  100a8c:	6830      	ldr	r0, [r6, #0]
  100a8e:	9900      	ldr	r1, [sp, #0]
  100a90:	f8d0f002 	bl	102c34 <ioman_releaseSector>
  100a94:	b001      	add	sp, #4
  100a96:	bcf0      	pop	{r4, r5, r6, r7}
  100a98:	bc01      	pop	{r0}
  100a9a:	4700      	bx	r0

00100a9c <disc_initDisc>:
  100a9c:	b500      	push	{lr}
  100a9e:	2300      	mov	r3, #0
  100aa0:	6001      	str	r1, [r0, #0]
  100aa2:	7103      	strb	r3, [r0, #4]
  100aa4:	ffdaf7ff 	bl	100a5c <disc_loadMBR>
  100aa8:	bc01      	pop	{r0}
  100aaa:	4700      	bx	r0

00100aac <part_isFatPart>:
  100aac:	0600      	lsl	r0, r0, #24
  100aae:	0e00      	lsr	r0, r0, #24
  100ab0:	2801      	cmp	r0, #1
  100ab2:	d00d      	beq	100ad0 <part_isFatPart+0x24>
  100ab4:	2804      	cmp	r0, #4
  100ab6:	d00b      	beq	100ad0 <part_isFatPart+0x24>
  100ab8:	2806      	cmp	r0, #6
  100aba:	d009      	beq	100ad0 <part_isFatPart+0x24>
  100abc:	280b      	cmp	r0, #11
  100abe:	d007      	beq	100ad0 <part_isFatPart+0x24>
  100ac0:	285c      	cmp	r0, #92
  100ac2:	d005      	beq	100ad0 <part_isFatPart+0x24>
  100ac4:	2300      	mov	r3, #0
  100ac6:	285e      	cmp	r0, #94
  100ac8:	d100      	bne	100acc <part_isFatPart+0x20>
  100aca:	2301      	mov	r3, #1
  100acc:	1c18      	mov	r0, r3		(add r0, r3, #0)
  100ace:	e000      	b	100ad2 <part_isFatPart+0x26>
  100ad0:	2001      	mov	r0, #1
  100ad2:	4770      	bx	lr

00100ad4 <part_initPartition>:
  100ad4:	b530      	push	{r4, r5, lr}
  100ad6:	2301      	mov	r3, #1
  100ad8:	425b      	neg	r3, r3
  100ada:	6001      	str	r1, [r0, #0]
  100adc:	7103      	strb	r3, [r0, #4]
  100ade:	1c04      	mov	r4, r0		(add r4, r0, #0)
  100ae0:	2503      	mov	r5, #3
  100ae2:	6822      	ldr	r2, [r4, #0]
  100ae4:	012b      	lsl	r3, r5, #4
  100ae6:	189b      	add	r3, r3, r2
  100ae8:	7b18      	ldrb	r0, [r3, #12]
  100aea:	ffdff7ff 	bl	100aac <part_isFatPart>
  100aee:	2800      	cmp	r0, #0
  100af0:	d000      	beq	100af4 <part_initPartition+0x20>
  100af2:	7125      	strb	r5, [r4, #4]
  100af4:	3d01      	sub	r5, #1
  100af6:	d2f4      	bcs	100ae2 <part_initPartition+0xe>
  100af8:	bc30      	pop	{r4, r5}
  100afa:	bc01      	pop	{r0}
  100afc:	4700      	bx	r0
	...

00100b00 <part_getRealLBA>:
  100b00:	2304      	mov	r3, #4
  100b02:	56c3      	ldrsb	r3, [r0, r3]
  100b04:	6802      	ldr	r2, [r0, #0]
  100b06:	011b      	lsl	r3, r3, #4
  100b08:	189b      	add	r3, r3, r2
  100b0a:	691b      	ldr	r3, [r3, #16]
  100b0c:	18c9      	add	r1, r1, r3
  100b0e:	1c08      	mov	r0, r1		(add r0, r1, #0)
  100b10:	4770      	bx	lr
	...

00100b14 <part_relSect>:
  100b14:	b500      	push	{lr}
  100b16:	6803      	ldr	r3, [r0, #0]
  100b18:	6818      	ldr	r0, [r3, #0]
  100b1a:	f88bf002 	bl	102c34 <ioman_releaseSector>
  100b1e:	0600      	lsl	r0, r0, #24
  100b20:	1600      	asr	r0, r0, #24
  100b22:	bc02      	pop	{r1}
  100b24:	4708      	bx	r1
	...

00100b28 <part_readBuf>:
  100b28:	b530      	push	{r4, r5, lr}
  100b2a:	6804      	ldr	r4, [r0, #0]
  100b2c:	6823      	ldr	r3, [r4, #0]
  100b2e:	681d      	ldr	r5, [r3, #0]
  100b30:	2304      	mov	r3, #4
  100b32:	56c3      	ldrsb	r3, [r0, r3]
  100b34:	011b      	lsl	r3, r3, #4
  100b36:	191b      	add	r3, r3, r4
  100b38:	691b      	ldr	r3, [r3, #16]
  100b3a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100b3c:	18c9      	add	r1, r1, r3
  100b3e:	fd9df002 	bl	10367c <if_readBuf>
  100b42:	0600      	lsl	r0, r0, #24
  100b44:	1600      	asr	r0, r0, #24
  100b46:	bc30      	pop	{r4, r5}
  100b48:	bc02      	pop	{r1}
  100b4a:	4708      	bx	r1

00100b4c <part_directSectorWrite>:
  100b4c:	b530      	push	{r4, r5, lr}
  100b4e:	2304      	mov	r3, #4
  100b50:	56c3      	ldrsb	r3, [r0, r3]
  100b52:	6804      	ldr	r4, [r0, #0]
  100b54:	011b      	lsl	r3, r3, #4
  100b56:	191b      	add	r3, r3, r4
  100b58:	6825      	ldr	r5, [r4, #0]
  100b5a:	691b      	ldr	r3, [r3, #16]
  100b5c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100b5e:	18c9      	add	r1, r1, r3
  100b60:	fe1cf001 	bl	10279c <ioman_directSectorWrite>
  100b64:	0600      	lsl	r0, r0, #24
  100b66:	1600      	asr	r0, r0, #24
  100b68:	bc30      	pop	{r4, r5}
  100b6a:	bc02      	pop	{r1}
  100b6c:	4708      	bx	r1
	...

00100b70 <part_directSectorRead>:
  100b70:	b530      	push	{r4, r5, lr}
  100b72:	2304      	mov	r3, #4
  100b74:	56c3      	ldrsb	r3, [r0, r3]
  100b76:	6804      	ldr	r4, [r0, #0]
  100b78:	011b      	lsl	r3, r3, #4
  100b7a:	191b      	add	r3, r3, r4
  100b7c:	6825      	ldr	r5, [r4, #0]
  100b7e:	691b      	ldr	r3, [r3, #16]
  100b80:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100b82:	18c9      	add	r1, r1, r3
  100b84:	ff34f001 	bl	1029f0 <ioman_directSectorRead>
  100b88:	0600      	lsl	r0, r0, #24
  100b8a:	1600      	asr	r0, r0, #24
  100b8c:	bc30      	pop	{r4, r5}
  100b8e:	bc02      	pop	{r1}
  100b90:	4708      	bx	r1
	...

00100b94 <part_flushPart>:
  100b94:	b530      	push	{r4, r5, lr}
  100b96:	2304      	mov	r3, #4
  100b98:	56c3      	ldrsb	r3, [r0, r3]
  100b9a:	6804      	ldr	r4, [r0, #0]
  100b9c:	011b      	lsl	r3, r3, #4
  100b9e:	191b      	add	r3, r3, r4
  100ba0:	1c15      	mov	r5, r2		(add r5, r2, #0)
  100ba2:	691a      	ldr	r2, [r3, #16]
  100ba4:	6820      	ldr	r0, [r4, #0]
  100ba6:	1851      	add	r1, r2, r1
  100ba8:	1952      	add	r2, r2, r5
  100baa:	fe9ff001 	bl	1028ec <ioman_flushRange>
  100bae:	0600      	lsl	r0, r0, #24
  100bb0:	1600      	asr	r0, r0, #24
  100bb2:	bc30      	pop	{r4, r5}
  100bb4:	bc02      	pop	{r1}
  100bb6:	4708      	bx	r1

00100bb8 <part_getSect>:
  100bb8:	b530      	push	{r4, r5, lr}
  100bba:	2304      	mov	r3, #4
  100bbc:	56c3      	ldrsb	r3, [r0, r3]
  100bbe:	6804      	ldr	r4, [r0, #0]
  100bc0:	011b      	lsl	r3, r3, #4
  100bc2:	191b      	add	r3, r3, r4
  100bc4:	6825      	ldr	r5, [r4, #0]
  100bc6:	691b      	ldr	r3, [r3, #16]
  100bc8:	0612      	lsl	r2, r2, #24
  100bca:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100bcc:	0e12      	lsr	r2, r2, #24
  100bce:	18c9      	add	r1, r1, r3
  100bd0:	f8b4f002 	bl	102d3c <ioman_getSector>
  100bd4:	bc30      	pop	{r4, r5}
  100bd6:	bc02      	pop	{r1}
  100bd8:	4708      	bx	r1
	...

00100bdc <part_writeBuf>:
  100bdc:	b530      	push	{r4, r5, lr}
  100bde:	6804      	ldr	r4, [r0, #0]
  100be0:	6823      	ldr	r3, [r4, #0]
  100be2:	681d      	ldr	r5, [r3, #0]
  100be4:	2304      	mov	r3, #4
  100be6:	56c3      	ldrsb	r3, [r0, r3]
  100be8:	011b      	lsl	r3, r3, #4
  100bea:	191b      	add	r3, r3, r4
  100bec:	691b      	ldr	r3, [r3, #16]
  100bee:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100bf0:	18c9      	add	r1, r1, r3
  100bf2:	fd3bf002 	bl	10366c <if_writeBuf>
  100bf6:	0600      	lsl	r0, r0, #24
  100bf8:	1600      	asr	r0, r0, #24
  100bfa:	bc30      	pop	{r4, r5}
  100bfc:	bc02      	pop	{r1}
  100bfe:	4708      	bx	r1

00100c00 <fs_verifySanity>:
  100c00:	b530      	push	{r4, r5, lr}
  100c02:	7982      	ldrb	r2, [r0, #6]
  100c04:	1c04      	mov	r4, r0		(add r4, r0, #0)
  100c06:	8885      	ldrh	r5, [r0, #4]
  100c08:	2100      	mov	r1, #0
  100c0a:	2a08      	cmp	r2, #8
  100c0c:	d100      	bne	100c10 <fs_verifySanity+0x10>
  100c0e:	2101      	mov	r1, #1
  100c10:	2300      	mov	r3, #0
  100c12:	2a04      	cmp	r2, #4
  100c14:	d100      	bne	100c18 <fs_verifySanity+0x18>
  100c16:	2301      	mov	r3, #1
  100c18:	430b      	orr	r3, r1
  100c1a:	2100      	mov	r1, #0
  100c1c:	2a20      	cmp	r2, #32
  100c1e:	d100      	bne	100c22 <fs_verifySanity+0x22>
  100c20:	2101      	mov	r1, #1
  100c22:	1c18      	mov	r0, r3		(add r0, r3, #0)
  100c24:	1e53      	sub	r3, r2, #1
  100c26:	061b      	lsl	r3, r3, #24
  100c28:	0e1b      	lsr	r3, r3, #24
  100c2a:	4308      	orr	r0, r1
  100c2c:	2100      	mov	r1, #0
  100c2e:	2b01      	cmp	r3, #1
  100c30:	d800      	bhi	100c34 <fs_verifySanity+0x34>
  100c32:	2101      	mov	r1, #1
  100c34:	2300      	mov	r3, #0
  100c36:	2a10      	cmp	r2, #16
  100c38:	d100      	bne	100c3c <fs_verifySanity+0x3c>
  100c3a:	2301      	mov	r3, #1
  100c3c:	430b      	orr	r3, r1
  100c3e:	2100      	mov	r1, #0
  100c40:	2a40      	cmp	r2, #64
  100c42:	d100      	bne	100c46 <fs_verifySanity+0x46>
  100c44:	2101      	mov	r1, #1
  100c46:	430b      	orr	r3, r1
  100c48:	4318      	orr	r0, r3
  100c4a:	d101      	bne	100c50 <fs_verifySanity+0x50>
  100c4c:	2500      	mov	r5, #0
  100c4e:	e009      	b	100c64 <fs_verifySanity+0x64>
  100c50:	2380      	mov	r3, #128
  100c52:	009b      	lsl	r3, r3, #2
  100c54:	2200      	mov	r2, #0
  100c56:	429d      	cmp	r5, r3
  100c58:	d000      	beq	100c5c <fs_verifySanity+0x5c>
  100c5a:	2201      	mov	r2, #1
  100c5c:	2301      	mov	r3, #1
  100c5e:	4053      	eor	r3, r2
  100c60:	061b      	lsl	r3, r3, #24
  100c62:	0e1d      	lsr	r5, r3, #24
  100c64:	8923      	ldrh	r3, [r4, #8]
  100c66:	2b00      	cmp	r3, #0
  100c68:	d100      	bne	100c6c <fs_verifySanity+0x6c>
  100c6a:	2500      	mov	r5, #0
  100c6c:	8a20      	ldrh	r0, [r4, #16]
  100c6e:	6821      	ldr	r1, [r4, #0]
  100c70:	2800      	cmp	r0, #0
  100c72:	d008      	beq	100c86 <fs_verifySanity+0x86>
  100c74:	2204      	mov	r2, #4
  100c76:	568a      	ldrsb	r2, [r1, r2]
  100c78:	680b      	ldr	r3, [r1, #0]
  100c7a:	0112      	lsl	r2, r2, #4
  100c7c:	18d2      	add	r2, r2, r3
  100c7e:	6953      	ldr	r3, [r2, #20]
  100c80:	4298      	cmp	r0, r3
  100c82:	d809      	bhi	100c98 <fs_verifySanity+0x98>
  100c84:	e009      	b	100c9a <fs_verifySanity+0x9a>
  100c86:	2304      	mov	r3, #4
  100c88:	56cb      	ldrsb	r3, [r1, r3]
  100c8a:	680a      	ldr	r2, [r1, #0]
  100c8c:	011b      	lsl	r3, r3, #4
  100c8e:	189b      	add	r3, r3, r2
  100c90:	695b      	ldr	r3, [r3, #20]
  100c92:	69a2      	ldr	r2, [r4, #24]
  100c94:	429a      	cmp	r2, r3
  100c96:	d900      	bls	100c9a <fs_verifySanity+0x9a>
  100c98:	2500      	mov	r5, #0
  100c9a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100c9c:	bc30      	pop	{r4, r5}
  100c9e:	bc02      	pop	{r1}
  100ca0:	4708      	bx	r1
	...

00100ca4 <fs_countDataSectors>:
  100ca4:	b530      	push	{r4, r5, lr}
  100ca6:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100ca8:	8a2a      	ldrh	r2, [r5, #16]
  100caa:	8980      	ldrh	r0, [r0, #12]
  100cac:	88a9      	ldrh	r1, [r5, #4]
  100cae:	2a00      	cmp	r2, #0
  100cb0:	d003      	beq	100cba <fs_countDataSectors+0x16>
  100cb2:	2300      	mov	r3, #0
  100cb4:	626a      	str	r2, [r5, #36]
  100cb6:	61ab      	str	r3, [r5, #24]
  100cb8:	e002      	b	100cc0 <fs_countDataSectors+0x1c>
  100cba:	69ab      	ldr	r3, [r5, #24]
  100cbc:	822a      	strh	r2, [r5, #16]
  100cbe:	626b      	str	r3, [r5, #36]
  100cc0:	89ea      	ldrh	r2, [r5, #14]
  100cc2:	2a00      	cmp	r2, #0
  100cc4:	d003      	beq	100cce <fs_countDataSectors+0x2a>
  100cc6:	2300      	mov	r3, #0
  100cc8:	62aa      	str	r2, [r5, #40]
  100cca:	616b      	str	r3, [r5, #20]
  100ccc:	e002      	b	100cd4 <fs_countDataSectors+0x30>
  100cce:	696b      	ldr	r3, [r5, #20]
  100cd0:	81ea      	strh	r2, [r5, #14]
  100cd2:	62ab      	str	r3, [r5, #40]
  100cd4:	7aaa      	ldrb	r2, [r5, #10]
  100cd6:	6a6b      	ldr	r3, [r5, #36]
  100cd8:	4353      	mul	r3, r2
  100cda:	0140      	lsl	r0, r0, #5
  100cdc:	892c      	ldrh	r4, [r5, #8]
  100cde:	1840      	add	r0, r0, r1
  100ce0:	3801      	sub	r0, #1
  100ce2:	18e4      	add	r4, r4, r3
  100ce4:	ff52f002 	bl	103b8c <__aeabi_idiv>
  100ce8:	1824      	add	r4, r4, r0
  100cea:	6aa8      	ldr	r0, [r5, #40]
  100cec:	79a9      	ldrb	r1, [r5, #6]
  100cee:	1b00      	sub	r0, r0, r4
  100cf0:	fdc2f7ff 	bl	100878 <__aeabi_uidiv>
  100cf4:	6228      	str	r0, [r5, #32]
  100cf6:	bc30      	pop	{r4, r5}
  100cf8:	bc01      	pop	{r0}
  100cfa:	4700      	bx	r0

00100cfc <fs_determineFatType>:
  100cfc:	6a02      	ldr	r2, [r0, #32]
  100cfe:	4b0a      	ldr	r3, [pc, #40]	(100d28 <.text+0xd28>)
  100d00:	429a      	cmp	r2, r3
  100d02:	d804      	bhi	100d0e <fs_determineFatType+0x12>
  100d04:	1c03      	mov	r3, r0		(add r3, r0, #0)
  100d06:	333c      	add	r3, #60
  100d08:	2201      	mov	r2, #1
  100d0a:	701a      	strb	r2, [r3, #0]
  100d0c:	e006      	b	100d1c <fs_determineFatType+0x20>
  100d0e:	4b07      	ldr	r3, [pc, #28]	(100d2c <.text+0xd2c>)
  100d10:	1c01      	mov	r1, r0		(add r1, r0, #0)
  100d12:	313c      	add	r1, #60
  100d14:	429a      	cmp	r2, r3
  100d16:	d804      	bhi	100d22 <fs_determineFatType+0x26>
  100d18:	2302      	mov	r3, #2
  100d1a:	700b      	strb	r3, [r1, #0]
  100d1c:	2300      	mov	r3, #0
  100d1e:	61c3      	str	r3, [r0, #28]
  100d20:	e001      	b	100d26 <fs_determineFatType+0x2a>
  100d22:	2303      	mov	r3, #3
  100d24:	700b      	strb	r3, [r1, #0]
  100d26:	4770      	bx	lr
  100d28:	0ff4      	lsr	r4, r6, #31
  100d2a:	0000      	lsl	r0, r0, #0
  100d2c:	fff4      	second half of BL instruction 0xfff4
	...

00100d30 <fs_findFirstSectorRootDir>:
  100d30:	b510      	push	{r4, lr}
  100d32:	1c03      	mov	r3, r0		(add r3, r0, #0)
  100d34:	333c      	add	r3, #60
  100d36:	781b      	ldrb	r3, [r3, #0]
  100d38:	7a82      	ldrb	r2, [r0, #10]
  100d3a:	8904      	ldrh	r4, [r0, #8]
  100d3c:	2b03      	cmp	r3, #3
  100d3e:	d10a      	bne	100d56 <fs_findFirstSectorRootDir+0x26>
  100d40:	6983      	ldr	r3, [r0, #24]
  100d42:	1c19      	mov	r1, r3		(add r1, r3, #0)
  100d44:	4351      	mul	r1, r2
  100d46:	69c3      	ldr	r3, [r0, #28]
  100d48:	7982      	ldrb	r2, [r0, #6]
  100d4a:	3b02      	sub	r3, #2
  100d4c:	4353      	mul	r3, r2
  100d4e:	191b      	add	r3, r3, r4
  100d50:	18c9      	add	r1, r1, r3
  100d52:	62c1      	str	r1, [r0, #44]
  100d54:	e003      	b	100d5e <fs_findFirstSectorRootDir+0x2e>
  100d56:	8a03      	ldrh	r3, [r0, #16]
  100d58:	4353      	mul	r3, r2
  100d5a:	18e3      	add	r3, r4, r3
  100d5c:	62c3      	str	r3, [r0, #44]
  100d5e:	bc10      	pop	{r4}
  100d60:	bc01      	pop	{r0}
  100d62:	4700      	bx	r0

00100d64 <fs_clusterToSector>:
  100d64:	b530      	push	{r4, r5, lr}
  100d66:	1c03      	mov	r3, r0		(add r3, r0, #0)
  100d68:	333c      	add	r3, #60
  100d6a:	781b      	ldrb	r3, [r3, #0]
  100d6c:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  100d6e:	8904      	ldrh	r4, [r0, #8]
  100d70:	7a81      	ldrb	r1, [r0, #10]
  100d72:	6a42      	ldr	r2, [r0, #36]
  100d74:	2b03      	cmp	r3, #3
  100d76:	d103      	bne	100d80 <fs_clusterToSector+0x1c>
  100d78:	1c13      	mov	r3, r2		(add r3, r2, #0)
  100d7a:	434b      	mul	r3, r1
  100d7c:	18e1      	add	r1, r4, r3
  100d7e:	e004      	b	100d8a <fs_clusterToSector+0x26>
  100d80:	434a      	mul	r2, r1
  100d82:	8983      	ldrh	r3, [r0, #12]
  100d84:	18a2      	add	r2, r4, r2
  100d86:	091b      	lsr	r3, r3, #4
  100d88:	18d1      	add	r1, r2, r3
  100d8a:	7983      	ldrb	r3, [r0, #6]
  100d8c:	1eaa      	sub	r2, r5, #2
  100d8e:	1c18      	mov	r0, r3		(add r0, r3, #0)
  100d90:	4350      	mul	r0, r2
  100d92:	1808      	add	r0, r1, r0
  100d94:	bc30      	pop	{r4, r5}
  100d96:	bc02      	pop	{r1}
  100d98:	4708      	bx	r1
	...

00100d9c <fs_sectorToCluster>:
  100d9c:	b530      	push	{r4, r5, lr}
  100d9e:	1c03      	mov	r3, r0		(add r3, r0, #0)
  100da0:	333c      	add	r3, #60
  100da2:	781b      	ldrb	r3, [r3, #0]
  100da4:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  100da6:	7a85      	ldrb	r5, [r0, #10]
  100da8:	8901      	ldrh	r1, [r0, #8]
  100daa:	6a42      	ldr	r2, [r0, #36]
  100dac:	2b03      	cmp	r3, #3
  100dae:	d103      	bne	100db8 <fs_sectorToCluster+0x1c>
  100db0:	1c13      	mov	r3, r2		(add r3, r2, #0)
  100db2:	436b      	mul	r3, r5
  100db4:	18c9      	add	r1, r1, r3
  100db6:	e004      	b	100dc2 <fs_sectorToCluster+0x26>
  100db8:	436a      	mul	r2, r5
  100dba:	8983      	ldrh	r3, [r0, #12]
  100dbc:	188a      	add	r2, r1, r2
  100dbe:	091b      	lsr	r3, r3, #4
  100dc0:	18d1      	add	r1, r2, r3
  100dc2:	7985      	ldrb	r5, [r0, #6]
  100dc4:	1a64      	sub	r4, r4, r1
  100dc6:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100dc8:	1c29      	mov	r1, r5		(add r1, r5, #0)
  100dca:	fd9bf7ff 	bl	100904 <__umodsi3>
  100dce:	1a24      	sub	r4, r4, r0
  100dd0:	1c29      	mov	r1, r5		(add r1, r5, #0)
  100dd2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100dd4:	fd50f7ff 	bl	100878 <__aeabi_uidiv>
  100dd8:	3002      	add	r0, #2
  100dda:	bc30      	pop	{r4, r5}
  100ddc:	bc02      	pop	{r1}
  100dde:	4708      	bx	r1

00100de0 <fs_giveFreeClusterHint>:
  100de0:	2002      	mov	r0, #2
  100de2:	4770      	bx	lr

00100de4 <fs_getFirstClusterRootDir>:
  100de4:	1c03      	mov	r3, r0		(add r3, r0, #0)
  100de6:	333c      	add	r3, #60
  100de8:	781b      	ldrb	r3, [r3, #0]
  100dea:	2b03      	cmp	r3, #3
  100dec:	d001      	beq	100df2 <fs_getFirstClusterRootDir+0xe>
  100dee:	2001      	mov	r0, #1
  100df0:	e000      	b	100df4 <fs_getFirstClusterRootDir+0x10>
  100df2:	69c0      	ldr	r0, [r0, #28]
  100df4:	4770      	bx	lr
	...

00100df8 <fs_initClusterChain>:
  100df8:	2300      	mov	r3, #0
  100dfa:	60ca      	str	r2, [r1, #12]
  100dfc:	608a      	str	r2, [r1, #8]
  100dfe:	604b      	str	r3, [r1, #4]
  100e00:	610b      	str	r3, [r1, #16]
  100e02:	700b      	strb	r3, [r1, #0]
  100e04:	614b      	str	r3, [r1, #20]
  100e06:	4770      	bx	lr

00100e08 <fs_setFirstClusterInDirEntry>:
  100e08:	0c0b      	lsr	r3, r1, #16
  100e0a:	8283      	strh	r3, [r0, #20]
  100e0c:	8341      	strh	r1, [r0, #26]
  100e0e:	4770      	bx	lr

00100e10 <fs_setFsInfo>:
  100e10:	b530      	push	{r4, r5, lr}
  100e12:	2101      	mov	r1, #1
  100e14:	2202      	mov	r2, #2
  100e16:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100e18:	6800      	ldr	r0, [r0, #0]
  100e1a:	fecdf7ff 	bl	100bb8 <part_getSect>
  100e1e:	2100      	mov	r1, #0
  100e20:	1c04      	mov	r4, r0		(add r4, r0, #0)
  100e22:	f9c3f002 	bl	1031ac <ex_getb32>
  100e26:	4b13      	ldr	r3, [pc, #76]	(100e74 <.text+0xe74>)
  100e28:	4298      	cmp	r0, r3
  100e2a:	d107      	bne	100e3c <fs_setFsInfo+0x2c>
  100e2c:	21fe      	mov	r1, #254
  100e2e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100e30:	0049      	lsl	r1, r1, #1
  100e32:	f9bbf002 	bl	1031ac <ex_getb32>
  100e36:	4b10      	ldr	r3, [pc, #64]	(100e78 <.text+0xe78>)
  100e38:	4298      	cmp	r0, r3
  100e3a:	d006      	beq	100e4a <fs_setFsInfo+0x3a>
  100e3c:	6828      	ldr	r0, [r5, #0]
  100e3e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100e40:	fe68f7ff 	bl	100b14 <part_relSect>
  100e44:	2001      	mov	r0, #1
  100e46:	4240      	neg	r0, r0
  100e48:	e010      	b	100e6c <fs_setFsInfo+0x5c>
  100e4a:	21f4      	mov	r1, #244
  100e4c:	6b6a      	ldr	r2, [r5, #52]
  100e4e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100e50:	0049      	lsl	r1, r1, #1
  100e52:	f9bff002 	bl	1031d4 <ex_setb32>
  100e56:	21f6      	mov	r1, #246
  100e58:	6baa      	ldr	r2, [r5, #56]
  100e5a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100e5c:	0049      	lsl	r1, r1, #1
  100e5e:	f9b9f002 	bl	1031d4 <ex_setb32>
  100e62:	6828      	ldr	r0, [r5, #0]
  100e64:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100e66:	fe55f7ff 	bl	100b14 <part_relSect>
  100e6a:	2000      	mov	r0, #0
  100e6c:	bc30      	pop	{r4, r5}
  100e6e:	bc02      	pop	{r1}
  100e70:	4708      	bx	r1
  100e72:	0000      	lsl	r0, r0, #0
  100e74:	5252      	strh	r2, [r2, r1]
  100e76:	4161      	adc	r1, r4
  100e78:	0000      	lsl	r0, r0, #0
  100e7a:	aa55      	add	r2, sp, #340

00100e7c <fs_getFsInfo>:
  100e7c:	b570      	push	{r4, r5, r6, lr}
  100e7e:	0609      	lsl	r1, r1, #24
  100e80:	2201      	mov	r2, #1
  100e82:	1c04      	mov	r4, r0		(add r4, r0, #0)
  100e84:	0e0e      	lsr	r6, r1, #24
  100e86:	6800      	ldr	r0, [r0, #0]
  100e88:	2101      	mov	r1, #1
  100e8a:	fe95f7ff 	bl	100bb8 <part_getSect>
  100e8e:	2100      	mov	r1, #0
  100e90:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100e92:	f98bf002 	bl	1031ac <ex_getb32>
  100e96:	4b16      	ldr	r3, [pc, #88]	(100ef0 <.text+0xef0>)
  100e98:	4298      	cmp	r0, r3
  100e9a:	d107      	bne	100eac <fs_getFsInfo+0x30>
  100e9c:	21fe      	mov	r1, #254
  100e9e:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100ea0:	0049      	lsl	r1, r1, #1
  100ea2:	f983f002 	bl	1031ac <ex_getb32>
  100ea6:	4b13      	ldr	r3, [pc, #76]	(100ef4 <.text+0xef4>)
  100ea8:	4298      	cmp	r0, r3
  100eaa:	d006      	beq	100eba <fs_getFsInfo+0x3e>
  100eac:	6820      	ldr	r0, [r4, #0]
  100eae:	1c29      	mov	r1, r5		(add r1, r5, #0)
  100eb0:	fe30f7ff 	bl	100b14 <part_relSect>
  100eb4:	2001      	mov	r0, #1
  100eb6:	4240      	neg	r0, r0
  100eb8:	e016      	b	100ee8 <fs_getFsInfo+0x6c>
  100eba:	21f4      	mov	r1, #244
  100ebc:	0049      	lsl	r1, r1, #1
  100ebe:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100ec0:	f974f002 	bl	1031ac <ex_getb32>
  100ec4:	21f6      	mov	r1, #246
  100ec6:	6360      	str	r0, [r4, #52]
  100ec8:	0049      	lsl	r1, r1, #1
  100eca:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100ecc:	f96ef002 	bl	1031ac <ex_getb32>
  100ed0:	1c29      	mov	r1, r5		(add r1, r5, #0)
  100ed2:	63a0      	str	r0, [r4, #56]
  100ed4:	6820      	ldr	r0, [r4, #0]
  100ed6:	fe1df7ff 	bl	100b14 <part_relSect>
  100eda:	2e00      	cmp	r6, #0
  100edc:	d003      	beq	100ee6 <fs_getFsInfo+0x6a>
  100ede:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100ee0:	fbe8f000 	bl	1016b4 <fat_countFreeClusters>
  100ee4:	6360      	str	r0, [r4, #52]
  100ee6:	2000      	mov	r0, #0
  100ee8:	bc70      	pop	{r4, r5, r6}
  100eea:	bc02      	pop	{r1}
  100eec:	4708      	bx	r1
  100eee:	0000      	lsl	r0, r0, #0
  100ef0:	5252      	strh	r2, [r2, r1]
  100ef2:	4161      	adc	r1, r4
  100ef4:	0000      	lsl	r0, r0, #0
  100ef6:	aa55      	add	r2, sp, #340

00100ef8 <fs_clearCluster>:
  100ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  100efa:	b081      	sub	sp, #4
  100efc:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100efe:	2700      	mov	r7, #0
  100f00:	9100      	str	r1, [sp, #0]
  100f02:	e012      	b	100f2a <fs_clearCluster+0x32>
  100f04:	9900      	ldr	r1, [sp, #0]
  100f06:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100f08:	ff2cf7ff 	bl	100d64 <fs_clusterToSector>
  100f0c:	682c      	ldr	r4, [r5, #0]
  100f0e:	1981      	add	r1, r0, r6
  100f10:	2202      	mov	r2, #2
  100f12:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100f14:	fe50f7ff 	bl	100bb8 <part_getSect>
  100f18:	2180      	mov	r1, #128
  100f1a:	1c04      	mov	r4, r0		(add r4, r0, #0)
  100f1c:	0089      	lsl	r1, r1, #2
  100f1e:	fc13f002 	bl	103748 <memClr>
  100f22:	6828      	ldr	r0, [r5, #0]
  100f24:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100f26:	fdf5f7ff 	bl	100b14 <part_relSect>
  100f2a:	043b      	lsl	r3, r7, #16
  100f2c:	0c1e      	lsr	r6, r3, #16
  100f2e:	79ab      	ldrb	r3, [r5, #6]
  100f30:	3701      	add	r7, #1
  100f32:	42b3      	cmp	r3, r6
  100f34:	d8e6      	bhi	100f04 <fs_clearCluster+0xc>
  100f36:	2000      	mov	r0, #0
  100f38:	b001      	add	sp, #4
  100f3a:	bcf0      	pop	{r4, r5, r6, r7}
  100f3c:	bc02      	pop	{r1}
  100f3e:	4708      	bx	r1

00100f40 <fs_flushFs>:
  100f40:	b500      	push	{lr}
  100f42:	6803      	ldr	r3, [r0, #0]
  100f44:	6a82      	ldr	r2, [r0, #40]
  100f46:	2100      	mov	r1, #0
  100f48:	1c18      	mov	r0, r3		(add r0, r3, #0)
  100f4a:	fe23f7ff 	bl	100b94 <part_flushPart>
  100f4e:	0600      	lsl	r0, r0, #24
  100f50:	1600      	asr	r0, r0, #24
  100f52:	bc02      	pop	{r1}
  100f54:	4708      	bx	r1
	...

00100f58 <fs_umount>:
  100f58:	b500      	push	{lr}
  100f5a:	fff1f7ff 	bl	100f40 <fs_flushFs>
  100f5e:	0600      	lsl	r0, r0, #24
  100f60:	1600      	asr	r0, r0, #24
  100f62:	bc02      	pop	{r1}
  100f64:	4708      	bx	r1
	...

00100f68 <fs_getLastCluster>:
  100f68:	b530      	push	{r4, r5, lr}
  100f6a:	688a      	ldr	r2, [r1, #8]
  100f6c:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100f6e:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  100f70:	2a00      	cmp	r2, #0
  100f72:	d102      	bne	100f7a <fs_getLastCluster+0x12>
  100f74:	68cb      	ldr	r3, [r1, #12]
  100f76:	604a      	str	r2, [r1, #4]
  100f78:	608b      	str	r3, [r1, #8]
  100f7a:	6923      	ldr	r3, [r4, #16]
  100f7c:	2b00      	cmp	r3, #0
  100f7e:	d008      	beq	100f92 <fs_getLastCluster+0x2a>
  100f80:	e00f      	b	100fa2 <fs_getLastCluster+0x3a>
  100f82:	7823      	ldrb	r3, [r4, #0]
  100f84:	6862      	ldr	r2, [r4, #4]
  100f86:	18d2      	add	r2, r2, r3
  100f88:	6062      	str	r2, [r4, #4]
  100f8a:	68a2      	ldr	r2, [r4, #8]
  100f8c:	18d2      	add	r2, r2, r3
  100f8e:	60a2      	str	r2, [r4, #8]
  100f90:	7020      	strb	r0, [r4, #0]
  100f92:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100f94:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100f96:	fa73f000 	bl	101480 <fat_getNextClusterChain>
  100f9a:	0400      	lsl	r0, r0, #16
  100f9c:	0c00      	lsr	r0, r0, #16
  100f9e:	2800      	cmp	r0, #0
  100fa0:	d0ef      	beq	100f82 <fs_getLastCluster+0x1a>
  100fa2:	6920      	ldr	r0, [r4, #16]
  100fa4:	bc30      	pop	{r4, r5}
  100fa6:	bc02      	pop	{r1}
  100fa8:	4708      	bx	r1
	...

00100fac <fs_getNextFreeCluster>:
  100fac:	b530      	push	{r4, r5, lr}
  100fae:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100fb0:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  100fb2:	e007      	b	100fc4 <fs_getNextFreeCluster+0x18>
  100fb4:	1c28      	mov	r0, r5		(add r0, r5, #0)
  100fb6:	1c21      	mov	r1, r4		(add r1, r4, #0)
  100fb8:	2200      	mov	r2, #0
  100fba:	fb23f000 	bl	101604 <fat_getNextClusterAddress>
  100fbe:	2800      	cmp	r0, #0
  100fc0:	d004      	beq	100fcc <fs_getNextFreeCluster+0x20>
  100fc2:	3401      	add	r4, #1
  100fc4:	6a2b      	ldr	r3, [r5, #32]
  100fc6:	429c      	cmp	r4, r3
  100fc8:	d3f4      	bcc	100fb4 <fs_getNextFreeCluster+0x8>
  100fca:	2400      	mov	r4, #0
  100fcc:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100fce:	bc30      	pop	{r4, r5}
  100fd0:	bc02      	pop	{r1}
  100fd2:	4708      	bx	r1

00100fd4 <fs_loadVolumeId>:
  100fd4:	b570      	push	{r4, r5, r6, lr}
  100fd6:	1c05      	mov	r5, r0		(add r5, r0, #0)
  100fd8:	2205      	mov	r2, #5
  100fda:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  100fdc:	1c08      	mov	r0, r1		(add r0, r1, #0)
  100fde:	2100      	mov	r1, #0
  100fe0:	fdeaf7ff 	bl	100bb8 <part_getSect>
  100fe4:	210b      	mov	r1, #11
  100fe6:	1c04      	mov	r4, r0		(add r4, r0, #0)
  100fe8:	f8d8f002 	bl	10319c <ex_getb16>
  100fec:	80a8      	strh	r0, [r5, #4]
  100fee:	7b63      	ldrb	r3, [r4, #13]
  100ff0:	1c20      	mov	r0, r4		(add r0, r4, #0)
  100ff2:	71ab      	strb	r3, [r5, #6]
  100ff4:	210e      	mov	r1, #14
  100ff6:	f8d1f002 	bl	10319c <ex_getb16>
  100ffa:	8128      	strh	r0, [r5, #8]
  100ffc:	7c23      	ldrb	r3, [r4, #16]
  100ffe:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101000:	72ab      	strb	r3, [r5, #10]
  101002:	2111      	mov	r1, #17
  101004:	f8caf002 	bl	10319c <ex_getb16>
  101008:	2113      	mov	r1, #19
  10100a:	81a8      	strh	r0, [r5, #12]
  10100c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10100e:	f8c5f002 	bl	10319c <ex_getb16>
  101012:	2116      	mov	r1, #22
  101014:	81e8      	strh	r0, [r5, #14]
  101016:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101018:	f8c0f002 	bl	10319c <ex_getb16>
  10101c:	2120      	mov	r1, #32
  10101e:	8228      	strh	r0, [r5, #16]
  101020:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101022:	f8c3f002 	bl	1031ac <ex_getb32>
  101026:	2124      	mov	r1, #36
  101028:	6168      	str	r0, [r5, #20]
  10102a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10102c:	f8bef002 	bl	1031ac <ex_getb32>
  101030:	212c      	mov	r1, #44
  101032:	61a8      	str	r0, [r5, #24]
  101034:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101036:	f8b9f002 	bl	1031ac <ex_getb32>
  10103a:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10103c:	61e8      	str	r0, [r5, #28]
  10103e:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101040:	fd68f7ff 	bl	100b14 <part_relSect>
  101044:	bc70      	pop	{r4, r5, r6}
  101046:	bc01      	pop	{r0}
  101048:	4700      	bx	r0
	...

0010104c <fs_isValidFat>:
  10104c:	b530      	push	{r4, r5, lr}
  10104e:	2100      	mov	r1, #0
  101050:	2205      	mov	r2, #5
  101052:	1c05      	mov	r5, r0		(add r5, r0, #0)
  101054:	fdb0f7ff 	bl	100bb8 <part_getSect>
  101058:	21ff      	mov	r1, #255
  10105a:	0049      	lsl	r1, r1, #1
  10105c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10105e:	f89df002 	bl	10319c <ex_getb16>
  101062:	4b06      	ldr	r3, [pc, #24]	(10107c <.text+0x107c>)
  101064:	4298      	cmp	r0, r3
  101066:	d001      	beq	10106c <fs_isValidFat+0x20>
  101068:	2000      	mov	r0, #0
  10106a:	e004      	b	101076 <fs_isValidFat+0x2a>
  10106c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10106e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101070:	fd50f7ff 	bl	100b14 <part_relSect>
  101074:	2001      	mov	r0, #1
  101076:	bc30      	pop	{r4, r5}
  101078:	bc02      	pop	{r1}
  10107a:	4708      	bx	r1
  10107c:	aa55      	add	r2, sp, #340
	...

00101080 <fs_initCurrentDir>:
  101080:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101082:	333c      	add	r3, #60
  101084:	781b      	ldrb	r3, [r3, #0]
  101086:	2b03      	cmp	r3, #3
  101088:	d001      	beq	10108e <fs_initCurrentDir+0xe>
  10108a:	2301      	mov	r3, #1
  10108c:	e000      	b	101090 <fs_initCurrentDir+0x10>
  10108e:	69c3      	ldr	r3, [r0, #28]
  101090:	6303      	str	r3, [r0, #48]
  101092:	4770      	bx	lr

00101094 <fs_findFile>:
  101094:	b5f0      	push	{r4, r5, r6, r7, lr}
  101096:	b089      	sub	sp, #36
  101098:	9003      	str	r0, [sp, #12]
  10109a:	9202      	str	r2, [sp, #8]
  10109c:	1c1d      	mov	r5, r3		(add r5, r3, #0)
  10109e:	780b      	ldrb	r3, [r1, #0]
  1010a0:	1c08      	mov	r0, r1		(add r0, r1, #0)
  1010a2:	2b2f      	cmp	r3, #47
  1010a4:	d110      	bne	1010c8 <fs_findFile+0x34>
  1010a6:	9b03      	ldr	r3, [sp, #12]
  1010a8:	333c      	add	r3, #60
  1010aa:	781b      	ldrb	r3, [r3, #0]
  1010ac:	2b03      	cmp	r3, #3
  1010ae:	d001      	beq	1010b4 <fs_findFile+0x20>
  1010b0:	2701      	mov	r7, #1
  1010b2:	e001      	b	1010b8 <fs_findFile+0x24>
  1010b4:	9903      	ldr	r1, [sp, #12]
  1010b6:	69cf      	ldr	r7, [r1, #28]
  1010b8:	3001      	add	r0, #1
  1010ba:	2d00      	cmp	r5, #0
  1010bc:	d000      	beq	1010c0 <fs_findFile+0x2c>
  1010be:	602f      	str	r7, [r5, #0]
  1010c0:	7803      	ldrb	r3, [r0, #0]
  1010c2:	2b00      	cmp	r3, #0
  1010c4:	d105      	bne	1010d2 <fs_findFile+0x3e>
  1010c6:	e057      	b	101178 <fs_findFile+0xe4>
  1010c8:	9a03      	ldr	r2, [sp, #12]
  1010ca:	6b17      	ldr	r7, [r2, #48]
  1010cc:	2d00      	cmp	r5, #0
  1010ce:	d000      	beq	1010d2 <fs_findFile+0x3e>
  1010d0:	602f      	str	r7, [r5, #0]
  1010d2:	2300      	mov	r3, #0
  1010d4:	9304      	str	r3, [sp, #16]
  1010d6:	9305      	str	r3, [sp, #20]
  1010d8:	e039      	b	10114e <fs_findFile+0xba>
  1010da:	2100      	mov	r1, #0
  1010dc:	9100      	str	r1, [sp, #0]
  1010de:	4669      	mov	r1, sp
  1010e0:	9803      	ldr	r0, [sp, #12]
  1010e2:	3119      	add	r1, #25
  1010e4:	1c3a      	mov	r2, r7		(add r2, r7, #0)
  1010e6:	9b02      	ldr	r3, [sp, #8]
  1010e8:	f97cf001 	bl	1023e4 <dir_findinDir>
  1010ec:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1010ee:	2800      	cmp	r0, #0
  1010f0:	d10a      	bne	101108 <fs_findFile+0x74>
  1010f2:	4669      	mov	r1, sp
  1010f4:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1010f6:	3119      	add	r1, #25
  1010f8:	fcbef000 	bl	101a78 <file_normalToFatName>
  1010fc:	2800      	cmp	r0, #0
  1010fe:	d03d      	beq	10117c <fs_findFile+0xe8>
  101100:	2d00      	cmp	r5, #0
  101102:	d03b      	beq	10117c <fs_findFile+0xe8>
  101104:	602c      	str	r4, [r5, #0]
  101106:	e039      	b	10117c <fs_findFile+0xe8>
  101108:	9b02      	ldr	r3, [sp, #8]
  10110a:	795a      	ldrb	r2, [r3, #5]
  10110c:	2310      	mov	r3, #16
  10110e:	1c11      	mov	r1, r2		(add r1, r2, #0)
  101110:	4019      	and	r1, r3
  101112:	9101      	str	r1, [sp, #4]
  101114:	d009      	beq	10112a <fs_findFile+0x96>
  101116:	2d00      	cmp	r5, #0
  101118:	d000      	beq	10111c <fs_findFile+0x88>
  10111a:	6028      	str	r0, [r5, #0]
  10111c:	9a04      	ldr	r2, [sp, #16]
  10111e:	2a00      	cmp	r2, #0
  101120:	d001      	beq	101126 <fs_findFile+0x92>
  101122:	2300      	mov	r3, #0
  101124:	602b      	str	r3, [r5, #0]
  101126:	1c27      	mov	r7, r4		(add r7, r4, #0)
  101128:	e00d      	b	101146 <fs_findFile+0xb2>
  10112a:	4669      	mov	r1, sp
  10112c:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10112e:	3119      	add	r1, #25
  101130:	fca2f000 	bl	101a78 <file_normalToFatName>
  101134:	2800      	cmp	r0, #0
  101136:	d004      	beq	101142 <fs_findFile+0xae>
  101138:	2d00      	cmp	r5, #0
  10113a:	d01f      	beq	10117c <fs_findFile+0xe8>
  10113c:	9901      	ldr	r1, [sp, #4]
  10113e:	6029      	str	r1, [r5, #0]
  101140:	e01c      	b	10117c <fs_findFile+0xe8>
  101142:	2201      	mov	r2, #1
  101144:	9204      	str	r2, [sp, #16]
  101146:	9b05      	ldr	r3, [sp, #20]
  101148:	3301      	add	r3, #1
  10114a:	9305      	str	r3, [sp, #20]
  10114c:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10114e:	9905      	ldr	r1, [sp, #20]
  101150:	060b      	lsl	r3, r1, #24
  101152:	4669      	mov	r1, sp
  101154:	3119      	add	r1, #25
  101156:	0e1c      	lsr	r4, r3, #24
  101158:	fc8ef000 	bl	101a78 <file_normalToFatName>
  10115c:	1c06      	mov	r6, r0		(add r6, r0, #0)
  10115e:	2800      	cmp	r0, #0
  101160:	d1bb      	bne	1010da <fs_findFile+0x46>
  101162:	2c00      	cmp	r4, #0
  101164:	d00a      	beq	10117c <fs_findFile+0xe8>
  101166:	9a02      	ldr	r2, [sp, #8]
  101168:	7953      	ldrb	r3, [r2, #5]
  10116a:	06d9      	lsl	r1, r3, #27
  10116c:	d404      	bmi	101178 <fs_findFile+0xe4>
  10116e:	9a04      	ldr	r2, [sp, #16]
  101170:	2a00      	cmp	r2, #0
  101172:	d001      	beq	101178 <fs_findFile+0xe4>
  101174:	2001      	mov	r0, #1
  101176:	e002      	b	10117e <fs_findFile+0xea>
  101178:	2002      	mov	r0, #2
  10117a:	e000      	b	10117e <fs_findFile+0xea>
  10117c:	2000      	mov	r0, #0
  10117e:	b009      	add	sp, #36
  101180:	bcf0      	pop	{r4, r5, r6, r7}
  101182:	bc02      	pop	{r1}
  101184:	4708      	bx	r1
	...

00101188 <fs_findFreeFile>:
  101188:	b5f0      	push	{r4, r5, r6, r7, lr}
  10118a:	b085      	sub	sp, #20
  10118c:	2300      	mov	r3, #0
  10118e:	9304      	str	r3, [sp, #16]
  101190:	ab04      	add	r3, sp, #16
  101192:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101194:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  101196:	1c16      	mov	r6, r2		(add r6, r2, #0)
  101198:	ff7cf7ff 	bl	101094 <fs_findFile>
  10119c:	0600      	lsl	r0, r0, #24
  10119e:	2800      	cmp	r0, #0
  1011a0:	d126      	bne	1011f0 <fs_findFreeFile+0x68>
  1011a2:	466f      	mov	r7, sp
  1011a4:	3705      	add	r7, #5
  1011a6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1011a8:	1c39      	mov	r1, r7		(add r1, r7, #0)
  1011aa:	ffadf000 	bl	102108 <dir_getFatFileName>
  1011ae:	0600      	lsl	r0, r0, #24
  1011b0:	2800      	cmp	r0, #0
  1011b2:	d01d      	beq	1011f0 <fs_findFreeFile+0x68>
  1011b4:	2501      	mov	r5, #1
  1011b6:	9a04      	ldr	r2, [sp, #16]
  1011b8:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1011ba:	1c39      	mov	r1, r7		(add r1, r7, #0)
  1011bc:	1c33      	mov	r3, r6		(add r3, r6, #0)
  1011be:	9500      	str	r5, [sp, #0]
  1011c0:	f910f001 	bl	1023e4 <dir_findinDir>
  1011c4:	2800      	cmp	r0, #0
  1011c6:	d001      	beq	1011cc <fs_findFreeFile+0x44>
  1011c8:	2001      	mov	r0, #1
  1011ca:	e012      	b	1011f2 <fs_findFreeFile+0x6a>
  1011cc:	9904      	ldr	r1, [sp, #16]
  1011ce:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1011d0:	ff64f000 	bl	10209c <dir_addCluster>
  1011d4:	0600      	lsl	r0, r0, #24
  1011d6:	2800      	cmp	r0, #0
  1011d8:	d10a      	bne	1011f0 <fs_findFreeFile+0x68>
  1011da:	1c33      	mov	r3, r6		(add r3, r6, #0)
  1011dc:	9a04      	ldr	r2, [sp, #16]
  1011de:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1011e0:	1c39      	mov	r1, r7		(add r1, r7, #0)
  1011e2:	9500      	str	r5, [sp, #0]
  1011e4:	f8fef001 	bl	1023e4 <dir_findinDir>
  1011e8:	4243      	neg	r3, r0
  1011ea:	4303      	orr	r3, r0
  1011ec:	0fd8      	lsr	r0, r3, #31
  1011ee:	e000      	b	1011f2 <fs_findFreeFile+0x6a>
  1011f0:	2000      	mov	r0, #0
  1011f2:	b005      	add	sp, #20
  1011f4:	bcf0      	pop	{r4, r5, r6, r7}
  1011f6:	bc02      	pop	{r1}
  1011f8:	4708      	bx	r1
	...

001011fc <fs_initFs>:
  1011fc:	b530      	push	{r4, r5, lr}
  1011fe:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101200:	1c08      	mov	r0, r1		(add r0, r1, #0)
  101202:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  101204:	ff22f7ff 	bl	10104c <fs_isValidFat>
  101208:	0400      	lsl	r0, r0, #16
  10120a:	2800      	cmp	r0, #0
  10120c:	d101      	bne	101212 <fs_initFs+0x16>
  10120e:	2001      	mov	r0, #1
  101210:	e00a      	b	101228 <fs_initFs+0x2c>
  101212:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101214:	6025      	str	r5, [r4, #0]
  101216:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101218:	fedcf7ff 	bl	100fd4 <fs_loadVolumeId>
  10121c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10121e:	fceff7ff 	bl	100c00 <fs_verifySanity>
  101222:	2800      	cmp	r0, #0
  101224:	d102      	bne	10122c <fs_initFs+0x30>
  101226:	2002      	mov	r0, #2
  101228:	4240      	neg	r0, r0
  10122a:	e012      	b	101252 <fs_initFs+0x56>
  10122c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10122e:	fd39f7ff 	bl	100ca4 <fs_countDataSectors>
  101232:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101234:	fd62f7ff 	bl	100cfc <fs_determineFatType>
  101238:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10123a:	fd79f7ff 	bl	100d30 <fs_findFirstSectorRootDir>
  10123e:	1c23      	mov	r3, r4		(add r3, r4, #0)
  101240:	333c      	add	r3, #60
  101242:	781b      	ldrb	r3, [r3, #0]
  101244:	2b03      	cmp	r3, #3
  101246:	d001      	beq	10124c <fs_initFs+0x50>
  101248:	2301      	mov	r3, #1
  10124a:	e000      	b	10124e <fs_initFs+0x52>
  10124c:	69e3      	ldr	r3, [r4, #28]
  10124e:	6323      	str	r3, [r4, #48]
  101250:	2000      	mov	r0, #0
  101252:	bc30      	pop	{r4, r5}
  101254:	bc02      	pop	{r1}
  101256:	4708      	bx	r1

00101258 <fat_getSectorAddressFatEntry>:
  101258:	b510      	push	{r4, lr}
  10125a:	1c03      	mov	r3, r0		(add r3, r0, #0)
  10125c:	333c      	add	r3, #60
  10125e:	781b      	ldrb	r3, [r3, #0]
  101260:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101262:	8904      	ldrh	r4, [r0, #8]
  101264:	2b02      	cmp	r3, #2
  101266:	d007      	beq	101278 <fat_getSectorAddressFatEntry+0x20>
  101268:	2b03      	cmp	r3, #3
  10126a:	d007      	beq	10127c <fat_getSectorAddressFatEntry+0x24>
  10126c:	2b01      	cmp	r3, #1
  10126e:	d10b      	bne	101288 <fat_getSectorAddressFatEntry+0x30>
  101270:	004b      	lsl	r3, r1, #1
  101272:	185b      	add	r3, r3, r1
  101274:	0a98      	lsr	r0, r3, #10
  101276:	e002      	b	10127e <fat_getSectorAddressFatEntry+0x26>
  101278:	0a08      	lsr	r0, r1, #8
  10127a:	e000      	b	10127e <fat_getSectorAddressFatEntry+0x26>
  10127c:	09c8      	lsr	r0, r1, #7
  10127e:	6a53      	ldr	r3, [r2, #36]
  101280:	4298      	cmp	r0, r3
  101282:	d201      	bcs	101288 <fat_getSectorAddressFatEntry+0x30>
  101284:	1820      	add	r0, r4, r0
  101286:	e000      	b	10128a <fat_getSectorAddressFatEntry+0x32>
  101288:	2000      	mov	r0, #0
  10128a:	bc10      	pop	{r4}
  10128c:	bc02      	pop	{r1}
  10128e:	4708      	bx	r1

00101290 <fat_isEocMarker>:
  101290:	303c      	add	r0, #60
  101292:	7803      	ldrb	r3, [r0, #0]
  101294:	2b02      	cmp	r3, #2
  101296:	d008      	beq	1012aa <fat_isEocMarker+0x1a>
  101298:	2b03      	cmp	r3, #3
  10129a:	d00e      	beq	1012ba <fat_isEocMarker+0x2a>
  10129c:	2b01      	cmp	r3, #1
  10129e:	d001      	beq	1012a4 <fat_isEocMarker+0x14>
  1012a0:	2001      	mov	r0, #1
  1012a2:	e016      	b	1012d2 <fat_isEocMarker+0x42>
  1012a4:	4b0b      	ldr	r3, [pc, #44]	(1012d4 <.text+0x12d4>)
  1012a6:	2200      	mov	r2, #0
  1012a8:	e001      	b	1012ae <fat_isEocMarker+0x1e>
  1012aa:	4b0b      	ldr	r3, [pc, #44]	(1012d8 <.text+0x12d8>)
  1012ac:	2200      	mov	r2, #0
  1012ae:	4299      	cmp	r1, r3
  1012b0:	d800      	bhi	1012b4 <fat_isEocMarker+0x24>
  1012b2:	2201      	mov	r2, #1
  1012b4:	2301      	mov	r3, #1
  1012b6:	4053      	eor	r3, r2
  1012b8:	e009      	b	1012ce <fat_isEocMarker+0x3e>
  1012ba:	4b08      	ldr	r3, [pc, #32]	(1012dc <.text+0x12dc>)
  1012bc:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  1012be:	401a      	and	r2, r3
  1012c0:	3b08      	sub	r3, #8
  1012c2:	2000      	mov	r0, #0
  1012c4:	429a      	cmp	r2, r3
  1012c6:	d800      	bhi	1012ca <fat_isEocMarker+0x3a>
  1012c8:	2001      	mov	r0, #1
  1012ca:	2301      	mov	r3, #1
  1012cc:	4043      	eor	r3, r0
  1012ce:	061b      	lsl	r3, r3, #24
  1012d0:	0e18      	lsr	r0, r3, #24
  1012d2:	4770      	bx	lr
  1012d4:	0ff7      	lsr	r7, r6, #31
  1012d6:	0000      	lsl	r0, r0, #0
  1012d8:	fff7      	second half of BL instruction 0xfff7
  1012da:	0000      	lsl	r0, r0, #0
  1012dc:	ffff      	second half of BL instruction 0xffff
  1012de:	0fff      	lsr	r7, r7, #31

001012e0 <fat_giveEocMarker>:
  1012e0:	303c      	add	r0, #60
  1012e2:	7803      	ldrb	r3, [r0, #0]
  1012e4:	2b02      	cmp	r3, #2
  1012e6:	d00a      	beq	1012fe <fat_giveEocMarker+0x1e>
  1012e8:	2b03      	cmp	r3, #3
  1012ea:	d002      	beq	1012f2 <fat_giveEocMarker+0x12>
  1012ec:	2b01      	cmp	r3, #1
  1012ee:	d102      	bne	1012f6 <fat_giveEocMarker+0x16>
  1012f0:	e003      	b	1012fa <fat_giveEocMarker+0x1a>
  1012f2:	4804      	ldr	r0, [pc, #16]	(101304 <.text+0x1304>)
  1012f4:	e004      	b	101300 <fat_giveEocMarker+0x20>
  1012f6:	2000      	mov	r0, #0
  1012f8:	e002      	b	101300 <fat_giveEocMarker+0x20>
  1012fa:	4803      	ldr	r0, [pc, #12]	(101308 <.text+0x1308>)
  1012fc:	e000      	b	101300 <fat_giveEocMarker+0x20>
  1012fe:	4803      	ldr	r0, [pc, #12]	(10130c <.text+0x130c>)
  101300:	4770      	bx	lr
  101302:	0000      	lsl	r0, r0, #0
  101304:	ffff      	second half of BL instruction 0xffff
  101306:	0fff      	lsr	r7, r7, #31
  101308:	0fff      	lsr	r7, r7, #31
  10130a:	0000      	lsl	r0, r0, #0
  10130c:	ffff      	second half of BL instruction 0xffff
	...

00101310 <fat_setNextClusterAddressWBuf>:
  101310:	b5f0      	push	{r4, r5, r6, r7, lr}
  101312:	1c1c      	mov	r4, r3		(add r4, r3, #0)
  101314:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101316:	333c      	add	r3, #60
  101318:	1c07      	mov	r7, r0		(add r7, r0, #0)
  10131a:	7818      	ldrb	r0, [r3, #0]
  10131c:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  10131e:	1c15      	mov	r5, r2		(add r5, r2, #0)
  101320:	2802      	cmp	r0, #2
  101322:	d055      	beq	1013d0 <fat_setNextClusterAddressWBuf+0xc0>
  101324:	2803      	cmp	r0, #3
  101326:	d058      	beq	1013da <fat_setNextClusterAddressWBuf+0xca>
  101328:	2801      	cmp	r0, #1
  10132a:	d15a      	bne	1013e2 <fat_setNextClusterAddressWBuf+0xd2>
  10132c:	4b2e      	ldr	r3, [pc, #184]	(1013e8 <.text+0x13e8>)
  10132e:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  101330:	401a      	and	r2, r3
  101332:	0053      	lsl	r3, r2, #1
  101334:	189b      	add	r3, r3, r2
  101336:	085b      	lsr	r3, r3, #1
  101338:	4a2c      	ldr	r2, [pc, #176]	(1013ec <.text+0x13ec>)
  10133a:	1c19      	mov	r1, r3		(add r1, r3, #0)
  10133c:	4011      	and	r1, r2
  10133e:	1c33      	mov	r3, r6		(add r3, r6, #0)
  101340:	4003      	and	r3, r0
  101342:	4291      	cmp	r1, r2
  101344:	d130      	bne	1013a8 <fat_setNextClusterAddressWBuf+0x98>
  101346:	2b00      	cmp	r3, #0
  101348:	d114      	bne	101374 <fat_setNextClusterAddressWBuf+0x64>
  10134a:	5465      	strb	r5, [r4, r1]
  10134c:	1c38      	mov	r0, r7		(add r0, r7, #0)
  10134e:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101350:	ff82f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101354:	683c      	ldr	r4, [r7, #0]
  101356:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101358:	3101      	add	r1, #1
  10135a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10135c:	2202      	mov	r2, #2
  10135e:	fc2bf7ff 	bl	100bb8 <part_getSect>
  101362:	7802      	ldrb	r2, [r0, #0]
  101364:	210f      	mov	r1, #15
  101366:	0a2b      	lsr	r3, r5, #8
  101368:	438a      	bic	r2, r1
  10136a:	400b      	and	r3, r1
  10136c:	18d2      	add	r2, r2, r3
  10136e:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101370:	7002      	strb	r2, [r0, #0]
  101372:	e014      	b	10139e <fat_setNextClusterAddressWBuf+0x8e>
  101374:	1861      	add	r1, r4, r1
  101376:	780b      	ldrb	r3, [r1, #0]
  101378:	220f      	mov	r2, #15
  10137a:	4013      	and	r3, r2
  10137c:	012a      	lsl	r2, r5, #4
  10137e:	189b      	add	r3, r3, r2
  101380:	700b      	strb	r3, [r1, #0]
  101382:	1c38      	mov	r0, r7		(add r0, r7, #0)
  101384:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101386:	ff67f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  10138a:	683c      	ldr	r4, [r7, #0]
  10138c:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10138e:	3101      	add	r1, #1
  101390:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101392:	2202      	mov	r2, #2
  101394:	fc10f7ff 	bl	100bb8 <part_getSect>
  101398:	092b      	lsr	r3, r5, #4
  10139a:	7003      	strb	r3, [r0, #0]
  10139c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10139e:	6838      	ldr	r0, [r7, #0]
  1013a0:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1013a2:	fbb7f7ff 	bl	100b14 <part_relSect>
  1013a6:	e01c      	b	1013e2 <fat_setNextClusterAddressWBuf+0xd2>
  1013a8:	1860      	add	r0, r4, r1
  1013aa:	2b00      	cmp	r3, #0
  1013ac:	d107      	bne	1013be <fat_setNextClusterAddressWBuf+0xae>
  1013ae:	7843      	ldrb	r3, [r0, #1]
  1013b0:	210f      	mov	r1, #15
  1013b2:	0a2a      	lsr	r2, r5, #8
  1013b4:	438b      	bic	r3, r1
  1013b6:	400a      	and	r2, r1
  1013b8:	189b      	add	r3, r3, r2
  1013ba:	7005      	strb	r5, [r0, #0]
  1013bc:	e006      	b	1013cc <fat_setNextClusterAddressWBuf+0xbc>
  1013be:	7803      	ldrb	r3, [r0, #0]
  1013c0:	220f      	mov	r2, #15
  1013c2:	4013      	and	r3, r2
  1013c4:	012a      	lsl	r2, r5, #4
  1013c6:	189b      	add	r3, r3, r2
  1013c8:	7003      	strb	r3, [r0, #0]
  1013ca:	092b      	lsr	r3, r5, #4
  1013cc:	7043      	strb	r3, [r0, #1]
  1013ce:	e008      	b	1013e2 <fat_setNextClusterAddressWBuf+0xd2>
  1013d0:	23ff      	mov	r3, #255
  1013d2:	400b      	and	r3, r1
  1013d4:	005b      	lsl	r3, r3, #1
  1013d6:	531a      	strh	r2, [r3, r4]
  1013d8:	e003      	b	1013e2 <fat_setNextClusterAddressWBuf+0xd2>
  1013da:	237f      	mov	r3, #127
  1013dc:	400b      	and	r3, r1
  1013de:	009b      	lsl	r3, r3, #2
  1013e0:	511a      	str	r2, [r3, r4]
  1013e2:	bcf0      	pop	{r4, r5, r6, r7}
  1013e4:	bc01      	pop	{r0}
  1013e6:	4700      	bx	r0
  1013e8:	03ff      	lsl	r7, r7, #15
  1013ea:	0000      	lsl	r0, r0, #0
  1013ec:	01ff      	lsl	r7, r7, #7
	...

001013f0 <fat_getNextClusterAddressWBuf>:
  1013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  1013f2:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1013f4:	1c2b      	mov	r3, r5		(add r3, r5, #0)
  1013f6:	333c      	add	r3, #60
  1013f8:	781b      	ldrb	r3, [r3, #0]
  1013fa:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  1013fc:	1c10      	mov	r0, r2		(add r0, r2, #0)
  1013fe:	2b02      	cmp	r3, #2
  101400:	d02d      	beq	10145e <fat_getNextClusterAddressWBuf+0x6e>
  101402:	2b03      	cmp	r3, #3
  101404:	d030      	beq	101468 <fat_getNextClusterAddressWBuf+0x78>
  101406:	2b01      	cmp	r3, #1
  101408:	d001      	beq	10140e <fat_getNextClusterAddressWBuf+0x1e>
  10140a:	2000      	mov	r0, #0
  10140c:	e030      	b	101470 <fat_getNextClusterAddressWBuf+0x80>
  10140e:	4b1a      	ldr	r3, [pc, #104]	(101478 <.text+0x1478>)
  101410:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  101412:	401a      	and	r2, r3
  101414:	0053      	lsl	r3, r2, #1
  101416:	189b      	add	r3, r3, r2
  101418:	4a18      	ldr	r2, [pc, #96]	(10147c <.text+0x147c>)
  10141a:	085b      	lsr	r3, r3, #1
  10141c:	4013      	and	r3, r2
  10141e:	5cc7      	ldrb	r7, [r0, r3]
  101420:	4293      	cmp	r3, r2
  101422:	d10f      	bne	101444 <fat_getNextClusterAddressWBuf+0x54>
  101424:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101426:	ff17f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  10142a:	682c      	ldr	r4, [r5, #0]
  10142c:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10142e:	3101      	add	r1, #1
  101430:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101432:	2201      	mov	r2, #1
  101434:	fbc0f7ff 	bl	100bb8 <part_getSect>
  101438:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10143a:	7804      	ldrb	r4, [r0, #0]
  10143c:	6828      	ldr	r0, [r5, #0]
  10143e:	fb69f7ff 	bl	100b14 <part_relSect>
  101442:	e001      	b	101448 <fat_getNextClusterAddressWBuf+0x58>
  101444:	18c3      	add	r3, r0, r3
  101446:	785c      	ldrb	r4, [r3, #1]
  101448:	07f3      	lsl	r3, r6, #31
  10144a:	d404      	bmi	101456 <fat_getNextClusterAddressWBuf+0x66>
  10144c:	230f      	mov	r3, #15
  10144e:	4023      	and	r3, r4
  101450:	021b      	lsl	r3, r3, #8
  101452:	19d8      	add	r0, r3, r7
  101454:	e00c      	b	101470 <fat_getNextClusterAddressWBuf+0x80>
  101456:	0122      	lsl	r2, r4, #4
  101458:	093b      	lsr	r3, r7, #4
  10145a:	18d0      	add	r0, r2, r3
  10145c:	e008      	b	101470 <fat_getNextClusterAddressWBuf+0x80>
  10145e:	23ff      	mov	r3, #255
  101460:	400b      	and	r3, r1
  101462:	005b      	lsl	r3, r3, #1
  101464:	5a98      	ldrh	r0, [r3, r2]
  101466:	e003      	b	101470 <fat_getNextClusterAddressWBuf+0x80>
  101468:	237f      	mov	r3, #127
  10146a:	400b      	and	r3, r1
  10146c:	009b      	lsl	r3, r3, #2
  10146e:	5898      	ldr	r0, [r3, r2]
  101470:	bcf0      	pop	{r4, r5, r6, r7}
  101472:	bc02      	pop	{r1}
  101474:	4708      	bx	r1
  101476:	0000      	lsl	r0, r0, #0
  101478:	03ff      	lsl	r7, r7, #15
  10147a:	0000      	lsl	r0, r0, #0
  10147c:	01ff      	lsl	r7, r7, #7
	...

00101480 <fat_getNextClusterChain>:
  101480:	b5f0      	push	{r4, r5, r6, r7, lr}
  101482:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  101484:	6889      	ldr	r1, [r1, #8]
  101486:	b083      	sub	sp, #12
  101488:	1c06      	mov	r6, r0		(add r6, r0, #0)
  10148a:	2900      	cmp	r1, #0
  10148c:	d01a      	beq	1014c4 <fat_getNextClusterChain+0x44>
  10148e:	fee3f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101492:	9000      	str	r0, [sp, #0]
  101494:	9900      	ldr	r1, [sp, #0]
  101496:	2201      	mov	r2, #1
  101498:	6830      	ldr	r0, [r6, #0]
  10149a:	fb8df7ff 	bl	100bb8 <part_getSect>
  10149e:	9001      	str	r0, [sp, #4]
  1014a0:	68a9      	ldr	r1, [r5, #8]
  1014a2:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1014a4:	9a01      	ldr	r2, [sp, #4]
  1014a6:	ffa3f7ff 	bl	1013f0 <fat_getNextClusterAddressWBuf>
  1014aa:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1014ac:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1014ae:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1014b0:	feeef7ff 	bl	101290 <fat_isEocMarker>
  1014b4:	2800      	cmp	r0, #0
  1014b6:	d008      	beq	1014ca <fat_getNextClusterChain+0x4a>
  1014b8:	68ab      	ldr	r3, [r5, #8]
  1014ba:	6830      	ldr	r0, [r6, #0]
  1014bc:	612b      	str	r3, [r5, #16]
  1014be:	9901      	ldr	r1, [sp, #4]
  1014c0:	fb28f7ff 	bl	100b14 <part_relSect>
  1014c4:	2001      	mov	r0, #1
  1014c6:	4240      	neg	r0, r0
  1014c8:	e02b      	b	101522 <fat_getNextClusterChain+0xa2>
  1014ca:	686b      	ldr	r3, [r5, #4]
  1014cc:	2100      	mov	r1, #0
  1014ce:	3301      	add	r3, #1
  1014d0:	1e62      	sub	r2, r4, #1
  1014d2:	60ac      	str	r4, [r5, #8]
  1014d4:	606b      	str	r3, [r5, #4]
  1014d6:	9102      	str	r1, [sp, #8]
  1014d8:	e006      	b	1014e8 <fat_getNextClusterChain+0x68>
  1014da:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1014dc:	9a01      	ldr	r2, [sp, #4]
  1014de:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1014e0:	ff86f7ff 	bl	1013f0 <fat_getNextClusterAddressWBuf>
  1014e4:	1c22      	mov	r2, r4		(add r2, r4, #0)
  1014e6:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1014e8:	9902      	ldr	r1, [sp, #8]
  1014ea:	040b      	lsl	r3, r1, #16
  1014ec:	0c1f      	lsr	r7, r3, #16
  1014ee:	1e63      	sub	r3, r4, #1
  1014f0:	4293      	cmp	r3, r2
  1014f2:	d108      	bne	101506 <fat_getNextClusterChain+0x86>
  1014f4:	3101      	add	r1, #1
  1014f6:	9102      	str	r1, [sp, #8]
  1014f8:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1014fa:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1014fc:	feacf7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101500:	9b00      	ldr	r3, [sp, #0]
  101502:	4298      	cmp	r0, r3
  101504:	d0e9      	beq	1014da <fat_getNextClusterChain+0x5a>
  101506:	043b      	lsl	r3, r7, #16
  101508:	2b00      	cmp	r3, #0
  10150a:	dc01      	bgt	101510 <fat_getNextClusterChain+0x90>
  10150c:	2300      	mov	r3, #0
  10150e:	e002      	b	101516 <fat_getNextClusterChain+0x96>
  101510:	1e7b      	sub	r3, r7, #1
  101512:	061b      	lsl	r3, r3, #24
  101514:	0e1b      	lsr	r3, r3, #24
  101516:	702b      	strb	r3, [r5, #0]
  101518:	9901      	ldr	r1, [sp, #4]
  10151a:	6830      	ldr	r0, [r6, #0]
  10151c:	fafaf7ff 	bl	100b14 <part_relSect>
  101520:	2000      	mov	r0, #0
  101522:	b003      	add	sp, #12
  101524:	bcf0      	pop	{r4, r5, r6, r7}
  101526:	bc02      	pop	{r1}
  101528:	4708      	bx	r1
	...

0010152c <fat_LogicToDiscCluster>:
  10152c:	b570      	push	{r4, r5, r6, lr}
  10152e:	684b      	ldr	r3, [r1, #4]
  101530:	1c06      	mov	r6, r0		(add r6, r0, #0)
  101532:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  101534:	1c15      	mov	r5, r2		(add r5, r2, #0)
  101536:	429a      	cmp	r2, r3
  101538:	d302      	bcc	101540 <fat_LogicToDiscCluster+0x14>
  10153a:	688b      	ldr	r3, [r1, #8]
  10153c:	2b00      	cmp	r3, #0
  10153e:	d104      	bne	10154a <fat_LogicToDiscCluster+0x1e>
  101540:	68e3      	ldr	r3, [r4, #12]
  101542:	2200      	mov	r2, #0
  101544:	6062      	str	r2, [r4, #4]
  101546:	60a3      	str	r3, [r4, #8]
  101548:	7022      	strb	r2, [r4, #0]
  10154a:	6863      	ldr	r3, [r4, #4]
  10154c:	42ab      	cmp	r3, r5
  10154e:	d015      	beq	10157c <fat_LogicToDiscCluster+0x50>
  101550:	7823      	ldrb	r3, [r4, #0]
  101552:	2b00      	cmp	r3, #0
  101554:	d008      	beq	101568 <fat_LogicToDiscCluster+0x3c>
  101556:	3b01      	sub	r3, #1
  101558:	7023      	strb	r3, [r4, #0]
  10155a:	6863      	ldr	r3, [r4, #4]
  10155c:	3301      	add	r3, #1
  10155e:	6063      	str	r3, [r4, #4]
  101560:	68a3      	ldr	r3, [r4, #8]
  101562:	3301      	add	r3, #1
  101564:	60a3      	str	r3, [r4, #8]
  101566:	e7f0      	b	10154a <fat_LogicToDiscCluster+0x1e>
  101568:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10156a:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10156c:	ff88f7ff 	bl	101480 <fat_getNextClusterChain>
  101570:	0400      	lsl	r0, r0, #16
  101572:	2800      	cmp	r0, #0
  101574:	d0e9      	beq	10154a <fat_LogicToDiscCluster+0x1e>
  101576:	2001      	mov	r0, #1
  101578:	4240      	neg	r0, r0
  10157a:	e000      	b	10157e <fat_LogicToDiscCluster+0x52>
  10157c:	2000      	mov	r0, #0
  10157e:	bc70      	pop	{r4, r5, r6}
  101580:	bc02      	pop	{r1}
  101582:	4708      	bx	r1

00101584 <fat_DiscToLogicCluster>:
  101584:	b5f0      	push	{r4, r5, r6, r7, lr}
  101586:	b086      	sub	sp, #24
  101588:	2300      	mov	r3, #0
  10158a:	1c16      	mov	r6, r2		(add r6, r2, #0)
  10158c:	466a      	mov	r2, sp
  10158e:	7013      	strb	r3, [r2, #0]
  101590:	1c07      	mov	r7, r0		(add r7, r0, #0)
  101592:	2200      	mov	r2, #0
  101594:	2400      	mov	r4, #0
  101596:	9304      	str	r3, [sp, #16]
  101598:	9301      	str	r3, [sp, #4]
  10159a:	9302      	str	r3, [sp, #8]
  10159c:	9103      	str	r1, [sp, #12]
  10159e:	e004      	b	1015aa <fat_DiscToLogicCluster+0x26>
  1015a0:	9b02      	ldr	r3, [sp, #8]
  1015a2:	42b3      	cmp	r3, r6
  1015a4:	d100      	bne	1015a8 <fat_DiscToLogicCluster+0x24>
  1015a6:	9c01      	ldr	r4, [sp, #4]
  1015a8:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  1015aa:	1c38      	mov	r0, r7		(add r0, r7, #0)
  1015ac:	4669      	mov	r1, sp
  1015ae:	1c55      	add	r5, r2, #1
  1015b0:	ffbcf7ff 	bl	10152c <fat_LogicToDiscCluster>
  1015b4:	0400      	lsl	r0, r0, #16
  1015b6:	2800      	cmp	r0, #0
  1015b8:	d101      	bne	1015be <fat_DiscToLogicCluster+0x3a>
  1015ba:	2c00      	cmp	r4, #0
  1015bc:	d0f0      	beq	1015a0 <fat_DiscToLogicCluster+0x1c>
  1015be:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1015c0:	b006      	add	sp, #24
  1015c2:	bcf0      	pop	{r4, r5, r6, r7}
  1015c4:	bc02      	pop	{r1}
  1015c6:	4708      	bx	r1

001015c8 <fat_countClustersInChain>:
  1015c8:	b530      	push	{r4, r5, lr}
  1015ca:	b086      	sub	sp, #24
  1015cc:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1015ce:	2901      	cmp	r1, #1
  1015d0:	d801      	bhi	1015d6 <fat_countClustersInChain+0xe>
  1015d2:	2000      	mov	r0, #0
  1015d4:	e012      	b	1015fc <fat_countClustersInChain+0x34>
  1015d6:	2300      	mov	r3, #0
  1015d8:	466a      	mov	r2, sp
  1015da:	9304      	str	r3, [sp, #16]
  1015dc:	9301      	str	r3, [sp, #4]
  1015de:	9302      	str	r3, [sp, #8]
  1015e0:	9103      	str	r1, [sp, #12]
  1015e2:	7013      	strb	r3, [r2, #0]
  1015e4:	2200      	mov	r2, #0
  1015e6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1015e8:	4669      	mov	r1, sp
  1015ea:	1c54      	add	r4, r2, #1
  1015ec:	ff9ef7ff 	bl	10152c <fat_LogicToDiscCluster>
  1015f0:	0400      	lsl	r0, r0, #16
  1015f2:	2800      	cmp	r0, #0
  1015f4:	d101      	bne	1015fa <fat_countClustersInChain+0x32>
  1015f6:	1c22      	mov	r2, r4		(add r2, r4, #0)
  1015f8:	e7f5      	b	1015e6 <fat_countClustersInChain+0x1e>
  1015fa:	1e60      	sub	r0, r4, #1
  1015fc:	b006      	add	sp, #24
  1015fe:	bc30      	pop	{r4, r5}
  101600:	bc02      	pop	{r1}
  101602:	4708      	bx	r1

00101604 <fat_getNextClusterAddress>:
  101604:	b5f0      	push	{r4, r5, r6, r7, lr}
  101606:	1c05      	mov	r5, r0		(add r5, r0, #0)
  101608:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  10160a:	fe25f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  10160e:	892b      	ldrh	r3, [r5, #8]
  101610:	6a6a      	ldr	r2, [r5, #36]
  101612:	1ac3      	sub	r3, r0, r3
  101614:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101616:	429a      	cmp	r2, r3
  101618:	d942      	bls	1016a0 <fat_getNextClusterAddress+0x9c>
  10161a:	2800      	cmp	r0, #0
  10161c:	d040      	beq	1016a0 <fat_getNextClusterAddress+0x9c>
  10161e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101620:	6828      	ldr	r0, [r5, #0]
  101622:	2201      	mov	r2, #1
  101624:	fac8f7ff 	bl	100bb8 <part_getSect>
  101628:	1c2b      	mov	r3, r5		(add r3, r5, #0)
  10162a:	333c      	add	r3, #60
  10162c:	781b      	ldrb	r3, [r3, #0]
  10162e:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101630:	2b02      	cmp	r3, #2
  101632:	d028      	beq	101686 <fat_getNextClusterAddress+0x82>
  101634:	2b03      	cmp	r3, #3
  101636:	d02b      	beq	101690 <fat_getNextClusterAddress+0x8c>
  101638:	2b01      	cmp	r3, #1
  10163a:	d001      	beq	101640 <fat_getNextClusterAddress+0x3c>
  10163c:	2400      	mov	r4, #0
  10163e:	e02b      	b	101698 <fat_getNextClusterAddress+0x94>
  101640:	4b1a      	ldr	r3, [pc, #104]	(1016ac <.text+0x16ac>)
  101642:	1c32      	mov	r2, r6		(add r2, r6, #0)
  101644:	401a      	and	r2, r3
  101646:	0053      	lsl	r3, r2, #1
  101648:	189b      	add	r3, r3, r2
  10164a:	4a19      	ldr	r2, [pc, #100]	(1016b0 <.text+0x16b0>)
  10164c:	085b      	lsr	r3, r3, #1
  10164e:	4013      	and	r3, r2
  101650:	5cc7      	ldrb	r7, [r0, r3]
  101652:	4293      	cmp	r3, r2
  101654:	d10a      	bne	10166c <fat_getNextClusterAddress+0x68>
  101656:	6828      	ldr	r0, [r5, #0]
  101658:	fa5cf7ff 	bl	100b14 <part_relSect>
  10165c:	1c61      	add	r1, r4, #1
  10165e:	2201      	mov	r2, #1
  101660:	6828      	ldr	r0, [r5, #0]
  101662:	faa9f7ff 	bl	100bb8 <part_getSect>
  101666:	7802      	ldrb	r2, [r0, #0]
  101668:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10166a:	e001      	b	101670 <fat_getNextClusterAddress+0x6c>
  10166c:	18c3      	add	r3, r0, r3
  10166e:	785a      	ldrb	r2, [r3, #1]
  101670:	07f3      	lsl	r3, r6, #31
  101672:	d404      	bmi	10167e <fat_getNextClusterAddress+0x7a>
  101674:	230f      	mov	r3, #15
  101676:	4013      	and	r3, r2
  101678:	021b      	lsl	r3, r3, #8
  10167a:	19dc      	add	r4, r3, r7
  10167c:	e00c      	b	101698 <fat_getNextClusterAddress+0x94>
  10167e:	0112      	lsl	r2, r2, #4
  101680:	093b      	lsr	r3, r7, #4
  101682:	18d4      	add	r4, r2, r3
  101684:	e008      	b	101698 <fat_getNextClusterAddress+0x94>
  101686:	23ff      	mov	r3, #255
  101688:	4033      	and	r3, r6
  10168a:	005b      	lsl	r3, r3, #1
  10168c:	5a1c      	ldrh	r4, [r3, r0]
  10168e:	e003      	b	101698 <fat_getNextClusterAddress+0x94>
  101690:	237f      	mov	r3, #127
  101692:	4033      	and	r3, r6
  101694:	009b      	lsl	r3, r3, #2
  101696:	581c      	ldr	r4, [r3, r0]
  101698:	6828      	ldr	r0, [r5, #0]
  10169a:	fa3bf7ff 	bl	100b14 <part_relSect>
  10169e:	e000      	b	1016a2 <fat_getNextClusterAddress+0x9e>
  1016a0:	2400      	mov	r4, #0
  1016a2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1016a4:	bcf0      	pop	{r4, r5, r6, r7}
  1016a6:	bc02      	pop	{r1}
  1016a8:	4708      	bx	r1
  1016aa:	0000      	lsl	r0, r0, #0
  1016ac:	03ff      	lsl	r7, r7, #15
  1016ae:	0000      	lsl	r0, r0, #0
  1016b0:	01ff      	lsl	r7, r7, #7
	...

001016b4 <fat_countFreeClusters>:
  1016b4:	b570      	push	{r4, r5, r6, lr}
  1016b6:	1c06      	mov	r6, r0		(add r6, r0, #0)
  1016b8:	2402      	mov	r4, #2
  1016ba:	2500      	mov	r5, #0
  1016bc:	e008      	b	1016d0 <fat_countFreeClusters+0x1c>
  1016be:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1016c0:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1016c2:	2200      	mov	r2, #0
  1016c4:	ff9ef7ff 	bl	101604 <fat_getNextClusterAddress>
  1016c8:	2800      	cmp	r0, #0
  1016ca:	d100      	bne	1016ce <fat_countFreeClusters+0x1a>
  1016cc:	3501      	add	r5, #1
  1016ce:	3401      	add	r4, #1
  1016d0:	6a33      	ldr	r3, [r6, #32]
  1016d2:	3301      	add	r3, #1
  1016d4:	429c      	cmp	r4, r3
  1016d6:	d9f2      	bls	1016be <fat_countFreeClusters+0xa>
  1016d8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1016da:	bc70      	pop	{r4, r5, r6}
  1016dc:	bc02      	pop	{r1}
  1016de:	4708      	bx	r1

001016e0 <fat_setNextClusterAddress>:
  1016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  1016e2:	b081      	sub	sp, #4
  1016e4:	1c07      	mov	r7, r0		(add r7, r0, #0)
  1016e6:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  1016e8:	1c16      	mov	r6, r2		(add r6, r2, #0)
  1016ea:	fdb5f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  1016ee:	6a7b      	ldr	r3, [r7, #36]
  1016f0:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1016f2:	428b      	cmp	r3, r1
  1016f4:	d203      	bcs	1016fe <fat_setNextClusterAddress+0x1e>
  1016f6:	483c      	ldr	r0, [pc, #240]	(1017e8 <.text+0x17e8>)
  1016f8:	fea2f001 	bl	103440 <efsl_debug_printf_arm>
  1016fc:	e070      	b	1017e0 <fat_setNextClusterAddress+0x100>
  1016fe:	6838      	ldr	r0, [r7, #0]
  101700:	2202      	mov	r2, #2
  101702:	fa59f7ff 	bl	100bb8 <part_getSect>
  101706:	1c3b      	mov	r3, r7		(add r3, r7, #0)
  101708:	9000      	str	r0, [sp, #0]
  10170a:	333c      	add	r3, #60
  10170c:	7819      	ldrb	r1, [r3, #0]
  10170e:	2902      	cmp	r1, #2
  101710:	d057      	beq	1017c2 <fat_setNextClusterAddress+0xe2>
  101712:	2903      	cmp	r1, #3
  101714:	d05b      	beq	1017ce <fat_setNextClusterAddress+0xee>
  101716:	2901      	cmp	r1, #1
  101718:	d162      	bne	1017e0 <fat_setNextClusterAddress+0x100>
  10171a:	4b34      	ldr	r3, [pc, #208]	(1017ec <.text+0x17ec>)
  10171c:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  10171e:	401a      	and	r2, r3
  101720:	0053      	lsl	r3, r2, #1
  101722:	189b      	add	r3, r3, r2
  101724:	4a32      	ldr	r2, [pc, #200]	(1017f0 <.text+0x17f0>)
  101726:	085b      	lsr	r3, r3, #1
  101728:	4013      	and	r3, r2
  10172a:	4029      	and	r1, r5
  10172c:	4293      	cmp	r3, r2
  10172e:	d131      	bne	101794 <fat_setNextClusterAddress+0xb4>
  101730:	2900      	cmp	r1, #0
  101732:	d114      	bne	10175e <fat_setNextClusterAddress+0x7e>
  101734:	54c6      	strb	r6, [r0, r3]
  101736:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101738:	1c38      	mov	r0, r7		(add r0, r7, #0)
  10173a:	fd8df7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  10173e:	683c      	ldr	r4, [r7, #0]
  101740:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101742:	3101      	add	r1, #1
  101744:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101746:	2202      	mov	r2, #2
  101748:	fa36f7ff 	bl	100bb8 <part_getSect>
  10174c:	7802      	ldrb	r2, [r0, #0]
  10174e:	210f      	mov	r1, #15
  101750:	0a33      	lsr	r3, r6, #8
  101752:	438a      	bic	r2, r1
  101754:	400b      	and	r3, r1
  101756:	18d2      	add	r2, r2, r3
  101758:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10175a:	7002      	strb	r2, [r0, #0]
  10175c:	e015      	b	10178a <fat_setNextClusterAddress+0xaa>
  10175e:	9a00      	ldr	r2, [sp, #0]
  101760:	18d1      	add	r1, r2, r3
  101762:	780b      	ldrb	r3, [r1, #0]
  101764:	220f      	mov	r2, #15
  101766:	4013      	and	r3, r2
  101768:	0132      	lsl	r2, r6, #4
  10176a:	189b      	add	r3, r3, r2
  10176c:	700b      	strb	r3, [r1, #0]
  10176e:	1c38      	mov	r0, r7		(add r0, r7, #0)
  101770:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101772:	fd71f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101776:	683c      	ldr	r4, [r7, #0]
  101778:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10177a:	3101      	add	r1, #1
  10177c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10177e:	2202      	mov	r2, #2
  101780:	fa1af7ff 	bl	100bb8 <part_getSect>
  101784:	0933      	lsr	r3, r6, #4
  101786:	7003      	strb	r3, [r0, #0]
  101788:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10178a:	6838      	ldr	r0, [r7, #0]
  10178c:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10178e:	f9c1f7ff 	bl	100b14 <part_relSect>
  101792:	e013      	b	1017bc <fat_setNextClusterAddress+0xdc>
  101794:	9a00      	ldr	r2, [sp, #0]
  101796:	18d0      	add	r0, r2, r3
  101798:	2900      	cmp	r1, #0
  10179a:	d107      	bne	1017ac <fat_setNextClusterAddress+0xcc>
  10179c:	7843      	ldrb	r3, [r0, #1]
  10179e:	210f      	mov	r1, #15
  1017a0:	0a32      	lsr	r2, r6, #8
  1017a2:	438b      	bic	r3, r1
  1017a4:	400a      	and	r2, r1
  1017a6:	189b      	add	r3, r3, r2
  1017a8:	7006      	strb	r6, [r0, #0]
  1017aa:	e006      	b	1017ba <fat_setNextClusterAddress+0xda>
  1017ac:	7803      	ldrb	r3, [r0, #0]
  1017ae:	220f      	mov	r2, #15
  1017b0:	4013      	and	r3, r2
  1017b2:	0132      	lsl	r2, r6, #4
  1017b4:	189b      	add	r3, r3, r2
  1017b6:	7003      	strb	r3, [r0, #0]
  1017b8:	0933      	lsr	r3, r6, #4
  1017ba:	7043      	strb	r3, [r0, #1]
  1017bc:	6838      	ldr	r0, [r7, #0]
  1017be:	9900      	ldr	r1, [sp, #0]
  1017c0:	e00c      	b	1017dc <fat_setNextClusterAddress+0xfc>
  1017c2:	23ff      	mov	r3, #255
  1017c4:	402b      	and	r3, r5
  1017c6:	9a00      	ldr	r2, [sp, #0]
  1017c8:	005b      	lsl	r3, r3, #1
  1017ca:	529e      	strh	r6, [r3, r2]
  1017cc:	e004      	b	1017d8 <fat_setNextClusterAddress+0xf8>
  1017ce:	237f      	mov	r3, #127
  1017d0:	402b      	and	r3, r5
  1017d2:	9a00      	ldr	r2, [sp, #0]
  1017d4:	009b      	lsl	r3, r3, #2
  1017d6:	509e      	str	r6, [r3, r2]
  1017d8:	6838      	ldr	r0, [r7, #0]
  1017da:	1c11      	mov	r1, r2		(add r1, r2, #0)
  1017dc:	f99af7ff 	bl	100b14 <part_relSect>
  1017e0:	b001      	add	sp, #4
  1017e2:	bcf0      	pop	{r4, r5, r6, r7}
  1017e4:	bc01      	pop	{r0}
  1017e6:	4700      	bx	r0
  1017e8:	3fe8      	sub	r7, #232
  1017ea:	0010      	lsl	r0, r2, #0
  1017ec:	03ff      	lsl	r7, r7, #15
  1017ee:	0000      	lsl	r0, r0, #0
  1017f0:	01ff      	lsl	r7, r7, #7
	...

001017f4 <fat_unlinkClusterChain>:
  1017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  1017f6:	2300      	mov	r3, #0
  1017f8:	604b      	str	r3, [r1, #4]
  1017fa:	68cb      	ldr	r3, [r1, #12]
  1017fc:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1017fe:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  101800:	2200      	mov	r2, #0
  101802:	2600      	mov	r6, #0
  101804:	608b      	str	r3, [r1, #8]
  101806:	e008      	b	10181a <fat_unlinkClusterChain+0x26>
  101808:	2e00      	cmp	r6, #0
  10180a:	d004      	beq	101816 <fat_unlinkClusterChain+0x22>
  10180c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10180e:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101810:	2200      	mov	r2, #0
  101812:	ff65f7ff 	bl	1016e0 <fat_setNextClusterAddress>
  101816:	68a6      	ldr	r6, [r4, #8]
  101818:	1c3a      	mov	r2, r7		(add r2, r7, #0)
  10181a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10181c:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10181e:	1c57      	add	r7, r2, #1
  101820:	fe84f7ff 	bl	10152c <fat_LogicToDiscCluster>
  101824:	0400      	lsl	r0, r0, #16
  101826:	2800      	cmp	r0, #0
  101828:	d0ee      	beq	101808 <fat_unlinkClusterChain+0x14>
  10182a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10182c:	68a1      	ldr	r1, [r4, #8]
  10182e:	2200      	mov	r2, #0
  101830:	ff56f7ff 	bl	1016e0 <fat_setNextClusterAddress>
  101834:	6b6b      	ldr	r3, [r5, #52]
  101836:	2000      	mov	r0, #0
  101838:	19db      	add	r3, r3, r7
  10183a:	636b      	str	r3, [r5, #52]
  10183c:	bcf0      	pop	{r4, r5, r6, r7}
  10183e:	bc02      	pop	{r1}
  101840:	4708      	bx	r1
	...

00101844 <fat_allocClusterChain>:
  101844:	b5f0      	push	{r4, r5, r6, r7, lr}
  101846:	68cb      	ldr	r3, [r1, #12]
  101848:	b085      	sub	sp, #20
  10184a:	1c05      	mov	r5, r0		(add r5, r0, #0)
  10184c:	9101      	str	r1, [sp, #4]
  10184e:	9200      	str	r2, [sp, #0]
  101850:	2b01      	cmp	r3, #1
  101852:	d802      	bhi	10185a <fat_allocClusterChain+0x16>
  101854:	0413      	lsl	r3, r2, #16
  101856:	1418      	asr	r0, r3, #16
  101858:	e0b1      	b	1019be <fat_allocClusterChain+0x17a>
  10185a:	9901      	ldr	r1, [sp, #4]
  10185c:	fb84f7ff 	bl	100f68 <fs_getLastCluster>
  101860:	9900      	ldr	r1, [sp, #0]
  101862:	2200      	mov	r2, #0
  101864:	1c07      	mov	r7, r0		(add r7, r0, #0)
  101866:	1c06      	mov	r6, r0		(add r6, r0, #0)
  101868:	9102      	str	r1, [sp, #8]
  10186a:	9204      	str	r2, [sp, #16]
  10186c:	e095      	b	10199a <fat_allocClusterChain+0x156>
  10186e:	6a2b      	ldr	r3, [r5, #32]
  101870:	3601      	add	r6, #1
  101872:	3301      	add	r3, #1
  101874:	429e      	cmp	r6, r3
  101876:	d335      	bcc	1018e4 <fat_allocClusterChain+0xa0>
  101878:	9b04      	ldr	r3, [sp, #16]
  10187a:	2b00      	cmp	r3, #0
  10187c:	d02f      	beq	1018de <fat_allocClusterChain+0x9a>
  10187e:	1c39      	mov	r1, r7		(add r1, r7, #0)
  101880:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101882:	fce9f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101886:	682c      	ldr	r4, [r5, #0]
  101888:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10188a:	2202      	mov	r2, #2
  10188c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10188e:	f993f7ff 	bl	100bb8 <part_getSect>
  101892:	1c2b      	mov	r3, r5		(add r3, r5, #0)
  101894:	333c      	add	r3, #60
  101896:	781b      	ldrb	r3, [r3, #0]
  101898:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10189a:	2b02      	cmp	r3, #2
  10189c:	d00a      	beq	1018b4 <fat_allocClusterChain+0x70>
  10189e:	2b03      	cmp	r3, #3
  1018a0:	d002      	beq	1018a8 <fat_allocClusterChain+0x64>
  1018a2:	2b01      	cmp	r3, #1
  1018a4:	d102      	bne	1018ac <fat_allocClusterChain+0x68>
  1018a6:	e003      	b	1018b0 <fat_allocClusterChain+0x6c>
  1018a8:	4a47      	ldr	r2, [pc, #284]	(1019c8 <.text+0x19c8>)
  1018aa:	e004      	b	1018b6 <fat_allocClusterChain+0x72>
  1018ac:	2200      	mov	r2, #0
  1018ae:	e002      	b	1018b6 <fat_allocClusterChain+0x72>
  1018b0:	4a46      	ldr	r2, [pc, #280]	(1019cc <.text+0x19cc>)
  1018b2:	e000      	b	1018b6 <fat_allocClusterChain+0x72>
  1018b4:	4a46      	ldr	r2, [pc, #280]	(1019d0 <.text+0x19d0>)
  1018b6:	1c23      	mov	r3, r4		(add r3, r4, #0)
  1018b8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1018ba:	1c39      	mov	r1, r7		(add r1, r7, #0)
  1018bc:	fd28f7ff 	bl	101310 <fat_setNextClusterAddressWBuf>
  1018c0:	9901      	ldr	r1, [sp, #4]
  1018c2:	6828      	ldr	r0, [r5, #0]
  1018c4:	610f      	str	r7, [r1, #16]
  1018c6:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1018c8:	f924f7ff 	bl	100b14 <part_relSect>
  1018cc:	9b00      	ldr	r3, [sp, #0]
  1018ce:	9902      	ldr	r1, [sp, #8]
  1018d0:	1a5a      	sub	r2, r3, r1
  1018d2:	6b6b      	ldr	r3, [r5, #52]
  1018d4:	1a9b      	sub	r3, r3, r2
  1018d6:	0412      	lsl	r2, r2, #16
  1018d8:	1410      	asr	r0, r2, #16
  1018da:	636b      	str	r3, [r5, #52]
  1018dc:	e06f      	b	1019be <fat_allocClusterChain+0x17a>
  1018de:	2201      	mov	r2, #1
  1018e0:	9204      	str	r2, [sp, #16]
  1018e2:	2602      	mov	r6, #2
  1018e4:	1c31      	mov	r1, r6		(add r1, r6, #0)
  1018e6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1018e8:	fcb6f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  1018ec:	682c      	ldr	r4, [r5, #0]
  1018ee:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1018f0:	2201      	mov	r2, #1
  1018f2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1018f4:	f960f7ff 	bl	100bb8 <part_getSect>
  1018f8:	9003      	str	r0, [sp, #12]
  1018fa:	1c31      	mov	r1, r6		(add r1, r6, #0)
  1018fc:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1018fe:	9a03      	ldr	r2, [sp, #12]
  101900:	fd76f7ff 	bl	1013f0 <fat_getNextClusterAddressWBuf>
  101904:	682c      	ldr	r4, [r5, #0]
  101906:	2800      	cmp	r0, #0
  101908:	d154      	bne	1019b4 <fat_allocClusterChain+0x170>
  10190a:	1c39      	mov	r1, r7		(add r1, r7, #0)
  10190c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10190e:	fca3f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101912:	2202      	mov	r2, #2
  101914:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101916:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101918:	f94ef7ff 	bl	100bb8 <part_getSect>
  10191c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10191e:	1c32      	mov	r2, r6		(add r2, r6, #0)
  101920:	1c23      	mov	r3, r4		(add r3, r4, #0)
  101922:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101924:	1c39      	mov	r1, r7		(add r1, r7, #0)
  101926:	fcf3f7ff 	bl	101310 <fat_setNextClusterAddressWBuf>
  10192a:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10192c:	6828      	ldr	r0, [r5, #0]
  10192e:	f8f1f7ff 	bl	100b14 <part_relSect>
  101932:	9b02      	ldr	r3, [sp, #8]
  101934:	9903      	ldr	r1, [sp, #12]
  101936:	3b01      	sub	r3, #1
  101938:	6828      	ldr	r0, [r5, #0]
  10193a:	9302      	str	r3, [sp, #8]
  10193c:	f8eaf7ff 	bl	100b14 <part_relSect>
  101940:	9902      	ldr	r1, [sp, #8]
  101942:	2900      	cmp	r1, #0
  101944:	d001      	beq	10194a <fat_allocClusterChain+0x106>
  101946:	1c37      	mov	r7, r6		(add r7, r6, #0)
  101948:	e027      	b	10199a <fat_allocClusterChain+0x156>
  10194a:	1c31      	mov	r1, r6		(add r1, r6, #0)
  10194c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10194e:	fc83f7ff 	bl	101258 <fat_getSectorAddressFatEntry>
  101952:	682c      	ldr	r4, [r5, #0]
  101954:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101956:	2202      	mov	r2, #2
  101958:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10195a:	f92df7ff 	bl	100bb8 <part_getSect>
  10195e:	1c2b      	mov	r3, r5		(add r3, r5, #0)
  101960:	333c      	add	r3, #60
  101962:	781b      	ldrb	r3, [r3, #0]
  101964:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101966:	2b02      	cmp	r3, #2
  101968:	d00a      	beq	101980 <fat_allocClusterChain+0x13c>
  10196a:	2b03      	cmp	r3, #3
  10196c:	d002      	beq	101974 <fat_allocClusterChain+0x130>
  10196e:	2b01      	cmp	r3, #1
  101970:	d102      	bne	101978 <fat_allocClusterChain+0x134>
  101972:	e003      	b	10197c <fat_allocClusterChain+0x138>
  101974:	4a14      	ldr	r2, [pc, #80]	(1019c8 <.text+0x19c8>)
  101976:	e004      	b	101982 <fat_allocClusterChain+0x13e>
  101978:	2200      	mov	r2, #0
  10197a:	e002      	b	101982 <fat_allocClusterChain+0x13e>
  10197c:	4a13      	ldr	r2, [pc, #76]	(1019cc <.text+0x19cc>)
  10197e:	e000      	b	101982 <fat_allocClusterChain+0x13e>
  101980:	4a13      	ldr	r2, [pc, #76]	(1019d0 <.text+0x19d0>)
  101982:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101984:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101986:	1c23      	mov	r3, r4		(add r3, r4, #0)
  101988:	fcc2f7ff 	bl	101310 <fat_setNextClusterAddressWBuf>
  10198c:	9a01      	ldr	r2, [sp, #4]
  10198e:	6828      	ldr	r0, [r5, #0]
  101990:	6116      	str	r6, [r2, #16]
  101992:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101994:	f8bef7ff 	bl	100b14 <part_relSect>
  101998:	e003      	b	1019a2 <fat_allocClusterChain+0x15e>
  10199a:	9b02      	ldr	r3, [sp, #8]
  10199c:	2b00      	cmp	r3, #0
  10199e:	d000      	beq	1019a2 <fat_allocClusterChain+0x15e>
  1019a0:	e765      	b	10186e <fat_allocClusterChain+0x2a>
  1019a2:	9901      	ldr	r1, [sp, #4]
  1019a4:	694b      	ldr	r3, [r1, #20]
  1019a6:	2b00      	cmp	r3, #0
  1019a8:	d002      	beq	1019b0 <fat_allocClusterChain+0x16c>
  1019aa:	9a00      	ldr	r2, [sp, #0]
  1019ac:	189b      	add	r3, r3, r2
  1019ae:	614b      	str	r3, [r1, #20]
  1019b0:	2000      	mov	r0, #0
  1019b2:	e004      	b	1019be <fat_allocClusterChain+0x17a>
  1019b4:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1019b6:	9903      	ldr	r1, [sp, #12]
  1019b8:	f8acf7ff 	bl	100b14 <part_relSect>
  1019bc:	e7ed      	b	10199a <fat_allocClusterChain+0x156>
  1019be:	b005      	add	sp, #20
  1019c0:	bcf0      	pop	{r4, r5, r6, r7}
  1019c2:	bc02      	pop	{r1}
  1019c4:	4708      	bx	r1
  1019c6:	0000      	lsl	r0, r0, #0
  1019c8:	ffff      	second half of BL instruction 0xffff
  1019ca:	0fff      	lsr	r7, r7, #31
  1019cc:	0fff      	lsr	r7, r7, #31
  1019ce:	0000      	lsl	r0, r0, #0
  1019d0:	ffff      	second half of BL instruction 0xffff
	...

001019d4 <file_setpos>:
  1019d4:	6cc3      	ldr	r3, [r0, #76]
  1019d6:	4299      	cmp	r1, r3
  1019d8:	d902      	bls	1019e0 <file_setpos+0xc>
  1019da:	2001      	mov	r0, #1
  1019dc:	4240      	neg	r0, r0
  1019de:	e001      	b	1019e4 <file_setpos+0x10>
  1019e0:	6481      	str	r1, [r0, #72]
  1019e2:	2000      	mov	r0, #0
  1019e4:	4770      	bx	lr
	...

001019e8 <file_initFile>:
  1019e8:	b510      	push	{r4, lr}
  1019ea:	69c3      	ldr	r3, [r0, #28]
  1019ec:	2400      	mov	r4, #0
  1019ee:	64c3      	str	r3, [r0, #76]
  1019f0:	6484      	str	r4, [r0, #72]
  1019f2:	6813      	ldr	r3, [r2, #0]
  1019f4:	6281      	str	r1, [r0, #40]
  1019f6:	6203      	str	r3, [r0, #32]
  1019f8:	7913      	ldrb	r3, [r2, #4]
  1019fa:	1d41      	add	r1, r0, #5
  1019fc:	77cb      	strb	r3, [r1, #31]
  1019fe:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101a00:	332c      	add	r3, #44
  101a02:	701c      	strb	r4, [r3, #0]
  101a04:	8a83      	ldrh	r3, [r0, #20]
  101a06:	8b42      	ldrh	r2, [r0, #26]
  101a08:	041b      	lsl	r3, r3, #16
  101a0a:	189b      	add	r3, r3, r2
  101a0c:	6383      	str	r3, [r0, #56]
  101a0e:	63c4      	str	r4, [r0, #60]
  101a10:	6304      	str	r4, [r0, #48]
  101a12:	6343      	str	r3, [r0, #52]
  101a14:	bc10      	pop	{r4}
  101a16:	bc01      	pop	{r0}
  101a18:	4700      	bx	r0
	...

00101a1c <file_validateChar>:
  101a1c:	0600      	lsl	r0, r0, #24
  101a1e:	0e00      	lsr	r0, r0, #24
  101a20:	281f      	cmp	r0, #31
  101a22:	d927      	bls	101a74 <file_validateChar+0x58>
  101a24:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101a26:	3b21      	sub	r3, #33
  101a28:	061b      	lsl	r3, r3, #24
  101a2a:	0e1b      	lsr	r3, r3, #24
  101a2c:	2b0e      	cmp	r3, #14
  101a2e:	d802      	bhi	101a36 <file_validateChar+0x1a>
  101a30:	282d      	cmp	r0, #45
  101a32:	d11f      	bne	101a74 <file_validateChar+0x58>
  101a34:	e01f      	b	101a76 <file_validateChar+0x5a>
  101a36:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101a38:	3b3a      	sub	r3, #58
  101a3a:	061b      	lsl	r3, r3, #24
  101a3c:	0e1b      	lsr	r3, r3, #24
  101a3e:	2b06      	cmp	r3, #6
  101a40:	d918      	bls	101a74 <file_validateChar+0x58>
  101a42:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101a44:	3b5b      	sub	r3, #91
  101a46:	061b      	lsl	r3, r3, #24
  101a48:	0e1b      	lsr	r3, r3, #24
  101a4a:	2b05      	cmp	r3, #5
  101a4c:	d802      	bhi	101a54 <file_validateChar+0x38>
  101a4e:	285f      	cmp	r0, #95
  101a50:	d110      	bne	101a74 <file_validateChar+0x58>
  101a52:	e010      	b	101a76 <file_validateChar+0x5a>
  101a54:	287a      	cmp	r0, #122
  101a56:	d902      	bls	101a5e <file_validateChar+0x42>
  101a58:	287e      	cmp	r0, #126
  101a5a:	d10b      	bne	101a74 <file_validateChar+0x58>
  101a5c:	e00b      	b	101a76 <file_validateChar+0x5a>
  101a5e:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101a60:	3b61      	sub	r3, #97
  101a62:	061b      	lsl	r3, r3, #24
  101a64:	0e1b      	lsr	r3, r3, #24
  101a66:	2b19      	cmp	r3, #25
  101a68:	d805      	bhi	101a76 <file_validateChar+0x5a>
  101a6a:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101a6c:	3b20      	sub	r3, #32
  101a6e:	061b      	lsl	r3, r3, #24
  101a70:	0e18      	lsr	r0, r3, #24
  101a72:	e000      	b	101a76 <file_validateChar+0x5a>
  101a74:	2058      	mov	r0, #88
  101a76:	4770      	bx	lr

00101a78 <file_normalToFatName>:
  101a78:	b5f0      	push	{r4, r5, r6, r7, lr}
  101a7a:	b081      	sub	sp, #4
  101a7c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101a7e:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  101a80:	2200      	mov	r2, #0
  101a82:	2320      	mov	r3, #32
  101a84:	5593      	strb	r3, [r2, r6]
  101a86:	3201      	add	r2, #1
  101a88:	2a0b      	cmp	r2, #11
  101a8a:	d1fa      	bne	101a82 <file_normalToFatName+0xa>
  101a8c:	7823      	ldrb	r3, [r4, #0]
  101a8e:	2b2e      	cmp	r3, #46
  101a90:	d003      	beq	101a9a <file_normalToFatName+0x22>
  101a92:	2500      	mov	r5, #0
  101a94:	2700      	mov	r7, #0
  101a96:	9500      	str	r5, [sp, #0]
  101a98:	e028      	b	101aec <file_normalToFatName+0x74>
  101a9a:	7033      	strb	r3, [r6, #0]
  101a9c:	7863      	ldrb	r3, [r4, #1]
  101a9e:	1c62      	add	r2, r4, #1
  101aa0:	2b2e      	cmp	r3, #46
  101aa2:	d133      	bne	101b0c <file_normalToFatName+0x94>
  101aa4:	1ca2      	add	r2, r4, #2
  101aa6:	7073      	strb	r3, [r6, #1]
  101aa8:	e030      	b	101b0c <file_normalToFatName+0x94>
  101aaa:	282e      	cmp	r0, #46
  101aac:	d106      	bne	101abc <file_normalToFatName+0x44>
  101aae:	9b00      	ldr	r3, [sp, #0]
  101ab0:	2b00      	cmp	r3, #0
  101ab2:	d106      	bne	101ac2 <file_normalToFatName+0x4a>
  101ab4:	2301      	mov	r3, #1
  101ab6:	2508      	mov	r5, #8
  101ab8:	9300      	str	r3, [sp, #0]
  101aba:	e016      	b	101aea <file_normalToFatName+0x72>
  101abc:	9b00      	ldr	r3, [sp, #0]
  101abe:	2b00      	cmp	r3, #0
  101ac0:	d008      	beq	101ad4 <file_normalToFatName+0x5c>
  101ac2:	2d0a      	cmp	r5, #10
  101ac4:	d811      	bhi	101aea <file_normalToFatName+0x72>
  101ac6:	ffa9f7ff 	bl	101a1c <file_validateChar>
  101aca:	1c6b      	add	r3, r5, #1
  101acc:	061b      	lsl	r3, r3, #24
  101ace:	5570      	strb	r0, [r6, r5]
  101ad0:	0e1d      	lsr	r5, r3, #24
  101ad2:	e00a      	b	101aea <file_normalToFatName+0x72>
  101ad4:	2d07      	cmp	r5, #7
  101ad6:	d808      	bhi	101aea <file_normalToFatName+0x72>
  101ad8:	ffa0f7ff 	bl	101a1c <file_validateChar>
  101adc:	1c6b      	add	r3, r5, #1
  101ade:	061b      	lsl	r3, r3, #24
  101ae0:	5570      	strb	r0, [r6, r5]
  101ae2:	0e1d      	lsr	r5, r3, #24
  101ae4:	1c7b      	add	r3, r7, #1
  101ae6:	061b      	lsl	r3, r3, #24
  101ae8:	0e1f      	lsr	r7, r3, #24
  101aea:	3401      	add	r4, #1
  101aec:	7820      	ldrb	r0, [r4, #0]
  101aee:	2800      	cmp	r0, #0
  101af0:	d003      	beq	101afa <file_normalToFatName+0x82>
  101af2:	2820      	cmp	r0, #32
  101af4:	d001      	beq	101afa <file_normalToFatName+0x82>
  101af6:	282f      	cmp	r0, #47
  101af8:	d1d7      	bne	101aaa <file_normalToFatName+0x32>
  101afa:	2f00      	cmp	r7, #0
  101afc:	d101      	bne	101b02 <file_normalToFatName+0x8a>
  101afe:	2400      	mov	r4, #0
  101b00:	e006      	b	101b10 <file_normalToFatName+0x98>
  101b02:	7823      	ldrb	r3, [r4, #0]
  101b04:	2b00      	cmp	r3, #0
  101b06:	d003      	beq	101b10 <file_normalToFatName+0x98>
  101b08:	3401      	add	r4, #1
  101b0a:	e001      	b	101b10 <file_normalToFatName+0x98>
  101b0c:	1c14      	mov	r4, r2		(add r4, r2, #0)
  101b0e:	e7f8      	b	101b02 <file_normalToFatName+0x8a>
  101b10:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101b12:	b001      	add	sp, #4
  101b14:	bcf0      	pop	{r4, r5, r6, r7}
  101b16:	bc02      	pop	{r1}
  101b18:	4708      	bx	r1
	...

00101b1c <file_setAttr>:
  101b1c:	0609      	lsl	r1, r1, #24
  101b1e:	0612      	lsl	r2, r2, #24
  101b20:	0e09      	lsr	r1, r1, #24
  101b22:	3044      	add	r0, #68
  101b24:	2a00      	cmp	r2, #0
  101b26:	d004      	beq	101b32 <file_setAttr+0x16>
  101b28:	2201      	mov	r2, #1
  101b2a:	7803      	ldrb	r3, [r0, #0]
  101b2c:	408a      	lsl	r2, r1
  101b2e:	4313      	orr	r3, r2
  101b30:	e003      	b	101b3a <file_setAttr+0x1e>
  101b32:	2201      	mov	r2, #1
  101b34:	7803      	ldrb	r3, [r0, #0]
  101b36:	408a      	lsl	r2, r1
  101b38:	4393      	bic	r3, r2
  101b3a:	7003      	strb	r3, [r0, #0]
  101b3c:	4770      	bx	lr
	...

00101b40 <file_getAttr>:
  101b40:	0609      	lsl	r1, r1, #24
  101b42:	3044      	add	r0, #68
  101b44:	0e09      	lsr	r1, r1, #24
  101b46:	7800      	ldrb	r0, [r0, #0]
  101b48:	2301      	mov	r3, #1
  101b4a:	408b      	lsl	r3, r1
  101b4c:	4018      	and	r0, r3
  101b4e:	4770      	bx	lr

00101b50 <file_requiredCluster>:
  101b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  101b52:	6cc3      	ldr	r3, [r0, #76]
  101b54:	b082      	sub	sp, #8
  101b56:	1c17      	mov	r7, r2		(add r7, r2, #0)
  101b58:	188a      	add	r2, r1, r2
  101b5a:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101b5c:	9100      	str	r1, [sp, #0]
  101b5e:	9201      	str	r2, [sp, #4]
  101b60:	429a      	cmp	r2, r3
  101b62:	d925      	bls	101bb0 <file_requiredCluster+0x60>
  101b64:	6c06      	ldr	r6, [r0, #64]
  101b66:	2e00      	cmp	r6, #0
  101b68:	d105      	bne	101b76 <file_requiredCluster+0x26>
  101b6a:	6a80      	ldr	r0, [r0, #40]
  101b6c:	6ba1      	ldr	r1, [r4, #56]
  101b6e:	fd2bf7ff 	bl	1015c8 <fat_countClustersInChain>
  101b72:	6420      	str	r0, [r4, #64]
  101b74:	1c06      	mov	r6, r0		(add r6, r0, #0)
  101b76:	6aa3      	ldr	r3, [r4, #40]
  101b78:	889a      	ldrh	r2, [r3, #4]
  101b7a:	799b      	ldrb	r3, [r3, #6]
  101b7c:	1c1d      	mov	r5, r3		(add r5, r3, #0)
  101b7e:	4355      	mul	r5, r2
  101b80:	6ce0      	ldr	r0, [r4, #76]
  101b82:	9b00      	ldr	r3, [sp, #0]
  101b84:	1a3c      	sub	r4, r7, r0
  101b86:	1940      	add	r0, r0, r5
  101b88:	3801      	sub	r0, #1
  101b8a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101b8c:	18e4      	add	r4, r4, r3
  101b8e:	fe73f7fe 	bl	100878 <__aeabi_uidiv>
  101b92:	1a30      	sub	r0, r6, r0
  101b94:	1c2b      	mov	r3, r5		(add r3, r5, #0)
  101b96:	4343      	mul	r3, r0
  101b98:	429c      	cmp	r4, r3
  101b9a:	d909      	bls	101bb0 <file_requiredCluster+0x60>
  101b9c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101b9e:	4370      	mul	r0, r6
  101ba0:	9a01      	ldr	r2, [sp, #4]
  101ba2:	1a10      	sub	r0, r2, r0
  101ba4:	1940      	add	r0, r0, r5
  101ba6:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101ba8:	3801      	sub	r0, #1
  101baa:	fe65f7fe 	bl	100878 <__aeabi_uidiv>
  101bae:	e000      	b	101bb2 <file_requiredCluster+0x62>
  101bb0:	2000      	mov	r0, #0
  101bb2:	b002      	add	sp, #8
  101bb4:	bcf0      	pop	{r4, r5, r6, r7}
  101bb6:	bc02      	pop	{r1}
  101bb8:	4708      	bx	r1
	...

00101bbc <file_fread>:
  101bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  101bbe:	1c06      	mov	r6, r0		(add r6, r0, #0)
  101bc0:	b087      	sub	sp, #28
  101bc2:	9301      	str	r3, [sp, #4]
  101bc4:	1c33      	mov	r3, r6		(add r3, r6, #0)
  101bc6:	3344      	add	r3, #68
  101bc8:	781b      	ldrb	r3, [r3, #0]
  101bca:	1c08      	mov	r0, r1		(add r0, r1, #0)
  101bcc:	07d9      	lsl	r1, r3, #31
  101bce:	d567      	bpl	101ca0 <file_fread+0xe4>
  101bd0:	6cf4      	ldr	r4, [r6, #76]
  101bd2:	42a0      	cmp	r0, r4
  101bd4:	d201      	bcs	101bda <file_fread+0x1e>
  101bd6:	1c15      	mov	r5, r2		(add r5, r2, #0)
  101bd8:	e000      	b	101bdc <file_fread+0x20>
  101bda:	2500      	mov	r5, #0
  101bdc:	1883      	add	r3, r0, r2
  101bde:	42a3      	cmp	r3, r4
  101be0:	d902      	bls	101be8 <file_fread+0x2c>
  101be2:	2d00      	cmp	r5, #0
  101be4:	d000      	beq	101be8 <file_fread+0x2c>
  101be6:	1a25      	sub	r5, r4, r0
  101be8:	2200      	mov	r2, #0
  101bea:	9005      	str	r0, [sp, #20]
  101bec:	9204      	str	r2, [sp, #16]
  101bee:	e054      	b	101c9a <file_fread+0xde>
  101bf0:	6ab3      	ldr	r3, [r6, #40]
  101bf2:	9302      	str	r3, [sp, #8]
  101bf4:	9805      	ldr	r0, [sp, #20]
  101bf6:	799c      	ldrb	r4, [r3, #6]
  101bf8:	4b2d      	ldr	r3, [pc, #180]	(101cb0 <.text+0x1cb0>)
  101bfa:	9403      	str	r4, [sp, #12]
  101bfc:	4018      	and	r0, r3
  101bfe:	9006      	str	r0, [sp, #24]
  101c00:	d104      	bne	101c0c <file_fread+0x50>
  101c02:	429d      	cmp	r5, r3
  101c04:	d902      	bls	101c0c <file_fread+0x50>
  101c06:	2780      	mov	r7, #128
  101c08:	00bf      	lsl	r7, r7, #2
  101c0a:	e007      	b	101c1c <file_fread+0x60>
  101c0c:	2380      	mov	r3, #128
  101c0e:	9906      	ldr	r1, [sp, #24]
  101c10:	009b      	lsl	r3, r3, #2
  101c12:	1a5b      	sub	r3, r3, r1
  101c14:	1c2f      	mov	r7, r5		(add r7, r5, #0)
  101c16:	429d      	cmp	r5, r3
  101c18:	d900      	bls	101c1c <file_fread+0x60>
  101c1a:	1c1f      	mov	r7, r3		(add r7, r3, #0)
  101c1c:	9a03      	ldr	r2, [sp, #12]
  101c1e:	9805      	ldr	r0, [sp, #20]
  101c20:	0251      	lsl	r1, r2, #9
  101c22:	fe29f7fe 	bl	100878 <__aeabi_uidiv>
  101c26:	1c34      	mov	r4, r6		(add r4, r6, #0)
  101c28:	342c      	add	r4, #44
  101c2a:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101c2c:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101c2e:	9802      	ldr	r0, [sp, #8]
  101c30:	fc7cf7ff 	bl	10152c <fat_LogicToDiscCluster>
  101c34:	0400      	lsl	r0, r0, #16
  101c36:	2800      	cmp	r0, #0
  101c38:	d132      	bne	101ca0 <file_fread+0xe4>
  101c3a:	9b05      	ldr	r3, [sp, #20]
  101c3c:	9903      	ldr	r1, [sp, #12]
  101c3e:	0a58      	lsr	r0, r3, #9
  101c40:	fe60f7fe 	bl	100904 <__umodsi3>
  101c44:	6b71      	ldr	r1, [r6, #52]
  101c46:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101c48:	6ab0      	ldr	r0, [r6, #40]
  101c4a:	f88bf7ff 	bl	100d64 <fs_clusterToSector>
  101c4e:	1901      	add	r1, r0, r4
  101c50:	9c01      	ldr	r4, [sp, #4]
  101c52:	9804      	ldr	r0, [sp, #16]
  101c54:	2380      	mov	r3, #128
  101c56:	1824      	add	r4, r4, r0
  101c58:	009b      	lsl	r3, r3, #2
  101c5a:	6ab2      	ldr	r2, [r6, #40]
  101c5c:	9400      	str	r4, [sp, #0]
  101c5e:	429f      	cmp	r7, r3
  101c60:	d104      	bne	101c6c <file_fread+0xb0>
  101c62:	6810      	ldr	r0, [r2, #0]
  101c64:	1c22      	mov	r2, r4		(add r2, r4, #0)
  101c66:	ff83f7fe 	bl	100b70 <part_directSectorRead>
  101c6a:	e00f      	b	101c8c <file_fread+0xd0>
  101c6c:	6810      	ldr	r0, [r2, #0]
  101c6e:	2201      	mov	r2, #1
  101c70:	ffa2f7fe 	bl	100bb8 <part_getSect>
  101c74:	9906      	ldr	r1, [sp, #24]
  101c76:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101c78:	1c3a      	mov	r2, r7		(add r2, r7, #0)
  101c7a:	1840      	add	r0, r0, r1
  101c7c:	9900      	ldr	r1, [sp, #0]
  101c7e:	fd57f001 	bl	103730 <memCpy>
  101c82:	6ab3      	ldr	r3, [r6, #40]
  101c84:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101c86:	6818      	ldr	r0, [r3, #0]
  101c88:	ff44f7fe 	bl	100b14 <part_relSect>
  101c8c:	9a05      	ldr	r2, [sp, #20]
  101c8e:	9b04      	ldr	r3, [sp, #16]
  101c90:	19d2      	add	r2, r2, r7
  101c92:	19db      	add	r3, r3, r7
  101c94:	9205      	str	r2, [sp, #20]
  101c96:	9304      	str	r3, [sp, #16]
  101c98:	1bed      	sub	r5, r5, r7
  101c9a:	2d00      	cmp	r5, #0
  101c9c:	d1a8      	bne	101bf0 <file_fread+0x34>
  101c9e:	e001      	b	101ca4 <file_fread+0xe8>
  101ca0:	2400      	mov	r4, #0
  101ca2:	9404      	str	r4, [sp, #16]
  101ca4:	9804      	ldr	r0, [sp, #16]
  101ca6:	b007      	add	sp, #28
  101ca8:	bcf0      	pop	{r4, r5, r6, r7}
  101caa:	bc02      	pop	{r1}
  101cac:	4708      	bx	r1
  101cae:	0000      	lsl	r0, r0, #0
  101cb0:	01ff      	lsl	r7, r7, #7
	...

00101cb4 <file_read>:
  101cb4:	b530      	push	{r4, r5, lr}
  101cb6:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  101cb8:	1c13      	mov	r3, r2		(add r3, r2, #0)
  101cba:	6c81      	ldr	r1, [r0, #72]
  101cbc:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  101cbe:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101cc0:	ff7cf7ff 	bl	101bbc <file_fread>
  101cc4:	6ca3      	ldr	r3, [r4, #72]
  101cc6:	181b      	add	r3, r3, r0
  101cc8:	64a3      	str	r3, [r4, #72]
  101cca:	bc30      	pop	{r4, r5}
  101ccc:	bc02      	pop	{r1}
  101cce:	4708      	bx	r1

00101cd0 <file_fwrite>:
  101cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  101cd2:	b088      	sub	sp, #32
  101cd4:	9301      	str	r3, [sp, #4]
  101cd6:	1c03      	mov	r3, r0		(add r3, r0, #0)
  101cd8:	3344      	add	r3, #68
  101cda:	781b      	ldrb	r3, [r3, #0]
  101cdc:	1c05      	mov	r5, r0		(add r5, r0, #0)
  101cde:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  101ce0:	1c16      	mov	r6, r2		(add r6, r2, #0)
  101ce2:	07d8      	lsl	r0, r3, #31
  101ce4:	d400      	bmi	101ce8 <file_fwrite+0x18>
  101ce6:	e08e      	b	101e06 <file_fwrite+0x136>
  101ce8:	0799      	lsl	r1, r3, #30
  101cea:	d400      	bmi	101cee <file_fwrite+0x1e>
  101cec:	e08b      	b	101e06 <file_fwrite+0x136>
  101cee:	6cea      	ldr	r2, [r5, #76]
  101cf0:	9207      	str	r2, [sp, #28]
  101cf2:	42a2      	cmp	r2, r4
  101cf4:	d900      	bls	101cf8 <file_fwrite+0x28>
  101cf6:	9407      	str	r4, [sp, #28]
  101cf8:	1c32      	mov	r2, r6		(add r2, r6, #0)
  101cfa:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101cfc:	9907      	ldr	r1, [sp, #28]
  101cfe:	ff27f7ff 	bl	101b50 <file_requiredCluster>
  101d02:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101d04:	2800      	cmp	r0, #0
  101d06:	d008      	beq	101d1a <file_fwrite+0x4a>
  101d08:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101d0a:	6aa8      	ldr	r0, [r5, #40]
  101d0c:	312c      	add	r1, #44
  101d0e:	3201      	add	r2, #1
  101d10:	fd98f7ff 	bl	101844 <fat_allocClusterChain>
  101d14:	0400      	lsl	r0, r0, #16
  101d16:	2800      	cmp	r0, #0
  101d18:	d175      	bne	101e06 <file_fwrite+0x136>
  101d1a:	2300      	mov	r3, #0
  101d1c:	9604      	str	r6, [sp, #16]
  101d1e:	9406      	str	r4, [sp, #24]
  101d20:	9305      	str	r3, [sp, #20]
  101d22:	e059      	b	101dd8 <file_fwrite+0x108>
  101d24:	6aae      	ldr	r6, [r5, #40]
  101d26:	4b3b      	ldr	r3, [pc, #236]	(101e14 <.text+0x1e14>)
  101d28:	79b0      	ldrb	r0, [r6, #6]
  101d2a:	9906      	ldr	r1, [sp, #24]
  101d2c:	9002      	str	r0, [sp, #8]
  101d2e:	4019      	and	r1, r3
  101d30:	9103      	str	r1, [sp, #12]
  101d32:	d105      	bne	101d40 <file_fwrite+0x70>
  101d34:	9a04      	ldr	r2, [sp, #16]
  101d36:	429a      	cmp	r2, r3
  101d38:	d902      	bls	101d40 <file_fwrite+0x70>
  101d3a:	2780      	mov	r7, #128
  101d3c:	00bf      	lsl	r7, r7, #2
  101d3e:	e009      	b	101d54 <file_fwrite+0x84>
  101d40:	2380      	mov	r3, #128
  101d42:	9803      	ldr	r0, [sp, #12]
  101d44:	009b      	lsl	r3, r3, #2
  101d46:	1a1a      	sub	r2, r3, r0
  101d48:	9b04      	ldr	r3, [sp, #16]
  101d4a:	4293      	cmp	r3, r2
  101d4c:	d900      	bls	101d50 <file_fwrite+0x80>
  101d4e:	1c13      	mov	r3, r2		(add r3, r2, #0)
  101d50:	041b      	lsl	r3, r3, #16
  101d52:	0c1f      	lsr	r7, r3, #16
  101d54:	9a02      	ldr	r2, [sp, #8]
  101d56:	9806      	ldr	r0, [sp, #24]
  101d58:	0251      	lsl	r1, r2, #9
  101d5a:	fd8df7fe 	bl	100878 <__aeabi_uidiv>
  101d5e:	1c2c      	mov	r4, r5		(add r4, r5, #0)
  101d60:	342c      	add	r4, #44
  101d62:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101d64:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101d66:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101d68:	fbe0f7ff 	bl	10152c <fat_LogicToDiscCluster>
  101d6c:	0400      	lsl	r0, r0, #16
  101d6e:	6aae      	ldr	r6, [r5, #40]
  101d70:	2800      	cmp	r0, #0
  101d72:	d13e      	bne	101df2 <file_fwrite+0x122>
  101d74:	9b06      	ldr	r3, [sp, #24]
  101d76:	9902      	ldr	r1, [sp, #8]
  101d78:	0a58      	lsr	r0, r3, #9
  101d7a:	fdc3f7fe 	bl	100904 <__umodsi3>
  101d7e:	6b69      	ldr	r1, [r5, #52]
  101d80:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101d82:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101d84:	ffeef7fe 	bl	100d64 <fs_clusterToSector>
  101d88:	9a05      	ldr	r2, [sp, #20]
  101d8a:	1901      	add	r1, r0, r4
  101d8c:	9801      	ldr	r0, [sp, #4]
  101d8e:	2380      	mov	r3, #128
  101d90:	1880      	add	r0, r0, r2
  101d92:	009b      	lsl	r3, r3, #2
  101d94:	6aae      	ldr	r6, [r5, #40]
  101d96:	9000      	str	r0, [sp, #0]
  101d98:	429f      	cmp	r7, r3
  101d9a:	d104      	bne	101da6 <file_fwrite+0xd6>
  101d9c:	6830      	ldr	r0, [r6, #0]
  101d9e:	9a00      	ldr	r2, [sp, #0]
  101da0:	fed4f7fe 	bl	100b4c <part_directSectorWrite>
  101da4:	e00f      	b	101dc6 <file_fwrite+0xf6>
  101da6:	2202      	mov	r2, #2
  101da8:	6830      	ldr	r0, [r6, #0]
  101daa:	ff05f7fe 	bl	100bb8 <part_getSect>
  101dae:	9b03      	ldr	r3, [sp, #12]
  101db0:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101db2:	18c1      	add	r1, r0, r3
  101db4:	1c3a      	mov	r2, r7		(add r2, r7, #0)
  101db6:	9800      	ldr	r0, [sp, #0]
  101db8:	fcbaf001 	bl	103730 <memCpy>
  101dbc:	6aab      	ldr	r3, [r5, #40]
  101dbe:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101dc0:	6818      	ldr	r0, [r3, #0]
  101dc2:	fea7f7fe 	bl	100b14 <part_relSect>
  101dc6:	9806      	ldr	r0, [sp, #24]
  101dc8:	9905      	ldr	r1, [sp, #20]
  101dca:	9a04      	ldr	r2, [sp, #16]
  101dcc:	19c0      	add	r0, r0, r7
  101dce:	19c9      	add	r1, r1, r7
  101dd0:	1bd2      	sub	r2, r2, r7
  101dd2:	9006      	str	r0, [sp, #24]
  101dd4:	9105      	str	r1, [sp, #20]
  101dd6:	9204      	str	r2, [sp, #16]
  101dd8:	9b04      	ldr	r3, [sp, #16]
  101dda:	2b00      	cmp	r3, #0
  101ddc:	d1a2      	bne	101d24 <file_fwrite+0x54>
  101dde:	6cea      	ldr	r2, [r5, #76]
  101de0:	9807      	ldr	r0, [sp, #28]
  101de2:	9b05      	ldr	r3, [sp, #20]
  101de4:	1a11      	sub	r1, r2, r0
  101de6:	428b      	cmp	r3, r1
  101de8:	d90f      	bls	101e0a <file_fwrite+0x13a>
  101dea:	1a5b      	sub	r3, r3, r1
  101dec:	18d3      	add	r3, r2, r3
  101dee:	64eb      	str	r3, [r5, #76]
  101df0:	e00b      	b	101e0a <file_fwrite+0x13a>
  101df2:	6cea      	ldr	r2, [r5, #76]
  101df4:	9805      	ldr	r0, [sp, #20]
  101df6:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101df8:	1812      	add	r2, r2, r0
  101dfa:	64ea      	str	r2, [r5, #76]
  101dfc:	3120      	add	r1, #32
  101dfe:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101e00:	f9c6f000 	bl	102190 <dir_setFileSize>
  101e04:	e001      	b	101e0a <file_fwrite+0x13a>
  101e06:	2100      	mov	r1, #0
  101e08:	9105      	str	r1, [sp, #20]
  101e0a:	9805      	ldr	r0, [sp, #20]
  101e0c:	b008      	add	sp, #32
  101e0e:	bcf0      	pop	{r4, r5, r6, r7}
  101e10:	bc02      	pop	{r1}
  101e12:	4708      	bx	r1
  101e14:	01ff      	lsl	r7, r7, #7
	...

00101e18 <file_write>:
  101e18:	b530      	push	{r4, r5, lr}
  101e1a:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  101e1c:	1c13      	mov	r3, r2		(add r3, r2, #0)
  101e1e:	6c81      	ldr	r1, [r0, #72]
  101e20:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  101e22:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101e24:	ff54f7ff 	bl	101cd0 <file_fwrite>
  101e28:	6ca3      	ldr	r3, [r4, #72]
  101e2a:	181b      	add	r3, r3, r0
  101e2c:	64a3      	str	r3, [r4, #72]
  101e2e:	bc30      	pop	{r4, r5}
  101e30:	bc02      	pop	{r1}
  101e32:	4708      	bx	r1

00101e34 <file_fclose>:
  101e34:	b510      	push	{r4, lr}
  101e36:	1c04      	mov	r4, r0		(add r4, r0, #0)
  101e38:	fc9ef001 	bl	103778 <fs_hasTimeSupport>
  101e3c:	1c23      	mov	r3, r4		(add r3, r4, #0)
  101e3e:	3344      	add	r3, #68
  101e40:	2800      	cmp	r0, #0
  101e42:	d00f      	beq	101e64 <file_fclose+0x30>
  101e44:	2200      	mov	r2, #0
  101e46:	8262      	strh	r2, [r4, #18]
  101e48:	781b      	ldrb	r3, [r3, #0]
  101e4a:	0799      	lsl	r1, r3, #30
  101e4c:	d503      	bpl	101e56 <file_fclose+0x22>
  101e4e:	6ce3      	ldr	r3, [r4, #76]
  101e50:	8322      	strh	r2, [r4, #24]
  101e52:	61e3      	str	r3, [r4, #28]
  101e54:	82e2      	strh	r2, [r4, #22]
  101e56:	1c22      	mov	r2, r4		(add r2, r4, #0)
  101e58:	6aa0      	ldr	r0, [r4, #40]
  101e5a:	3220      	add	r2, #32
  101e5c:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101e5e:	f97df000 	bl	10215c <dir_updateDirectoryEntry>
  101e62:	e008      	b	101e76 <file_fclose+0x42>
  101e64:	781b      	ldrb	r3, [r3, #0]
  101e66:	079a      	lsl	r2, r3, #30
  101e68:	d505      	bpl	101e76 <file_fclose+0x42>
  101e6a:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101e6c:	6aa0      	ldr	r0, [r4, #40]
  101e6e:	3120      	add	r1, #32
  101e70:	6ce2      	ldr	r2, [r4, #76]
  101e72:	f98df000 	bl	102190 <dir_setFileSize>
  101e76:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101e78:	2150      	mov	r1, #80
  101e7a:	fc65f001 	bl	103748 <memClr>
  101e7e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101e80:	2100      	mov	r1, #0
  101e82:	2200      	mov	r2, #0
  101e84:	fe4af7ff 	bl	101b1c <file_setAttr>
  101e88:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101e8a:	2101      	mov	r1, #1
  101e8c:	2200      	mov	r2, #0
  101e8e:	fe45f7ff 	bl	101b1c <file_setAttr>
  101e92:	2000      	mov	r0, #0
  101e94:	bc10      	pop	{r4}
  101e96:	bc02      	pop	{r1}
  101e98:	4708      	bx	r1
	...

00101e9c <file_fopen>:
  101e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  101e9e:	b08e      	sub	sp, #56
  101ea0:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  101ea2:	061b      	lsl	r3, r3, #24
  101ea4:	4669      	mov	r1, sp
  101ea6:	1c05      	mov	r5, r0		(add r5, r0, #0)
  101ea8:	0e1c      	lsr	r4, r3, #24
  101eaa:	1c10      	mov	r0, r2		(add r0, r2, #0)
  101eac:	3121      	add	r1, #33
  101eae:	1c17      	mov	r7, r2		(add r7, r2, #0)
  101eb0:	f92af000 	bl	102108 <dir_getFatFileName>
  101eb4:	2c72      	cmp	r4, #114
  101eb6:	d005      	beq	101ec4 <file_fopen+0x28>
  101eb8:	2c77      	cmp	r4, #119
  101eba:	d023      	beq	101f04 <file_fopen+0x68>
  101ebc:	2c61      	cmp	r4, #97
  101ebe:	d000      	beq	101ec2 <file_fopen+0x26>
  101ec0:	e0b7      	b	102032 <file_fopen+0x196>
  101ec2:	e02f      	b	101f24 <file_fopen+0x88>
  101ec4:	ac0b      	add	r4, sp, #44
  101ec6:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101ec8:	1c39      	mov	r1, r7		(add r1, r7, #0)
  101eca:	1c22      	mov	r2, r4		(add r2, r4, #0)
  101ecc:	2300      	mov	r3, #0
  101ece:	f8e1f7ff 	bl	101094 <fs_findFile>
  101ed2:	0600      	lsl	r0, r0, #24
  101ed4:	1600      	asr	r0, r0, #24
  101ed6:	2801      	cmp	r0, #1
  101ed8:	d001      	beq	101ede <file_fopen+0x42>
  101eda:	2001      	mov	r0, #1
  101edc:	e0ac      	b	102038 <file_fopen+0x19c>
  101ede:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101ee0:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101ee2:	1c22      	mov	r2, r4		(add r2, r4, #0)
  101ee4:	f99af000 	bl	10221c <dir_getFileStructure>
  101ee8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101eea:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101eec:	1c22      	mov	r2, r4		(add r2, r4, #0)
  101eee:	fd7bf7ff 	bl	1019e8 <file_initFile>
  101ef2:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101ef4:	2100      	mov	r1, #0
  101ef6:	2201      	mov	r2, #1
  101ef8:	fe10f7ff 	bl	101b1c <file_setAttr>
  101efc:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101efe:	2101      	mov	r1, #1
  101f00:	2200      	mov	r2, #0
  101f02:	e092      	b	10202a <file_fopen+0x18e>
  101f04:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101f06:	1c39      	mov	r1, r7		(add r1, r7, #0)
  101f08:	aa0b      	add	r2, sp, #44
  101f0a:	ab0d      	add	r3, sp, #52
  101f0c:	f8c2f7ff 	bl	101094 <fs_findFile>
  101f10:	0600      	lsl	r0, r0, #24
  101f12:	2800      	cmp	r0, #0
  101f14:	d001      	beq	101f1a <file_fopen+0x7e>
  101f16:	2002      	mov	r0, #2
  101f18:	e08e      	b	102038 <file_fopen+0x19c>
  101f1a:	9b0d      	ldr	r3, [sp, #52]
  101f1c:	2b00      	cmp	r3, #0
  101f1e:	d100      	bne	101f22 <file_fopen+0x86>
  101f20:	e087      	b	102032 <file_fopen+0x196>
  101f22:	e03a      	b	101f9a <file_fopen+0xfe>
  101f24:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101f26:	1c39      	mov	r1, r7		(add r1, r7, #0)
  101f28:	aa0b      	add	r2, sp, #44
  101f2a:	2300      	mov	r3, #0
  101f2c:	f8b2f7ff 	bl	101094 <fs_findFile>
  101f30:	0600      	lsl	r0, r0, #24
  101f32:	1600      	asr	r0, r0, #24
  101f34:	2801      	cmp	r0, #1
  101f36:	d130      	bne	101f9a <file_fopen+0xfe>
  101f38:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101f3a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101f3c:	aa0b      	add	r2, sp, #44
  101f3e:	f96df000 	bl	10221c <dir_getFileStructure>
  101f42:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101f44:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101f46:	aa0b      	add	r2, sp, #44
  101f48:	fd4ef7ff 	bl	1019e8 <file_initFile>
  101f4c:	6bab      	ldr	r3, [r5, #56]
  101f4e:	2b00      	cmp	r3, #0
  101f50:	d120      	bne	101f94 <file_fopen+0xf8>
  101f52:	6aac      	ldr	r4, [r5, #40]
  101f54:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101f56:	ff43f7fe 	bl	100de0 <fs_giveFreeClusterHint>
  101f5a:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101f5c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101f5e:	f825f7ff 	bl	100fac <fs_getNextFreeCluster>
  101f62:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101f64:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101f66:	900d      	str	r0, [sp, #52]
  101f68:	3120      	add	r1, #32
  101f6a:	6aa8      	ldr	r0, [r5, #40]
  101f6c:	f924f000 	bl	1021b8 <dir_setFirstCluster>
  101f70:	990d      	ldr	r1, [sp, #52]
  101f72:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101f74:	ff48f7fe 	bl	100e08 <fs_setFirstClusterInDirEntry>
  101f78:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101f7a:	9c0d      	ldr	r4, [sp, #52]
  101f7c:	f9b0f7ff 	bl	1012e0 <fat_giveEocMarker>
  101f80:	1c21      	mov	r1, r4		(add r1, r4, #0)
  101f82:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101f84:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101f86:	fbabf7ff 	bl	1016e0 <fat_setNextClusterAddress>
  101f8a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101f8c:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101f8e:	aa0b      	add	r2, sp, #44
  101f90:	fd2af7ff 	bl	1019e8 <file_initFile>
  101f94:	6ceb      	ldr	r3, [r5, #76]
  101f96:	64ab      	str	r3, [r5, #72]
  101f98:	e03f      	b	10201a <file_fopen+0x17e>
  101f9a:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101f9c:	1c39      	mov	r1, r7		(add r1, r7, #0)
  101f9e:	aa0b      	add	r2, sp, #44
  101fa0:	2300      	mov	r3, #0
  101fa2:	f8f1f7ff 	bl	101188 <fs_findFreeFile>
  101fa6:	0400      	lsl	r0, r0, #16
  101fa8:	2800      	cmp	r0, #0
  101faa:	d044      	beq	102036 <file_fopen+0x19a>
  101fac:	466a      	mov	r2, sp
  101fae:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101fb0:	4669      	mov	r1, sp
  101fb2:	3221      	add	r2, #33
  101fb4:	f892f000 	bl	1020dc <dir_createDefaultEntry>
  101fb8:	1c30      	mov	r0, r6		(add r0, r6, #0)
  101fba:	4669      	mov	r1, sp
  101fbc:	aa0b      	add	r2, sp, #44
  101fbe:	f915f000 	bl	1021ec <dir_createDirectoryEntry>
  101fc2:	4668      	mov	r0, sp
  101fc4:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101fc6:	2220      	mov	r2, #32
  101fc8:	fbb2f001 	bl	103730 <memCpy>
  101fcc:	aa0b      	add	r2, sp, #44
  101fce:	1c31      	mov	r1, r6		(add r1, r6, #0)
  101fd0:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101fd2:	fd09f7ff 	bl	1019e8 <file_initFile>
  101fd6:	6aac      	ldr	r4, [r5, #40]
  101fd8:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101fda:	ff01f7fe 	bl	100de0 <fs_giveFreeClusterHint>
  101fde:	1c01      	mov	r1, r0		(add r1, r0, #0)
  101fe0:	1c20      	mov	r0, r4		(add r0, r4, #0)
  101fe2:	ffe3f7fe 	bl	100fac <fs_getNextFreeCluster>
  101fe6:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101fe8:	1c02      	mov	r2, r0		(add r2, r0, #0)
  101fea:	900d      	str	r0, [sp, #52]
  101fec:	3120      	add	r1, #32
  101fee:	6aa8      	ldr	r0, [r5, #40]
  101ff0:	f8e2f000 	bl	1021b8 <dir_setFirstCluster>
  101ff4:	990d      	ldr	r1, [sp, #52]
  101ff6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  101ff8:	ff06f7fe 	bl	100e08 <fs_setFirstClusterInDirEntry>
  101ffc:	1c29      	mov	r1, r5		(add r1, r5, #0)
  101ffe:	312c      	add	r1, #44
  102000:	9a0d      	ldr	r2, [sp, #52]
  102002:	1c30      	mov	r0, r6		(add r0, r6, #0)
  102004:	fef8f7fe 	bl	100df8 <fs_initClusterChain>
  102008:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10200a:	9c0d      	ldr	r4, [sp, #52]
  10200c:	f968f7ff 	bl	1012e0 <fat_giveEocMarker>
  102010:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102012:	1c02      	mov	r2, r0		(add r2, r0, #0)
  102014:	1c30      	mov	r0, r6		(add r0, r6, #0)
  102016:	fb63f7ff 	bl	1016e0 <fat_setNextClusterAddress>
  10201a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10201c:	2100      	mov	r1, #0
  10201e:	2201      	mov	r2, #1
  102020:	fd7cf7ff 	bl	101b1c <file_setAttr>
  102024:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102026:	2101      	mov	r1, #1
  102028:	2201      	mov	r2, #1
  10202a:	fd77f7ff 	bl	101b1c <file_setAttr>
  10202e:	2000      	mov	r0, #0
  102030:	e003      	b	10203a <file_fopen+0x19e>
  102032:	2004      	mov	r0, #4
  102034:	e000      	b	102038 <file_fopen+0x19c>
  102036:	2003      	mov	r0, #3
  102038:	4240      	neg	r0, r0
  10203a:	b00e      	add	sp, #56
  10203c:	bcf0      	pop	{r4, r5, r6, r7}
  10203e:	bc02      	pop	{r1}
  102040:	4708      	bx	r1
  102042:	46c0      	nop			(mov r8, r8)

00102044 <dir_findFreeEntryinBuf>:
  102044:	b5f0      	push	{r4, r5, r6, r7, lr}
  102046:	b089      	sub	sp, #36
  102048:	9000      	str	r0, [sp, #0]
  10204a:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  10204c:	2400      	mov	r4, #0
  10204e:	0623      	lsl	r3, r4, #24
  102050:	9800      	ldr	r0, [sp, #0]
  102052:	0e1b      	lsr	r3, r3, #24
  102054:	a901      	add	r1, sp, #4
  102056:	469c      	mov	ip, r3
  102058:	0163      	lsl	r3, r4, #5
  10205a:	181b      	add	r3, r3, r0
  10205c:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  10205e:	cbc1      	ldmia	r3!,{r0, r6, r7}
  102060:	c2c1      	stmia	r2!,{r0, r6, r7}
  102062:	cbc1      	ldmia	r3!,{r0, r6, r7}
  102064:	c2c1      	stmia	r2!,{r0, r6, r7}
  102066:	cbc0      	ldmia	r3!,{r6, r7}
  102068:	c2c0      	stmia	r2!,{r6, r7}
  10206a:	7acb      	ldrb	r3, [r1, #11]
  10206c:	220f      	mov	r2, #15
  10206e:	4013      	and	r3, r2
  102070:	7808      	ldrb	r0, [r1, #0]
  102072:	2b0f      	cmp	r3, #15
  102074:	d009      	beq	10208a <dir_findFreeEntryinBuf+0x46>
  102076:	2800      	cmp	r0, #0
  102078:	d001      	beq	10207e <dir_findFreeEntryinBuf+0x3a>
  10207a:	28e5      	cmp	r0, #229
  10207c:	d105      	bne	10208a <dir_findFreeEntryinBuf+0x46>
  10207e:	2d00      	cmp	r5, #0
  102080:	d001      	beq	102086 <dir_findFreeEntryinBuf+0x42>
  102082:	4660      	mov	r0, ip
  102084:	7128      	strb	r0, [r5, #4]
  102086:	2001      	mov	r0, #1
  102088:	e003      	b	102092 <dir_findFreeEntryinBuf+0x4e>
  10208a:	3401      	add	r4, #1
  10208c:	2c10      	cmp	r4, #16
  10208e:	d1de      	bne	10204e <dir_findFreeEntryinBuf+0xa>
  102090:	2000      	mov	r0, #0
  102092:	b009      	add	sp, #36
  102094:	bcf0      	pop	{r4, r5, r6, r7}
  102096:	bc02      	pop	{r1}
  102098:	4708      	bx	r1
	...

0010209c <dir_addCluster>:
  10209c:	b530      	push	{r4, r5, lr}
  10209e:	b086      	sub	sp, #24
  1020a0:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  1020a2:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1020a4:	4669      	mov	r1, sp
  1020a6:	fea7f7fe 	bl	100df8 <fs_initClusterChain>
  1020aa:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1020ac:	4669      	mov	r1, sp
  1020ae:	2201      	mov	r2, #1
  1020b0:	fbc8f7ff 	bl	101844 <fat_allocClusterChain>
  1020b4:	0400      	lsl	r0, r0, #16
  1020b6:	2800      	cmp	r0, #0
  1020b8:	d002      	beq	1020c0 <dir_addCluster+0x24>
  1020ba:	2001      	mov	r0, #1
  1020bc:	4240      	neg	r0, r0
  1020be:	e008      	b	1020d2 <dir_addCluster+0x36>
  1020c0:	4669      	mov	r1, sp
  1020c2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1020c4:	ff50f7fe 	bl	100f68 <fs_getLastCluster>
  1020c8:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1020ca:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1020cc:	ff14f7fe 	bl	100ef8 <fs_clearCluster>
  1020d0:	2000      	mov	r0, #0
  1020d2:	b006      	add	sp, #24
  1020d4:	bc30      	pop	{r4, r5}
  1020d6:	bc02      	pop	{r1}
  1020d8:	4708      	bx	r1
	...

001020dc <dir_createDefaultEntry>:
  1020dc:	b510      	push	{r4, lr}
  1020de:	1c10      	mov	r0, r2		(add r0, r2, #0)
  1020e0:	220b      	mov	r2, #11
  1020e2:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  1020e4:	fb24f001 	bl	103730 <memCpy>
  1020e8:	2300      	mov	r3, #0
  1020ea:	72e3      	strb	r3, [r4, #11]
  1020ec:	7323      	strb	r3, [r4, #12]
  1020ee:	7363      	strb	r3, [r4, #13]
  1020f0:	81e3      	strh	r3, [r4, #14]
  1020f2:	8223      	strh	r3, [r4, #16]
  1020f4:	8263      	strh	r3, [r4, #18]
  1020f6:	82a3      	strh	r3, [r4, #20]
  1020f8:	82e3      	strh	r3, [r4, #22]
  1020fa:	8323      	strh	r3, [r4, #24]
  1020fc:	8363      	strh	r3, [r4, #26]
  1020fe:	61e3      	str	r3, [r4, #28]
  102100:	bc10      	pop	{r4}
  102102:	bc01      	pop	{r0}
  102104:	4700      	bx	r0
	...

00102108 <dir_getFatFileName>:
  102108:	b5f0      	push	{r4, r5, r6, r7, lr}
  10210a:	b083      	sub	sp, #12
  10210c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10210e:	4668      	mov	r0, sp
  102110:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  102112:	3001      	add	r0, #1
  102114:	210b      	mov	r1, #11
  102116:	fb17f001 	bl	103748 <memClr>
  10211a:	1c38      	mov	r0, r7		(add r0, r7, #0)
  10211c:	210b      	mov	r1, #11
  10211e:	fb13f001 	bl	103748 <memClr>
  102122:	7823      	ldrb	r3, [r4, #0]
  102124:	2b2f      	cmp	r3, #47
  102126:	d100      	bne	10212a <dir_getFatFileName+0x22>
  102128:	3401      	add	r4, #1
  10212a:	2500      	mov	r5, #0
  10212c:	e007      	b	10213e <dir_getFatFileName+0x36>
  10212e:	1c30      	mov	r0, r6		(add r0, r6, #0)
  102130:	1c39      	mov	r1, r7		(add r1, r7, #0)
  102132:	220b      	mov	r2, #11
  102134:	fafcf001 	bl	103730 <memCpy>
  102138:	1c6b      	add	r3, r5, #1
  10213a:	061b      	lsl	r3, r3, #24
  10213c:	0e1d      	lsr	r5, r3, #24
  10213e:	466e      	mov	r6, sp
  102140:	3601      	add	r6, #1
  102142:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102144:	1c31      	mov	r1, r6		(add r1, r6, #0)
  102146:	fc97f7ff 	bl	101a78 <file_normalToFatName>
  10214a:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10214c:	2800      	cmp	r0, #0
  10214e:	d1ee      	bne	10212e <dir_getFatFileName+0x26>
  102150:	4268      	neg	r0, r5
  102152:	0fc0      	lsr	r0, r0, #31
  102154:	b003      	add	sp, #12
  102156:	bcf0      	pop	{r4, r5, r6, r7}
  102158:	bc02      	pop	{r1}
  10215a:	4708      	bx	r1

0010215c <dir_updateDirectoryEntry>:
  10215c:	b5f0      	push	{r4, r5, r6, r7, lr}
  10215e:	1c06      	mov	r6, r0		(add r6, r0, #0)
  102160:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  102162:	1c14      	mov	r4, r2		(add r4, r2, #0)
  102164:	6811      	ldr	r1, [r2, #0]
  102166:	6800      	ldr	r0, [r0, #0]
  102168:	2202      	mov	r2, #2
  10216a:	fd25f7fe 	bl	100bb8 <part_getSect>
  10216e:	7921      	ldrb	r1, [r4, #4]
  102170:	0149      	lsl	r1, r1, #5
  102172:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102174:	1841      	add	r1, r0, r1
  102176:	2220      	mov	r2, #32
  102178:	1c38      	mov	r0, r7		(add r0, r7, #0)
  10217a:	fad9f001 	bl	103730 <memCpy>
  10217e:	6830      	ldr	r0, [r6, #0]
  102180:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102182:	fcc7f7fe 	bl	100b14 <part_relSect>
  102186:	2000      	mov	r0, #0
  102188:	bcf0      	pop	{r4, r5, r6, r7}
  10218a:	bc02      	pop	{r1}
  10218c:	4708      	bx	r1
	...

00102190 <dir_setFileSize>:
  102190:	b570      	push	{r4, r5, r6, lr}
  102192:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102194:	1c16      	mov	r6, r2		(add r6, r2, #0)
  102196:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  102198:	2202      	mov	r2, #2
  10219a:	6809      	ldr	r1, [r1, #0]
  10219c:	6800      	ldr	r0, [r0, #0]
  10219e:	fd0bf7fe 	bl	100bb8 <part_getSect>
  1021a2:	7923      	ldrb	r3, [r4, #4]
  1021a4:	015b      	lsl	r3, r3, #5
  1021a6:	181b      	add	r3, r3, r0
  1021a8:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1021aa:	61de      	str	r6, [r3, #28]
  1021ac:	6828      	ldr	r0, [r5, #0]
  1021ae:	fcb1f7fe 	bl	100b14 <part_relSect>
  1021b2:	bc70      	pop	{r4, r5, r6}
  1021b4:	bc01      	pop	{r0}
  1021b6:	4700      	bx	r0

001021b8 <dir_setFirstCluster>:
  1021b8:	b570      	push	{r4, r5, r6, lr}
  1021ba:	1c15      	mov	r5, r2		(add r5, r2, #0)
  1021bc:	1c06      	mov	r6, r0		(add r6, r0, #0)
  1021be:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  1021c0:	2202      	mov	r2, #2
  1021c2:	6809      	ldr	r1, [r1, #0]
  1021c4:	6800      	ldr	r0, [r0, #0]
  1021c6:	fcf7f7fe 	bl	100bb8 <part_getSect>
  1021ca:	7923      	ldrb	r3, [r4, #4]
  1021cc:	015b      	lsl	r3, r3, #5
  1021ce:	0c2a      	lsr	r2, r5, #16
  1021d0:	181b      	add	r3, r3, r0
  1021d2:	829a      	strh	r2, [r3, #20]
  1021d4:	7923      	ldrb	r3, [r4, #4]
  1021d6:	015b      	lsl	r3, r3, #5
  1021d8:	181b      	add	r3, r3, r0
  1021da:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1021dc:	835d      	strh	r5, [r3, #26]
  1021de:	6830      	ldr	r0, [r6, #0]
  1021e0:	fc98f7fe 	bl	100b14 <part_relSect>
  1021e4:	bc70      	pop	{r4, r5, r6}
  1021e6:	bc01      	pop	{r0}
  1021e8:	4700      	bx	r0
	...

001021ec <dir_createDirectoryEntry>:
  1021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  1021ee:	1c06      	mov	r6, r0		(add r6, r0, #0)
  1021f0:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  1021f2:	1c14      	mov	r4, r2		(add r4, r2, #0)
  1021f4:	6811      	ldr	r1, [r2, #0]
  1021f6:	6800      	ldr	r0, [r0, #0]
  1021f8:	2202      	mov	r2, #2
  1021fa:	fcddf7fe 	bl	100bb8 <part_getSect>
  1021fe:	7921      	ldrb	r1, [r4, #4]
  102200:	0149      	lsl	r1, r1, #5
  102202:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102204:	1841      	add	r1, r0, r1
  102206:	2220      	mov	r2, #32
  102208:	1c38      	mov	r0, r7		(add r0, r7, #0)
  10220a:	fa91f001 	bl	103730 <memCpy>
  10220e:	6830      	ldr	r0, [r6, #0]
  102210:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102212:	fc7ff7fe 	bl	100b14 <part_relSect>
  102216:	bcf0      	pop	{r4, r5, r6, r7}
  102218:	bc01      	pop	{r0}
  10221a:	4700      	bx	r0

0010221c <dir_getFileStructure>:
  10221c:	b570      	push	{r4, r5, r6, lr}
  10221e:	1c15      	mov	r5, r2		(add r5, r2, #0)
  102220:	1c06      	mov	r6, r0		(add r6, r0, #0)
  102222:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  102224:	6800      	ldr	r0, [r0, #0]
  102226:	6811      	ldr	r1, [r2, #0]
  102228:	2201      	mov	r2, #1
  10222a:	fcc5f7fe 	bl	100bb8 <part_getSect>
  10222e:	792b      	ldrb	r3, [r5, #4]
  102230:	015b      	lsl	r3, r3, #5
  102232:	181b      	add	r3, r3, r0
  102234:	1c01      	mov	r1, r0		(add r1, r0, #0)
  102236:	cb25      	ldmia	r3!,{r0, r2, r5}
  102238:	c425      	stmia	r4!,{r0, r2, r5}
  10223a:	cb25      	ldmia	r3!,{r0, r2, r5}
  10223c:	c425      	stmia	r4!,{r0, r2, r5}
  10223e:	cb05      	ldmia	r3!,{r0, r2}
  102240:	c405      	stmia	r4!,{r0, r2}
  102242:	6830      	ldr	r0, [r6, #0]
  102244:	fc66f7fe 	bl	100b14 <part_relSect>
  102248:	bc70      	pop	{r4, r5, r6}
  10224a:	bc01      	pop	{r0}
  10224c:	4700      	bx	r0
	...

00102250 <dir_findFileinBuf>:
  102250:	b5f0      	push	{r4, r5, r6, r7, lr}
  102252:	b08b      	sub	sp, #44
  102254:	9002      	str	r0, [sp, #8]
  102256:	9101      	str	r1, [sp, #4]
  102258:	1c15      	mov	r5, r2		(add r5, r2, #0)
  10225a:	2600      	mov	r6, #0
  10225c:	0633      	lsl	r3, r6, #24
  10225e:	9802      	ldr	r0, [sp, #8]
  102260:	0e1b      	lsr	r3, r3, #24
  102262:	9300      	str	r3, [sp, #0]
  102264:	ac03      	add	r4, sp, #12
  102266:	0173      	lsl	r3, r6, #5
  102268:	181b      	add	r3, r3, r0
  10226a:	1c22      	mov	r2, r4		(add r2, r4, #0)
  10226c:	cb83      	ldmia	r3!,{r0, r1, r7}
  10226e:	c283      	stmia	r2!,{r0, r1, r7}
  102270:	cb83      	ldmia	r3!,{r0, r1, r7}
  102272:	c283      	stmia	r2!,{r0, r1, r7}
  102274:	cb82      	ldmia	r3!,{r1, r7}
  102276:	c282      	stmia	r2!,{r1, r7}
  102278:	7ae3      	ldrb	r3, [r4, #11]
  10227a:	220f      	mov	r2, #15
  10227c:	4013      	and	r3, r2
  10227e:	2b0f      	cmp	r3, #15
  102280:	d015      	beq	1022ae <dir_findFileinBuf+0x5e>
  102282:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102284:	9901      	ldr	r1, [sp, #4]
  102286:	220b      	mov	r2, #11
  102288:	fa3ef001 	bl	103708 <strMatch>
  10228c:	2800      	cmp	r0, #0
  10228e:	d10e      	bne	1022ae <dir_findFileinBuf+0x5e>
  102290:	2d00      	cmp	r5, #0
  102292:	d004      	beq	10229e <dir_findFileinBuf+0x4e>
  102294:	4668      	mov	r0, sp
  102296:	7800      	ldrb	r0, [r0, #0]
  102298:	7ae3      	ldrb	r3, [r4, #11]
  10229a:	7128      	strb	r0, [r5, #4]
  10229c:	716b      	strb	r3, [r5, #5]
  10229e:	8aa3      	ldrh	r3, [r4, #20]
  1022a0:	8b62      	ldrh	r2, [r4, #26]
  1022a2:	041b      	lsl	r3, r3, #16
  1022a4:	1898      	add	r0, r3, r2
  1022a6:	2800      	cmp	r0, #0
  1022a8:	d105      	bne	1022b6 <dir_findFileinBuf+0x66>
  1022aa:	2001      	mov	r0, #1
  1022ac:	e003      	b	1022b6 <dir_findFileinBuf+0x66>
  1022ae:	3601      	add	r6, #1
  1022b0:	2e10      	cmp	r6, #16
  1022b2:	d1d3      	bne	10225c <dir_findFileinBuf+0xc>
  1022b4:	2000      	mov	r0, #0
  1022b6:	b00b      	add	sp, #44
  1022b8:	bcf0      	pop	{r4, r5, r6, r7}
  1022ba:	bc02      	pop	{r1}
  1022bc:	4708      	bx	r1
	...

001022c0 <dir_findinBuf>:
  1022c0:	b500      	push	{lr}
  1022c2:	061b      	lsl	r3, r3, #24
  1022c4:	0e1b      	lsr	r3, r3, #24
  1022c6:	2b00      	cmp	r3, #0
  1022c8:	d003      	beq	1022d2 <dir_findinBuf+0x12>
  1022ca:	2b01      	cmp	r3, #1
  1022cc:	d004      	beq	1022d8 <dir_findinBuf+0x18>
  1022ce:	2000      	mov	r0, #0
  1022d0:	e005      	b	1022de <dir_findinBuf+0x1e>
  1022d2:	ffbdf7ff 	bl	102250 <dir_findFileinBuf>
  1022d6:	e002      	b	1022de <dir_findinBuf+0x1e>
  1022d8:	1c11      	mov	r1, r2		(add r1, r2, #0)
  1022da:	feb3f7ff 	bl	102044 <dir_findFreeEntryinBuf>
  1022de:	bc02      	pop	{r1}
  1022e0:	4708      	bx	r1
	...

001022e4 <dir_findinRootArea>:
  1022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  1022e6:	061b      	lsl	r3, r3, #24
  1022e8:	b083      	sub	sp, #12
  1022ea:	0e1b      	lsr	r3, r3, #24
  1022ec:	9300      	str	r3, [sp, #0]
  1022ee:	9102      	str	r1, [sp, #8]
  1022f0:	9201      	str	r2, [sp, #4]
  1022f2:	1c03      	mov	r3, r0		(add r3, r0, #0)
  1022f4:	333c      	add	r3, #60
  1022f6:	781b      	ldrb	r3, [r3, #0]
  1022f8:	3b01      	sub	r3, #1
  1022fa:	061b      	lsl	r3, r3, #24
  1022fc:	0e1b      	lsr	r3, r3, #24
  1022fe:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102300:	2b01      	cmp	r3, #1
  102302:	d827      	bhi	102354 <dir_findinRootArea+0x70>
  102304:	6ac5      	ldr	r5, [r0, #44]
  102306:	2700      	mov	r7, #0
  102308:	e01a      	b	102340 <dir_findinRootArea+0x5c>
  10230a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  10230c:	2201      	mov	r2, #1
  10230e:	fc53f7fe 	bl	100bb8 <part_getSect>
  102312:	9902      	ldr	r1, [sp, #8]
  102314:	9a01      	ldr	r2, [sp, #4]
  102316:	9b00      	ldr	r3, [sp, #0]
  102318:	1c07      	mov	r7, r0		(add r7, r0, #0)
  10231a:	ffd1f7ff 	bl	1022c0 <dir_findinBuf>
  10231e:	1c06      	mov	r6, r0		(add r6, r0, #0)
  102320:	2800      	cmp	r0, #0
  102322:	d008      	beq	102336 <dir_findinRootArea+0x52>
  102324:	9b01      	ldr	r3, [sp, #4]
  102326:	2b00      	cmp	r3, #0
  102328:	d000      	beq	10232c <dir_findinRootArea+0x48>
  10232a:	601d      	str	r5, [r3, #0]
  10232c:	6820      	ldr	r0, [r4, #0]
  10232e:	1c39      	mov	r1, r7		(add r1, r7, #0)
  102330:	fbf0f7fe 	bl	100b14 <part_relSect>
  102334:	e00f      	b	102356 <dir_findinRootArea+0x72>
  102336:	6820      	ldr	r0, [r4, #0]
  102338:	1c39      	mov	r1, r7		(add r1, r7, #0)
  10233a:	fbebf7fe 	bl	100b14 <part_relSect>
  10233e:	3501      	add	r5, #1
  102340:	89a3      	ldrh	r3, [r4, #12]
  102342:	6ae2      	ldr	r2, [r4, #44]
  102344:	091b      	lsr	r3, r3, #4
  102346:	189b      	add	r3, r3, r2
  102348:	6820      	ldr	r0, [r4, #0]
  10234a:	429d      	cmp	r5, r3
  10234c:	d3dd      	bcc	10230a <dir_findinRootArea+0x26>
  10234e:	1c39      	mov	r1, r7		(add r1, r7, #0)
  102350:	fbe0f7fe 	bl	100b14 <part_relSect>
  102354:	2600      	mov	r6, #0
  102356:	1c30      	mov	r0, r6		(add r0, r6, #0)
  102358:	b003      	add	sp, #12
  10235a:	bcf0      	pop	{r4, r5, r6, r7}
  10235c:	bc02      	pop	{r1}
  10235e:	4708      	bx	r1

00102360 <dir_findinCluster>:
  102360:	b5f0      	push	{r4, r5, r6, r7, lr}
  102362:	b085      	sub	sp, #20
  102364:	9301      	str	r3, [sp, #4]
  102366:	9b0a      	ldr	r3, [sp, #40]
  102368:	061b      	lsl	r3, r3, #24
  10236a:	9202      	str	r2, [sp, #8]
  10236c:	0e1b      	lsr	r3, r3, #24
  10236e:	2200      	mov	r2, #0
  102370:	1c06      	mov	r6, r0		(add r6, r0, #0)
  102372:	9103      	str	r1, [sp, #12]
  102374:	9300      	str	r3, [sp, #0]
  102376:	9204      	str	r2, [sp, #16]
  102378:	e028      	b	1023cc <dir_findinCluster+0x6c>
  10237a:	9903      	ldr	r1, [sp, #12]
  10237c:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10237e:	6834      	ldr	r4, [r6, #0]
  102380:	fcf0f7fe 	bl	100d64 <fs_clusterToSector>
  102384:	2201      	mov	r2, #1
  102386:	19c1      	add	r1, r0, r7
  102388:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10238a:	fc15f7fe 	bl	100bb8 <part_getSect>
  10238e:	9b00      	ldr	r3, [sp, #0]
  102390:	9902      	ldr	r1, [sp, #8]
  102392:	9a01      	ldr	r2, [sp, #4]
  102394:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102396:	ff93f7ff 	bl	1022c0 <dir_findinBuf>
  10239a:	9b04      	ldr	r3, [sp, #16]
  10239c:	3301      	add	r3, #1
  10239e:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1023a0:	9304      	str	r3, [sp, #16]
  1023a2:	2800      	cmp	r0, #0
  1023a4:	d00e      	beq	1023c4 <dir_findinCluster+0x64>
  1023a6:	9a01      	ldr	r2, [sp, #4]
  1023a8:	2a00      	cmp	r2, #0
  1023aa:	d006      	beq	1023ba <dir_findinCluster+0x5a>
  1023ac:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1023ae:	9903      	ldr	r1, [sp, #12]
  1023b0:	fcd8f7fe 	bl	100d64 <fs_clusterToSector>
  1023b4:	9b01      	ldr	r3, [sp, #4]
  1023b6:	19c0      	add	r0, r0, r7
  1023b8:	6018      	str	r0, [r3, #0]
  1023ba:	6830      	ldr	r0, [r6, #0]
  1023bc:	1c29      	mov	r1, r5		(add r1, r5, #0)
  1023be:	fba9f7fe 	bl	100b14 <part_relSect>
  1023c2:	e00a      	b	1023da <dir_findinCluster+0x7a>
  1023c4:	6830      	ldr	r0, [r6, #0]
  1023c6:	1c29      	mov	r1, r5		(add r1, r5, #0)
  1023c8:	fba4f7fe 	bl	100b14 <part_relSect>
  1023cc:	9a04      	ldr	r2, [sp, #16]
  1023ce:	0613      	lsl	r3, r2, #24
  1023d0:	0e1f      	lsr	r7, r3, #24
  1023d2:	79b3      	ldrb	r3, [r6, #6]
  1023d4:	42bb      	cmp	r3, r7
  1023d6:	d8d0      	bhi	10237a <dir_findinCluster+0x1a>
  1023d8:	2400      	mov	r4, #0
  1023da:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1023dc:	b005      	add	sp, #20
  1023de:	bcf0      	pop	{r4, r5, r6, r7}
  1023e0:	bc02      	pop	{r1}
  1023e2:	4708      	bx	r1

001023e4 <dir_findinDir>:
  1023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  1023e6:	b088      	sub	sp, #32
  1023e8:	1c1f      	mov	r7, r3		(add r7, r3, #0)
  1023ea:	9b0d      	ldr	r3, [sp, #52]
  1023ec:	061b      	lsl	r3, r3, #24
  1023ee:	9101      	str	r1, [sp, #4]
  1023f0:	0e1e      	lsr	r6, r3, #24
  1023f2:	a902      	add	r1, sp, #8
  1023f4:	2300      	mov	r3, #0
  1023f6:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1023f8:	9205      	str	r2, [sp, #20]
  1023fa:	9204      	str	r2, [sp, #16]
  1023fc:	700b      	strb	r3, [r1, #0]
  1023fe:	9306      	str	r3, [sp, #24]
  102400:	9303      	str	r3, [sp, #12]
  102402:	2a01      	cmp	r2, #1
  102404:	d901      	bls	10240a <dir_findinDir+0x26>
  102406:	2200      	mov	r2, #0
  102408:	e00f      	b	10242a <dir_findinDir+0x46>
  10240a:	9901      	ldr	r1, [sp, #4]
  10240c:	1c3a      	mov	r2, r7		(add r2, r7, #0)
  10240e:	1c33      	mov	r3, r6		(add r3, r6, #0)
  102410:	ff68f7ff 	bl	1022e4 <dir_findinRootArea>
  102414:	e012      	b	10243c <dir_findinDir+0x58>
  102416:	9904      	ldr	r1, [sp, #16]
  102418:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10241a:	9a01      	ldr	r2, [sp, #4]
  10241c:	1c3b      	mov	r3, r7		(add r3, r7, #0)
  10241e:	9600      	str	r6, [sp, #0]
  102420:	ff9ef7ff 	bl	102360 <dir_findinCluster>
  102424:	2800      	cmp	r0, #0
  102426:	d109      	bne	10243c <dir_findinDir+0x58>
  102428:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  10242a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10242c:	a902      	add	r1, sp, #8
  10242e:	1c55      	add	r5, r2, #1
  102430:	f87cf7ff 	bl	10152c <fat_LogicToDiscCluster>
  102434:	0400      	lsl	r0, r0, #16
  102436:	2800      	cmp	r0, #0
  102438:	d0ed      	beq	102416 <dir_findinDir+0x32>
  10243a:	2000      	mov	r0, #0
  10243c:	b008      	add	sp, #32
  10243e:	bcf0      	pop	{r4, r5, r6, r7}
  102440:	bc02      	pop	{r1}
  102442:	4708      	bx	r1

00102444 <ioman_getBuffer>:
  102444:	30d0      	add	r0, #208
  102446:	4770      	bx	lr

00102448 <ioman_setAttr>:
  102448:	b510      	push	{r4, lr}
  10244a:	0612      	lsl	r2, r2, #24
  10244c:	061b      	lsl	r3, r3, #24
  10244e:	0409      	lsl	r1, r1, #16
  102450:	0e14      	lsr	r4, r2, #24
  102452:	0e1a      	lsr	r2, r3, #24
  102454:	8903      	ldrh	r3, [r0, #8]
  102456:	0c09      	lsr	r1, r1, #16
  102458:	428b      	cmp	r3, r1
  10245a:	d802      	bhi	102462 <ioman_setAttr+0x1a>
  10245c:	2301      	mov	r3, #1
  10245e:	7303      	strb	r3, [r0, #12]
  102460:	e010      	b	102484 <ioman_setAttr+0x3c>
  102462:	1808      	add	r0, r1, r0
  102464:	2a00      	cmp	r2, #0
  102466:	d006      	beq	102476 <ioman_setAttr+0x2e>
  102468:	1c01      	mov	r1, r0		(add r1, r0, #0)
  10246a:	31b8      	add	r1, #184
  10246c:	2201      	mov	r2, #1
  10246e:	780b      	ldrb	r3, [r1, #0]
  102470:	40a2      	lsl	r2, r4
  102472:	4313      	orr	r3, r2
  102474:	e005      	b	102482 <ioman_setAttr+0x3a>
  102476:	1c01      	mov	r1, r0		(add r1, r0, #0)
  102478:	31b8      	add	r1, #184
  10247a:	2201      	mov	r2, #1
  10247c:	780b      	ldrb	r3, [r1, #0]
  10247e:	40a2      	lsl	r2, r4
  102480:	4393      	bic	r3, r2
  102482:	700b      	strb	r3, [r1, #0]
  102484:	bc10      	pop	{r4}
  102486:	bc01      	pop	{r0}
  102488:	4700      	bx	r0
	...

0010248c <ioman_getAttr>:
  10248c:	b510      	push	{r4, lr}
  10248e:	0409      	lsl	r1, r1, #16
  102490:	8903      	ldrh	r3, [r0, #8]
  102492:	0612      	lsl	r2, r2, #24
  102494:	0c09      	lsr	r1, r1, #16
  102496:	0e14      	lsr	r4, r2, #24
  102498:	428b      	cmp	r3, r1
  10249a:	d803      	bhi	1024a4 <ioman_getAttr+0x18>
  10249c:	2302      	mov	r3, #2
  10249e:	7303      	strb	r3, [r0, #12]
  1024a0:	20ff      	mov	r0, #255
  1024a2:	e006      	b	1024b2 <ioman_getAttr+0x26>
  1024a4:	180b      	add	r3, r1, r0
  1024a6:	33b8      	add	r3, #184
  1024a8:	781b      	ldrb	r3, [r3, #0]
  1024aa:	2201      	mov	r2, #1
  1024ac:	40a2      	lsl	r2, r4
  1024ae:	1c18      	mov	r0, r3		(add r0, r3, #0)
  1024b0:	4010      	and	r0, r2
  1024b2:	bc10      	pop	{r4}
  1024b4:	bc02      	pop	{r1}
  1024b6:	4708      	bx	r1

001024b8 <ioman_getUseCnt>:
  1024b8:	0409      	lsl	r1, r1, #16
  1024ba:	8903      	ldrh	r3, [r0, #8]
  1024bc:	0c09      	lsr	r1, r1, #16
  1024be:	428b      	cmp	r3, r1
  1024c0:	d803      	bhi	1024ca <ioman_getUseCnt+0x12>
  1024c2:	2305      	mov	r3, #5
  1024c4:	7303      	strb	r3, [r0, #12]
  1024c6:	2000      	mov	r0, #0
  1024c8:	e002      	b	1024d0 <ioman_getUseCnt+0x18>
  1024ca:	180b      	add	r3, r1, r0
  1024cc:	33bc      	add	r3, #188
  1024ce:	7898      	ldrb	r0, [r3, #2]
  1024d0:	4770      	bx	lr
	...

001024d4 <ioman_incUseCnt>:
  1024d4:	0409      	lsl	r1, r1, #16
  1024d6:	8903      	ldrh	r3, [r0, #8]
  1024d8:	0c09      	lsr	r1, r1, #16
  1024da:	428b      	cmp	r3, r1
  1024dc:	d802      	bhi	1024e4 <ioman_incUseCnt+0x10>
  1024de:	2305      	mov	r3, #5
  1024e0:	7303      	strb	r3, [r0, #12]
  1024e2:	e007      	b	1024f4 <ioman_incUseCnt+0x20>
  1024e4:	180b      	add	r3, r1, r0
  1024e6:	1c18      	mov	r0, r3		(add r0, r3, #0)
  1024e8:	30bc      	add	r0, #188
  1024ea:	7883      	ldrb	r3, [r0, #2]
  1024ec:	2bff      	cmp	r3, #255
  1024ee:	d001      	beq	1024f4 <ioman_incUseCnt+0x20>
  1024f0:	3301      	add	r3, #1
  1024f2:	7083      	strb	r3, [r0, #2]
  1024f4:	4770      	bx	lr
	...

001024f8 <ioman_decUseCnt>:
  1024f8:	0409      	lsl	r1, r1, #16
  1024fa:	8903      	ldrh	r3, [r0, #8]
  1024fc:	0c09      	lsr	r1, r1, #16
  1024fe:	428b      	cmp	r3, r1
  102500:	d802      	bhi	102508 <ioman_decUseCnt+0x10>
  102502:	2305      	mov	r3, #5
  102504:	7303      	strb	r3, [r0, #12]
  102506:	e007      	b	102518 <ioman_decUseCnt+0x20>
  102508:	180b      	add	r3, r1, r0
  10250a:	1c18      	mov	r0, r3		(add r0, r3, #0)
  10250c:	30bc      	add	r0, #188
  10250e:	7883      	ldrb	r3, [r0, #2]
  102510:	2b00      	cmp	r3, #0
  102512:	d001      	beq	102518 <ioman_decUseCnt+0x20>
  102514:	3b01      	sub	r3, #1
  102516:	7083      	strb	r3, [r0, #2]
  102518:	4770      	bx	lr
	...

0010251c <ioman_resetUseCnt>:
  10251c:	0409      	lsl	r1, r1, #16
  10251e:	8903      	ldrh	r3, [r0, #8]
  102520:	0c09      	lsr	r1, r1, #16
  102522:	428b      	cmp	r3, r1
  102524:	d802      	bhi	10252c <ioman_resetUseCnt+0x10>
  102526:	2305      	mov	r3, #5
  102528:	7303      	strb	r3, [r0, #12]
  10252a:	e003      	b	102534 <ioman_resetUseCnt+0x18>
  10252c:	180b      	add	r3, r1, r0
  10252e:	33bc      	add	r3, #188
  102530:	2200      	mov	r2, #0
  102532:	709a      	strb	r2, [r3, #2]
  102534:	4770      	bx	lr
	...

00102538 <ioman_getRefCnt>:
  102538:	0409      	lsl	r1, r1, #16
  10253a:	8903      	ldrh	r3, [r0, #8]
  10253c:	0c09      	lsr	r1, r1, #16
  10253e:	428b      	cmp	r3, r1
  102540:	d803      	bhi	10254a <ioman_getRefCnt+0x12>
  102542:	2305      	mov	r3, #5
  102544:	7303      	strb	r3, [r0, #12]
  102546:	2000      	mov	r0, #0
  102548:	e002      	b	102550 <ioman_getRefCnt+0x18>
  10254a:	180b      	add	r3, r1, r0
  10254c:	33c4      	add	r3, #196
  10254e:	7818      	ldrb	r0, [r3, #0]
  102550:	4770      	bx	lr
	...

00102554 <ioman_incRefCnt>:
  102554:	0409      	lsl	r1, r1, #16
  102556:	8903      	ldrh	r3, [r0, #8]
  102558:	0c09      	lsr	r1, r1, #16
  10255a:	428b      	cmp	r3, r1
  10255c:	d802      	bhi	102564 <ioman_incRefCnt+0x10>
  10255e:	2305      	mov	r3, #5
  102560:	7303      	strb	r3, [r0, #12]
  102562:	e007      	b	102574 <ioman_incRefCnt+0x20>
  102564:	180b      	add	r3, r1, r0
  102566:	1c18      	mov	r0, r3		(add r0, r3, #0)
  102568:	30c4      	add	r0, #196
  10256a:	7803      	ldrb	r3, [r0, #0]
  10256c:	2bff      	cmp	r3, #255
  10256e:	d001      	beq	102574 <ioman_incRefCnt+0x20>
  102570:	3301      	add	r3, #1
  102572:	7003      	strb	r3, [r0, #0]
  102574:	4770      	bx	lr
	...

00102578 <ioman_decRefCnt>:
  102578:	0409      	lsl	r1, r1, #16
  10257a:	8903      	ldrh	r3, [r0, #8]
  10257c:	0c09      	lsr	r1, r1, #16
  10257e:	428b      	cmp	r3, r1
  102580:	d802      	bhi	102588 <ioman_decRefCnt+0x10>
  102582:	2305      	mov	r3, #5
  102584:	7303      	strb	r3, [r0, #12]
  102586:	e007      	b	102598 <ioman_decRefCnt+0x20>
  102588:	180b      	add	r3, r1, r0
  10258a:	1c18      	mov	r0, r3		(add r0, r3, #0)
  10258c:	30c4      	add	r0, #196
  10258e:	7803      	ldrb	r3, [r0, #0]
  102590:	2b00      	cmp	r3, #0
  102592:	d001      	beq	102598 <ioman_decRefCnt+0x20>
  102594:	3b01      	sub	r3, #1
  102596:	7003      	strb	r3, [r0, #0]
  102598:	4770      	bx	lr
	...

0010259c <ioman_resetRefCnt>:
  10259c:	0409      	lsl	r1, r1, #16
  10259e:	8903      	ldrh	r3, [r0, #8]
  1025a0:	0c09      	lsr	r1, r1, #16
  1025a2:	428b      	cmp	r3, r1
  1025a4:	d802      	bhi	1025ac <ioman_resetRefCnt+0x10>
  1025a6:	2305      	mov	r3, #5
  1025a8:	7303      	strb	r3, [r0, #12]
  1025aa:	e003      	b	1025b4 <ioman_resetRefCnt+0x18>
  1025ac:	180b      	add	r3, r1, r0
  1025ae:	33c4      	add	r3, #196
  1025b0:	2200      	mov	r2, #0
  1025b2:	701a      	strb	r2, [r3, #0]
  1025b4:	4770      	bx	lr
	...

001025b8 <ioman_pop>:
  1025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  1025ba:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1025bc:	0409      	lsl	r1, r1, #16
  1025be:	8923      	ldrh	r3, [r4, #8]
  1025c0:	0c08      	lsr	r0, r1, #16
  1025c2:	4283      	cmp	r3, r0
  1025c4:	d802      	bhi	1025cc <ioman_pop+0x14>
  1025c6:	2307      	mov	r3, #7
  1025c8:	7323      	strb	r3, [r4, #12]
  1025ca:	e008      	b	1025de <ioman_pop+0x26>
  1025cc:	1906      	add	r6, r0, r4
  1025ce:	1c35      	mov	r5, r6		(add r5, r6, #0)
  1025d0:	35c8      	add	r5, #200
  1025d2:	78af      	ldrb	r7, [r5, #2]
  1025d4:	1e7b      	sub	r3, r7, #1
  1025d6:	061b      	lsl	r3, r3, #24
  1025d8:	0e1b      	lsr	r3, r3, #24
  1025da:	2b02      	cmp	r3, #2
  1025dc:	d902      	bls	1025e4 <ioman_pop+0x2c>
  1025de:	2001      	mov	r0, #1
  1025e0:	4240      	neg	r0, r0
  1025e2:	e01c      	b	10261e <ioman_pop+0x66>
  1025e4:	0042      	lsl	r2, r0, #1
  1025e6:	1812      	add	r2, r2, r0
  1025e8:	19d3      	add	r3, r2, r7
  1025ea:	00db      	lsl	r3, r3, #3
  1025ec:	0081      	lsl	r1, r0, #2
  1025ee:	191b      	add	r3, r3, r4
  1025f0:	691b      	ldr	r3, [r3, #16]
  1025f2:	1909      	add	r1, r1, r4
  1025f4:	31a0      	add	r1, #160
  1025f6:	600b      	str	r3, [r1, #0]
  1025f8:	78ab      	ldrb	r3, [r5, #2]
  1025fa:	18d3      	add	r3, r2, r3
  1025fc:	00db      	lsl	r3, r3, #3
  1025fe:	191b      	add	r3, r3, r4
  102600:	7d1b      	ldrb	r3, [r3, #20]
  102602:	1c31      	mov	r1, r6		(add r1, r6, #0)
  102604:	31b8      	add	r1, #184
  102606:	700b      	strb	r3, [r1, #0]
  102608:	78ab      	ldrb	r3, [r5, #2]
  10260a:	18d2      	add	r2, r2, r3
  10260c:	00d2      	lsl	r2, r2, #3
  10260e:	1912      	add	r2, r2, r4
  102610:	7d53      	ldrb	r3, [r2, #21]
  102612:	3104      	add	r1, #4
  102614:	708b      	strb	r3, [r1, #2]
  102616:	78ab      	ldrb	r3, [r5, #2]
  102618:	3b01      	sub	r3, #1
  10261a:	70ab      	strb	r3, [r5, #2]
  10261c:	2000      	mov	r0, #0
  10261e:	bcf0      	pop	{r4, r5, r6, r7}
  102620:	bc02      	pop	{r1}
  102622:	4708      	bx	r1

00102624 <ioman_push>:
  102624:	b570      	push	{r4, r5, r6, lr}
  102626:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102628:	0409      	lsl	r1, r1, #16
  10262a:	8923      	ldrh	r3, [r4, #8]
  10262c:	0c08      	lsr	r0, r1, #16
  10262e:	4283      	cmp	r3, r0
  102630:	d801      	bhi	102636 <ioman_push+0x12>
  102632:	2305      	mov	r3, #5
  102634:	e006      	b	102644 <ioman_push+0x20>
  102636:	1906      	add	r6, r0, r4
  102638:	1c35      	mov	r5, r6		(add r5, r6, #0)
  10263a:	35c8      	add	r5, #200
  10263c:	78aa      	ldrb	r2, [r5, #2]
  10263e:	2a02      	cmp	r2, #2
  102640:	d904      	bls	10264c <ioman_push+0x28>
  102642:	2306      	mov	r3, #6
  102644:	2001      	mov	r0, #1
  102646:	4240      	neg	r0, r0
  102648:	7323      	strb	r3, [r4, #12]
  10264a:	e01e      	b	10268a <ioman_push+0x66>
  10264c:	3201      	add	r2, #1
  10264e:	0041      	lsl	r1, r0, #1
  102650:	0083      	lsl	r3, r0, #2
  102652:	0612      	lsl	r2, r2, #24
  102654:	1809      	add	r1, r1, r0
  102656:	0e12      	lsr	r2, r2, #24
  102658:	191b      	add	r3, r3, r4
  10265a:	70aa      	strb	r2, [r5, #2]
  10265c:	33a0      	add	r3, #160
  10265e:	188a      	add	r2, r1, r2
  102660:	681b      	ldr	r3, [r3, #0]
  102662:	00d2      	lsl	r2, r2, #3
  102664:	1912      	add	r2, r2, r4
  102666:	6113      	str	r3, [r2, #16]
  102668:	78ab      	ldrb	r3, [r5, #2]
  10266a:	1c32      	mov	r2, r6		(add r2, r6, #0)
  10266c:	18cb      	add	r3, r1, r3
  10266e:	32b8      	add	r2, #184
  102670:	7812      	ldrb	r2, [r2, #0]
  102672:	00db      	lsl	r3, r3, #3
  102674:	191b      	add	r3, r3, r4
  102676:	751a      	strb	r2, [r3, #20]
  102678:	78ab      	ldrb	r3, [r5, #2]
  10267a:	18c9      	add	r1, r1, r3
  10267c:	1c33      	mov	r3, r6		(add r3, r6, #0)
  10267e:	33bc      	add	r3, #188
  102680:	00c9      	lsl	r1, r1, #3
  102682:	789b      	ldrb	r3, [r3, #2]
  102684:	1909      	add	r1, r1, r4
  102686:	754b      	strb	r3, [r1, #21]
  102688:	2000      	mov	r0, #0
  10268a:	bc70      	pop	{r4, r5, r6}
  10268c:	bc02      	pop	{r1}
  10268e:	4708      	bx	r1

00102690 <ioman_getPtr>:
  102690:	0409      	lsl	r1, r1, #16
  102692:	8903      	ldrh	r3, [r0, #8]
  102694:	0c09      	lsr	r1, r1, #16
  102696:	428b      	cmp	r3, r1
  102698:	d803      	bhi	1026a2 <ioman_getPtr+0x12>
  10269a:	2305      	mov	r3, #5
  10269c:	7303      	strb	r3, [r0, #12]
  10269e:	2000      	mov	r0, #0
  1026a0:	e002      	b	1026a8 <ioman_getPtr+0x18>
  1026a2:	6843      	ldr	r3, [r0, #4]
  1026a4:	024a      	lsl	r2, r1, #9
  1026a6:	18d0      	add	r0, r2, r3
  1026a8:	4770      	bx	lr
	...

001026ac <ioman_getBp>:
  1026ac:	6842      	ldr	r2, [r0, #4]
  1026ae:	4291      	cmp	r1, r2
  1026b0:	d304      	bcc	1026bc <ioman_getBp+0x10>
  1026b2:	8903      	ldrh	r3, [r0, #8]
  1026b4:	025b      	lsl	r3, r3, #9
  1026b6:	18d3      	add	r3, r2, r3
  1026b8:	4299      	cmp	r1, r3
  1026ba:	d304      	bcc	1026c6 <ioman_getBp+0x1a>
  1026bc:	2308      	mov	r3, #8
  1026be:	7303      	strb	r3, [r0, #12]
  1026c0:	2001      	mov	r0, #1
  1026c2:	4240      	neg	r0, r0
  1026c4:	e005      	b	1026d2 <ioman_getBp+0x26>
  1026c6:	1a88      	sub	r0, r1, r2
  1026c8:	d501      	bpl	1026ce <ioman_getBp+0x22>
  1026ca:	4b02      	ldr	r3, [pc, #8]	(1026d4 <.text+0x26d4>)
  1026cc:	18c0      	add	r0, r0, r3
  1026ce:	01c0      	lsl	r0, r0, #7
  1026d0:	1400      	asr	r0, r0, #16
  1026d2:	4770      	bx	lr
  1026d4:	01ff      	lsl	r7, r7, #7
	...

001026d8 <ioman_resetCacheItem>:
  1026d8:	0409      	lsl	r1, r1, #16
  1026da:	8903      	ldrh	r3, [r0, #8]
  1026dc:	0c0a      	lsr	r2, r1, #16
  1026de:	4293      	cmp	r3, r2
  1026e0:	d802      	bhi	1026e8 <ioman_resetCacheItem+0x10>
  1026e2:	2305      	mov	r3, #5
  1026e4:	7303      	strb	r3, [r0, #12]
  1026e6:	e00c      	b	102702 <ioman_resetCacheItem+0x2a>
  1026e8:	0093      	lsl	r3, r2, #2
  1026ea:	181b      	add	r3, r3, r0
  1026ec:	2100      	mov	r1, #0
  1026ee:	33a0      	add	r3, #160
  1026f0:	6019      	str	r1, [r3, #0]
  1026f2:	1813      	add	r3, r2, r0
  1026f4:	1c1a      	mov	r2, r3		(add r2, r3, #0)
  1026f6:	32b8      	add	r2, #184
  1026f8:	7011      	strb	r1, [r2, #0]
  1026fa:	33c4      	add	r3, #196
  1026fc:	3204      	add	r2, #4
  1026fe:	7091      	strb	r1, [r2, #2]
  102700:	7019      	strb	r1, [r3, #0]
  102702:	4770      	bx	lr

00102704 <ioman_findSectorInCache>:
  102704:	b5f0      	push	{r4, r5, r6, r7, lr}
  102706:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102708:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  10270a:	2600      	mov	r6, #0
  10270c:	e00f      	b	10272e <ioman_findSectorInCache+0x2a>
  10270e:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102710:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102712:	2200      	mov	r2, #0
  102714:	febaf7ff 	bl	10248c <ioman_getAttr>
  102718:	2800      	cmp	r0, #0
  10271a:	d007      	beq	10272c <ioman_findSectorInCache+0x28>
  10271c:	00a3      	lsl	r3, r4, #2
  10271e:	195b      	add	r3, r3, r5
  102720:	33a0      	add	r3, #160
  102722:	681b      	ldr	r3, [r3, #0]
  102724:	42bb      	cmp	r3, r7
  102726:	d101      	bne	10272c <ioman_findSectorInCache+0x28>
  102728:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10272a:	e007      	b	10273c <ioman_findSectorInCache+0x38>
  10272c:	3601      	add	r6, #1
  10272e:	0433      	lsl	r3, r6, #16
  102730:	0c1c      	lsr	r4, r3, #16
  102732:	892b      	ldrh	r3, [r5, #8]
  102734:	42a3      	cmp	r3, r4
  102736:	d8ea      	bhi	10270e <ioman_findSectorInCache+0xa>
  102738:	2001      	mov	r0, #1
  10273a:	4240      	neg	r0, r0
  10273c:	bcf0      	pop	{r4, r5, r6, r7}
  10273e:	bc02      	pop	{r1}
  102740:	4708      	bx	r1
	...

00102744 <ioman_findFreeSpot>:
  102744:	b570      	push	{r4, r5, r6, lr}
  102746:	1c06      	mov	r6, r0		(add r6, r0, #0)
  102748:	2500      	mov	r5, #0
  10274a:	e009      	b	102760 <ioman_findFreeSpot+0x1c>
  10274c:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10274e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102750:	2200      	mov	r2, #0
  102752:	fe9bf7ff 	bl	10248c <ioman_getAttr>
  102756:	3501      	add	r5, #1
  102758:	2800      	cmp	r0, #0
  10275a:	d101      	bne	102760 <ioman_findFreeSpot+0x1c>
  10275c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10275e:	e006      	b	10276e <ioman_findFreeSpot+0x2a>
  102760:	042b      	lsl	r3, r5, #16
  102762:	0c1c      	lsr	r4, r3, #16
  102764:	8933      	ldrh	r3, [r6, #8]
  102766:	42a3      	cmp	r3, r4
  102768:	d8f0      	bhi	10274c <ioman_findFreeSpot+0x8>
  10276a:	2001      	mov	r0, #1
  10276c:	4240      	neg	r0, r0
  10276e:	bc70      	pop	{r4, r5, r6}
  102770:	bc02      	pop	{r1}
  102772:	4708      	bx	r1

00102774 <ioman_writeSector>:
  102774:	b510      	push	{r4, lr}
  102776:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102778:	2a00      	cmp	r2, #0
  10277a:	d009      	beq	102790 <ioman_writeSector+0x1c>
  10277c:	6800      	ldr	r0, [r0, #0]
  10277e:	ff75f000 	bl	10366c <if_writeBuf>
  102782:	0600      	lsl	r0, r0, #24
  102784:	2800      	cmp	r0, #0
  102786:	dd01      	ble	10278c <ioman_writeSector+0x18>
  102788:	2000      	mov	r0, #0
  10278a:	e003      	b	102794 <ioman_writeSector+0x20>
  10278c:	2304      	mov	r3, #4
  10278e:	7323      	strb	r3, [r4, #12]
  102790:	2001      	mov	r0, #1
  102792:	4240      	neg	r0, r0
  102794:	bc10      	pop	{r4}
  102796:	bc02      	pop	{r1}
  102798:	4708      	bx	r1
	...

0010279c <ioman_directSectorWrite>:
  10279c:	b5f0      	push	{r4, r5, r6, r7, lr}
  10279e:	b081      	sub	sp, #4
  1027a0:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1027a2:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  1027a4:	1c16      	mov	r6, r2		(add r6, r2, #0)
  1027a6:	ffadf7ff 	bl	102704 <ioman_findSectorInCache>
  1027aa:	0400      	lsl	r0, r0, #16
  1027ac:	1403      	asr	r3, r0, #16
  1027ae:	3301      	add	r3, #1
  1027b0:	d00e      	beq	1027d0 <ioman_directSectorWrite+0x34>
  1027b2:	0c04      	lsr	r4, r0, #16
  1027b4:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1027b6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1027b8:	ff6af7ff 	bl	102690 <ioman_getPtr>
  1027bc:	2280      	mov	r2, #128
  1027be:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1027c0:	0092      	lsl	r2, r2, #2
  1027c2:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1027c4:	ffb4f000 	bl	103730 <memCpy>
  1027c8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1027ca:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1027cc:	2202      	mov	r2, #2
  1027ce:	e024      	b	10281a <ioman_directSectorWrite+0x7e>
  1027d0:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1027d2:	ffb7f7ff 	bl	102744 <ioman_findFreeSpot>
  1027d6:	0400      	lsl	r0, r0, #16
  1027d8:	1402      	asr	r2, r0, #16
  1027da:	9200      	str	r2, [sp, #0]
  1027dc:	3201      	add	r2, #1
  1027de:	d020      	beq	102822 <ioman_directSectorWrite+0x86>
  1027e0:	0c04      	lsr	r4, r0, #16
  1027e2:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1027e4:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1027e6:	ff53f7ff 	bl	102690 <ioman_getPtr>
  1027ea:	2280      	mov	r2, #128
  1027ec:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1027ee:	0092      	lsl	r2, r2, #2
  1027f0:	1c30      	mov	r0, r6		(add r0, r6, #0)
  1027f2:	ff9df000 	bl	103730 <memCpy>
  1027f6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1027f8:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1027fa:	ff6df7ff 	bl	1026d8 <ioman_resetCacheItem>
  1027fe:	9a00      	ldr	r2, [sp, #0]
  102800:	0093      	lsl	r3, r2, #2
  102802:	195b      	add	r3, r3, r5
  102804:	33a0      	add	r3, #160
  102806:	601f      	str	r7, [r3, #0]
  102808:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10280a:	1c21      	mov	r1, r4		(add r1, r4, #0)
  10280c:	2202      	mov	r2, #2
  10280e:	2301      	mov	r3, #1
  102810:	fe1af7ff 	bl	102448 <ioman_setAttr>
  102814:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102816:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102818:	2200      	mov	r2, #0
  10281a:	2301      	mov	r3, #1
  10281c:	fe14f7ff 	bl	102448 <ioman_setAttr>
  102820:	e00a      	b	102838 <ioman_directSectorWrite+0x9c>
  102822:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102824:	1c39      	mov	r1, r7		(add r1, r7, #0)
  102826:	1c32      	mov	r2, r6		(add r2, r6, #0)
  102828:	ffa4f7ff 	bl	102774 <ioman_writeSector>
  10282c:	0600      	lsl	r0, r0, #24
  10282e:	2800      	cmp	r0, #0
  102830:	d002      	beq	102838 <ioman_directSectorWrite+0x9c>
  102832:	2001      	mov	r0, #1
  102834:	4240      	neg	r0, r0
  102836:	e000      	b	10283a <ioman_directSectorWrite+0x9e>
  102838:	2000      	mov	r0, #0
  10283a:	b001      	add	sp, #4
  10283c:	bcf0      	pop	{r4, r5, r6, r7}
  10283e:	bc02      	pop	{r1}
  102840:	4708      	bx	r1
	...

00102844 <ioman_flushSector>:
  102844:	b570      	push	{r4, r5, r6, lr}
  102846:	0409      	lsl	r1, r1, #16
  102848:	0c0d      	lsr	r5, r1, #16
  10284a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  10284c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10284e:	ff1ff7ff 	bl	102690 <ioman_getPtr>
  102852:	1c06      	mov	r6, r0		(add r6, r0, #0)
  102854:	2800      	cmp	r0, #0
  102856:	d101      	bne	10285c <ioman_flushSector+0x18>
  102858:	2308      	mov	r3, #8
  10285a:	e016      	b	10288a <ioman_flushSector+0x46>
  10285c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10285e:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102860:	2202      	mov	r2, #2
  102862:	fe13f7ff 	bl	10248c <ioman_getAttr>
  102866:	2800      	cmp	r0, #0
  102868:	d101      	bne	10286e <ioman_flushSector+0x2a>
  10286a:	2309      	mov	r3, #9
  10286c:	e00d      	b	10288a <ioman_flushSector+0x46>
  10286e:	00ab      	lsl	r3, r5, #2
  102870:	191b      	add	r3, r3, r4
  102872:	33a0      	add	r3, #160
  102874:	6819      	ldr	r1, [r3, #0]
  102876:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102878:	1c32      	mov	r2, r6		(add r2, r6, #0)
  10287a:	ff7bf7ff 	bl	102774 <ioman_writeSector>
  10287e:	0600      	lsl	r0, r0, #24
  102880:	2800      	cmp	r0, #0
  102882:	d001      	beq	102888 <ioman_flushSector+0x44>
  102884:	2000      	mov	r0, #0
  102886:	e003      	b	102890 <ioman_flushSector+0x4c>
  102888:	2304      	mov	r3, #4
  10288a:	2001      	mov	r0, #1
  10288c:	7323      	strb	r3, [r4, #12]
  10288e:	4240      	neg	r0, r0
  102890:	bc70      	pop	{r4, r5, r6}
  102892:	bc02      	pop	{r1}
  102894:	4708      	bx	r1
	...

00102898 <ioman_flushAll>:
  102898:	b570      	push	{r4, r5, r6, lr}
  10289a:	1c05      	mov	r5, r0		(add r5, r0, #0)
  10289c:	2600      	mov	r6, #0
  10289e:	e01b      	b	1028d8 <ioman_flushAll+0x40>
  1028a0:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1028a2:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1028a4:	2202      	mov	r2, #2
  1028a6:	fdf1f7ff 	bl	10248c <ioman_getAttr>
  1028aa:	2800      	cmp	r0, #0
  1028ac:	d013      	beq	1028d6 <ioman_flushAll+0x3e>
  1028ae:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1028b0:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1028b2:	ffc7f7ff 	bl	102844 <ioman_flushSector>
  1028b6:	0600      	lsl	r0, r0, #24
  1028b8:	2800      	cmp	r0, #0
  1028ba:	d002      	beq	1028c2 <ioman_flushAll+0x2a>
  1028bc:	2001      	mov	r0, #1
  1028be:	4240      	neg	r0, r0
  1028c0:	e010      	b	1028e4 <ioman_flushAll+0x4c>
  1028c2:	1963      	add	r3, r4, r5
  1028c4:	33bc      	add	r3, #188
  1028c6:	789b      	ldrb	r3, [r3, #2]
  1028c8:	2b00      	cmp	r3, #0
  1028ca:	d104      	bne	1028d6 <ioman_flushAll+0x3e>
  1028cc:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1028ce:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1028d0:	2202      	mov	r2, #2
  1028d2:	fdb9f7ff 	bl	102448 <ioman_setAttr>
  1028d6:	3601      	add	r6, #1
  1028d8:	0433      	lsl	r3, r6, #16
  1028da:	0c1c      	lsr	r4, r3, #16
  1028dc:	892b      	ldrh	r3, [r5, #8]
  1028de:	42a3      	cmp	r3, r4
  1028e0:	d8de      	bhi	1028a0 <ioman_flushAll+0x8>
  1028e2:	2000      	mov	r0, #0
  1028e4:	bc70      	pop	{r4, r5, r6}
  1028e6:	bc02      	pop	{r1}
  1028e8:	4708      	bx	r1
	...

001028ec <ioman_flushRange>:
  1028ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  1028ee:	1c16      	mov	r6, r2		(add r6, r2, #0)
  1028f0:	b083      	sub	sp, #12
  1028f2:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1028f4:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  1028f6:	42b1      	cmp	r1, r6
  1028f8:	d901      	bls	1028fe <ioman_flushRange+0x12>
  1028fa:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  1028fc:	1c17      	mov	r7, r2		(add r7, r2, #0)
  1028fe:	2200      	mov	r2, #0
  102900:	9202      	str	r2, [sp, #8]
  102902:	1c2b      	mov	r3, r5		(add r3, r5, #0)
  102904:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  102906:	33be      	add	r3, #190
  102908:	32a0      	add	r2, #160
  10290a:	9301      	str	r3, [sp, #4]
  10290c:	9200      	str	r2, [sp, #0]
  10290e:	e02b      	b	102968 <ioman_flushRange+0x7c>
  102910:	9a00      	ldr	r2, [sp, #0]
  102912:	6813      	ldr	r3, [r2, #0]
  102914:	42bb      	cmp	r3, r7
  102916:	d31e      	bcc	102956 <ioman_flushRange+0x6a>
  102918:	42b3      	cmp	r3, r6
  10291a:	d81c      	bhi	102956 <ioman_flushRange+0x6a>
  10291c:	9a02      	ldr	r2, [sp, #8]
  10291e:	0413      	lsl	r3, r2, #16
  102920:	0c1c      	lsr	r4, r3, #16
  102922:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102924:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102926:	2202      	mov	r2, #2
  102928:	fdb0f7ff 	bl	10248c <ioman_getAttr>
  10292c:	2800      	cmp	r0, #0
  10292e:	d012      	beq	102956 <ioman_flushRange+0x6a>
  102930:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102932:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102934:	ff86f7ff 	bl	102844 <ioman_flushSector>
  102938:	0600      	lsl	r0, r0, #24
  10293a:	2800      	cmp	r0, #0
  10293c:	d002      	beq	102944 <ioman_flushRange+0x58>
  10293e:	2001      	mov	r0, #1
  102940:	4240      	neg	r0, r0
  102942:	e016      	b	102972 <ioman_flushRange+0x86>
  102944:	9a01      	ldr	r2, [sp, #4]
  102946:	7813      	ldrb	r3, [r2, #0]
  102948:	2b00      	cmp	r3, #0
  10294a:	d104      	bne	102956 <ioman_flushRange+0x6a>
  10294c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10294e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102950:	2202      	mov	r2, #2
  102952:	fd79f7ff 	bl	102448 <ioman_setAttr>
  102956:	9b02      	ldr	r3, [sp, #8]
  102958:	3301      	add	r3, #1
  10295a:	9a00      	ldr	r2, [sp, #0]
  10295c:	9302      	str	r3, [sp, #8]
  10295e:	9b01      	ldr	r3, [sp, #4]
  102960:	3204      	add	r2, #4
  102962:	3301      	add	r3, #1
  102964:	9200      	str	r2, [sp, #0]
  102966:	9301      	str	r3, [sp, #4]
  102968:	892b      	ldrh	r3, [r5, #8]
  10296a:	9a02      	ldr	r2, [sp, #8]
  10296c:	429a      	cmp	r2, r3
  10296e:	d3cf      	bcc	102910 <ioman_flushRange+0x24>
  102970:	2000      	mov	r0, #0
  102972:	b003      	add	sp, #12
  102974:	bcf0      	pop	{r4, r5, r6, r7}
  102976:	bc02      	pop	{r1}
  102978:	4708      	bx	r1
	...

0010297c <ioman_readSector>:
  10297c:	b510      	push	{r4, lr}
  10297e:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102980:	2a00      	cmp	r2, #0
  102982:	d007      	beq	102994 <ioman_readSector+0x18>
  102984:	6800      	ldr	r0, [r0, #0]
  102986:	fe79f000 	bl	10367c <if_readBuf>
  10298a:	0600      	lsl	r0, r0, #24
  10298c:	2800      	cmp	r0, #0
  10298e:	d003      	beq	102998 <ioman_readSector+0x1c>
  102990:	2303      	mov	r3, #3
  102992:	7323      	strb	r3, [r4, #12]
  102994:	2001      	mov	r0, #1
  102996:	4240      	neg	r0, r0
  102998:	bc10      	pop	{r4}
  10299a:	bc02      	pop	{r1}
  10299c:	4708      	bx	r1
	...

001029a0 <ioman_putSectorInCache>:
  1029a0:	b570      	push	{r4, r5, r6, lr}
  1029a2:	0412      	lsl	r2, r2, #16
  1029a4:	0c15      	lsr	r5, r2, #16
  1029a6:	1c0e      	mov	r6, r1		(add r6, r1, #0)
  1029a8:	1c29      	mov	r1, r5		(add r1, r5, #0)
  1029aa:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1029ac:	fe70f7ff 	bl	102690 <ioman_getPtr>
  1029b0:	1c02      	mov	r2, r0		(add r2, r0, #0)
  1029b2:	2800      	cmp	r0, #0
  1029b4:	d101      	bne	1029ba <ioman_putSectorInCache+0x1a>
  1029b6:	2308      	mov	r3, #8
  1029b8:	e007      	b	1029ca <ioman_putSectorInCache+0x2a>
  1029ba:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1029bc:	1c31      	mov	r1, r6		(add r1, r6, #0)
  1029be:	ffddf7ff 	bl	10297c <ioman_readSector>
  1029c2:	0600      	lsl	r0, r0, #24
  1029c4:	2800      	cmp	r0, #0
  1029c6:	d004      	beq	1029d2 <ioman_putSectorInCache+0x32>
  1029c8:	2303      	mov	r3, #3
  1029ca:	2001      	mov	r0, #1
  1029cc:	4240      	neg	r0, r0
  1029ce:	7323      	strb	r3, [r4, #12]
  1029d0:	e00a      	b	1029e8 <ioman_putSectorInCache+0x48>
  1029d2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1029d4:	2301      	mov	r3, #1
  1029d6:	1c29      	mov	r1, r5		(add r1, r5, #0)
  1029d8:	2200      	mov	r2, #0
  1029da:	fd35f7ff 	bl	102448 <ioman_setAttr>
  1029de:	00ab      	lsl	r3, r5, #2
  1029e0:	191b      	add	r3, r3, r4
  1029e2:	33a0      	add	r3, #160
  1029e4:	601e      	str	r6, [r3, #0]
  1029e6:	2000      	mov	r0, #0
  1029e8:	bc70      	pop	{r4, r5, r6}
  1029ea:	bc02      	pop	{r1}
  1029ec:	4708      	bx	r1
	...

001029f0 <ioman_directSectorRead>:
  1029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  1029f2:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1029f4:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  1029f6:	1c17      	mov	r7, r2		(add r7, r2, #0)
  1029f8:	fe84f7ff 	bl	102704 <ioman_findSectorInCache>
  1029fc:	0400      	lsl	r0, r0, #16
  1029fe:	1403      	asr	r3, r0, #16
  102a00:	3301      	add	r3, #1
  102a02:	d002      	beq	102a0a <ioman_directSectorRead+0x1a>
  102a04:	0c01      	lsr	r1, r0, #16
  102a06:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a08:	e011      	b	102a2e <ioman_directSectorRead+0x3e>
  102a0a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a0c:	fe9af7ff 	bl	102744 <ioman_findFreeSpot>
  102a10:	0400      	lsl	r0, r0, #16
  102a12:	1403      	asr	r3, r0, #16
  102a14:	3301      	add	r3, #1
  102a16:	d013      	beq	102a40 <ioman_directSectorRead+0x50>
  102a18:	0c06      	lsr	r6, r0, #16
  102a1a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102a1c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a1e:	1c32      	mov	r2, r6		(add r2, r6, #0)
  102a20:	ffbef7ff 	bl	1029a0 <ioman_putSectorInCache>
  102a24:	0600      	lsl	r0, r0, #24
  102a26:	2800      	cmp	r0, #0
  102a28:	d112      	bne	102a50 <ioman_directSectorRead+0x60>
  102a2a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a2c:	1c31      	mov	r1, r6		(add r1, r6, #0)
  102a2e:	fe2ff7ff 	bl	102690 <ioman_getPtr>
  102a32:	2280      	mov	r2, #128
  102a34:	1c39      	mov	r1, r7		(add r1, r7, #0)
  102a36:	0092      	lsl	r2, r2, #2
  102a38:	fe7af000 	bl	103730 <memCpy>
  102a3c:	2000      	mov	r0, #0
  102a3e:	e009      	b	102a54 <ioman_directSectorRead+0x64>
  102a40:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a42:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102a44:	1c3a      	mov	r2, r7		(add r2, r7, #0)
  102a46:	ff99f7ff 	bl	10297c <ioman_readSector>
  102a4a:	0600      	lsl	r0, r0, #24
  102a4c:	2800      	cmp	r0, #0
  102a4e:	d001      	beq	102a54 <ioman_directSectorRead+0x64>
  102a50:	2001      	mov	r0, #1
  102a52:	4240      	neg	r0, r0
  102a54:	bcf0      	pop	{r4, r5, r6, r7}
  102a56:	bc02      	pop	{r1}
  102a58:	4708      	bx	r1
	...

00102a5c <ioman_reset>:
  102a5c:	b570      	push	{r4, r5, r6, lr}
  102a5e:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102a60:	8921      	ldrh	r1, [r4, #8]
  102a62:	30a0      	add	r0, #160
  102a64:	0089      	lsl	r1, r1, #2
  102a66:	fe6ff000 	bl	103748 <memClr>
  102a6a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a6c:	30b8      	add	r0, #184
  102a6e:	8921      	ldrh	r1, [r4, #8]
  102a70:	fe6af000 	bl	103748 <memClr>
  102a74:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a76:	30be      	add	r0, #190
  102a78:	8921      	ldrh	r1, [r4, #8]
  102a7a:	fe65f000 	bl	103748 <memClr>
  102a7e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102a80:	30ca      	add	r0, #202
  102a82:	8921      	ldrh	r1, [r4, #8]
  102a84:	fe60f000 	bl	103748 <memClr>
  102a88:	2600      	mov	r6, #0
  102a8a:	2300      	mov	r3, #0
  102a8c:	7323      	strb	r3, [r4, #12]
  102a8e:	e011      	b	102ab4 <ioman_reset+0x58>
  102a90:	006b      	lsl	r3, r5, #1
  102a92:	195b      	add	r3, r3, r5
  102a94:	189b      	add	r3, r3, r2
  102a96:	00db      	lsl	r3, r3, #3
  102a98:	191b      	add	r3, r3, r4
  102a9a:	1c19      	mov	r1, r3		(add r1, r3, #0)
  102a9c:	2200      	mov	r2, #0
  102a9e:	3114      	add	r1, #20
  102aa0:	611a      	str	r2, [r3, #16]
  102aa2:	751a      	strb	r2, [r3, #20]
  102aa4:	704a      	strb	r2, [r1, #1]
  102aa6:	0403      	lsl	r3, r0, #16
  102aa8:	0c1a      	lsr	r2, r3, #16
  102aaa:	8963      	ldrh	r3, [r4, #10]
  102aac:	3001      	add	r0, #1
  102aae:	4293      	cmp	r3, r2
  102ab0:	d8ee      	bhi	102a90 <ioman_reset+0x34>
  102ab2:	3601      	add	r6, #1
  102ab4:	0433      	lsl	r3, r6, #16
  102ab6:	0c1d      	lsr	r5, r3, #16
  102ab8:	8923      	ldrh	r3, [r4, #8]
  102aba:	42ab      	cmp	r3, r5
  102abc:	d901      	bls	102ac2 <ioman_reset+0x66>
  102abe:	2000      	mov	r0, #0
  102ac0:	e7f1      	b	102aa6 <ioman_reset+0x4a>
  102ac2:	bc70      	pop	{r4, r5, r6}
  102ac4:	bc01      	pop	{r0}
  102ac6:	4700      	bx	r0

00102ac8 <ioman_findOverallocableSpot>:
  102ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  102aca:	2201      	mov	r2, #1
  102acc:	b085      	sub	sp, #20
  102ace:	4252      	neg	r2, r2
  102ad0:	9202      	str	r2, [sp, #8]
  102ad2:	23ff      	mov	r3, #255
  102ad4:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102ad6:	2200      	mov	r2, #0
  102ad8:	9301      	str	r3, [sp, #4]
  102ada:	e03c      	b	102b56 <ioman_findOverallocableSpot+0x8e>
  102adc:	1973      	add	r3, r6, r5
  102ade:	33c8      	add	r3, #200
  102ae0:	789a      	ldrb	r2, [r3, #2]
  102ae2:	896b      	ldrh	r3, [r5, #10]
  102ae4:	429a      	cmp	r2, r3
  102ae6:	d234      	bcs	102b52 <ioman_findOverallocableSpot+0x8a>
  102ae8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102aea:	1c31      	mov	r1, r6		(add r1, r6, #0)
  102aec:	2202      	mov	r2, #2
  102aee:	fccdf7ff 	bl	10248c <ioman_getAttr>
  102af2:	2800      	cmp	r0, #0
  102af4:	d002      	beq	102afc <ioman_findOverallocableSpot+0x34>
  102af6:	237f      	mov	r3, #127
  102af8:	9300      	str	r3, [sp, #0]
  102afa:	e001      	b	102b00 <ioman_findOverallocableSpot+0x38>
  102afc:	2200      	mov	r2, #0
  102afe:	9200      	str	r2, [sp, #0]
  102b00:	1972      	add	r2, r6, r5
  102b02:	1c13      	mov	r3, r2		(add r3, r2, #0)
  102b04:	33c8      	add	r3, #200
  102b06:	789f      	ldrb	r7, [r3, #2]
  102b08:	896b      	ldrh	r3, [r5, #10]
  102b0a:	9304      	str	r3, [sp, #16]
  102b0c:	892b      	ldrh	r3, [r5, #8]
  102b0e:	42b3      	cmp	r3, r6
  102b10:	d803      	bhi	102b1a <ioman_findOverallocableSpot+0x52>
  102b12:	2305      	mov	r3, #5
  102b14:	732b      	strb	r3, [r5, #12]
  102b16:	2300      	mov	r3, #0
  102b18:	e002      	b	102b20 <ioman_findOverallocableSpot+0x58>
  102b1a:	1c13      	mov	r3, r2		(add r3, r2, #0)
  102b1c:	33c4      	add	r3, #196
  102b1e:	781b      	ldrb	r3, [r3, #0]
  102b20:	0058      	lsl	r0, r3, #1
  102b22:	18c0      	add	r0, r0, r3
  102b24:	0103      	lsl	r3, r0, #4
  102b26:	18c0      	add	r0, r0, r3
  102b28:	21ff      	mov	r1, #255
  102b2a:	fea5f7fd 	bl	100878 <__aeabi_uidiv>
  102b2e:	9a00      	ldr	r2, [sp, #0]
  102b30:	234d      	mov	r3, #77
  102b32:	1814      	add	r4, r2, r0
  102b34:	9904      	ldr	r1, [sp, #16]
  102b36:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102b38:	4358      	mul	r0, r3
  102b3a:	fe9df7fd 	bl	100878 <__aeabi_uidiv>
  102b3e:	0624      	lsl	r4, r4, #24
  102b40:	0e24      	lsr	r4, r4, #24
  102b42:	1824      	add	r4, r4, r0
  102b44:	0624      	lsl	r4, r4, #24
  102b46:	9b01      	ldr	r3, [sp, #4]
  102b48:	0e24      	lsr	r4, r4, #24
  102b4a:	429c      	cmp	r4, r3
  102b4c:	d201      	bcs	102b52 <ioman_findOverallocableSpot+0x8a>
  102b4e:	9602      	str	r6, [sp, #8]
  102b50:	9401      	str	r4, [sp, #4]
  102b52:	9a03      	ldr	r2, [sp, #12]
  102b54:	3201      	add	r2, #1
  102b56:	9203      	str	r2, [sp, #12]
  102b58:	9a03      	ldr	r2, [sp, #12]
  102b5a:	0413      	lsl	r3, r2, #16
  102b5c:	0c1e      	lsr	r6, r3, #16
  102b5e:	892b      	ldrh	r3, [r5, #8]
  102b60:	42b3      	cmp	r3, r6
  102b62:	d8bb      	bhi	102adc <ioman_findOverallocableSpot+0x14>
  102b64:	9802      	ldr	r0, [sp, #8]
  102b66:	b005      	add	sp, #20
  102b68:	bcf0      	pop	{r4, r5, r6, r7}
  102b6a:	bc02      	pop	{r1}
  102b6c:	4708      	bx	r1
	...

00102b70 <ioman_printStatus>:
  102b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  102b72:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102b74:	b086      	sub	sp, #24
  102b76:	4828      	ldr	r0, [pc, #160]	(102c18 <.text+0x2c18>)
  102b78:	fc62f000 	bl	103440 <efsl_debug_printf_arm>
  102b7c:	8929      	ldrh	r1, [r5, #8]
  102b7e:	686a      	ldr	r2, [r5, #4]
  102b80:	024b      	lsl	r3, r1, #9
  102b82:	4826      	ldr	r0, [pc, #152]	(102c1c <.text+0x2c1c>)
  102b84:	18d3      	add	r3, r2, r3
  102b86:	fc5bf000 	bl	103440 <efsl_debug_printf_arm>
  102b8a:	2700      	mov	r7, #0
  102b8c:	e03b      	b	102c06 <ioman_printStatus+0x96>
  102b8e:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102b90:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102b92:	2200      	mov	r2, #0
  102b94:	fc7af7ff 	bl	10248c <ioman_getAttr>
  102b98:	2800      	cmp	r0, #0
  102b9a:	d033      	beq	102c04 <ioman_printStatus+0x94>
  102b9c:	00a3      	lsl	r3, r4, #2
  102b9e:	195b      	add	r3, r3, r5
  102ba0:	33a0      	add	r3, #160
  102ba2:	681b      	ldr	r3, [r3, #0]
  102ba4:	9303      	str	r3, [sp, #12]
  102ba6:	892b      	ldrh	r3, [r5, #8]
  102ba8:	42a3      	cmp	r3, r4
  102baa:	d805      	bhi	102bb8 <ioman_printStatus+0x48>
  102bac:	2200      	mov	r2, #0
  102bae:	2305      	mov	r3, #5
  102bb0:	732b      	strb	r3, [r5, #12]
  102bb2:	9205      	str	r2, [sp, #20]
  102bb4:	9204      	str	r2, [sp, #16]
  102bb6:	e007      	b	102bc8 <ioman_printStatus+0x58>
  102bb8:	1963      	add	r3, r4, r5
  102bba:	1c1a      	mov	r2, r3		(add r2, r3, #0)
  102bbc:	32bc      	add	r2, #188
  102bbe:	7892      	ldrb	r2, [r2, #2]
  102bc0:	9204      	str	r2, [sp, #16]
  102bc2:	33c4      	add	r3, #196
  102bc4:	781b      	ldrb	r3, [r3, #0]
  102bc6:	9305      	str	r3, [sp, #20]
  102bc8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102bca:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102bcc:	2201      	mov	r2, #1
  102bce:	fc5df7ff 	bl	10248c <ioman_getAttr>
  102bd2:	2800      	cmp	r0, #0
  102bd4:	d001      	beq	102bda <ioman_printStatus+0x6a>
  102bd6:	4e12      	ldr	r6, [pc, #72]	(102c20 <.text+0x2c20>)
  102bd8:	e000      	b	102bdc <ioman_printStatus+0x6c>
  102bda:	4e12      	ldr	r6, [pc, #72]	(102c24 <.text+0x2c24>)
  102bdc:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102bde:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102be0:	2202      	mov	r2, #2
  102be2:	fc53f7ff 	bl	10248c <ioman_getAttr>
  102be6:	2800      	cmp	r0, #0
  102be8:	d001      	beq	102bee <ioman_printStatus+0x7e>
  102bea:	4b0f      	ldr	r3, [pc, #60]	(102c28 <.text+0x2c28>)
  102bec:	e000      	b	102bf0 <ioman_printStatus+0x80>
  102bee:	4b0f      	ldr	r3, [pc, #60]	(102c2c <.text+0x2c2c>)
  102bf0:	9a05      	ldr	r2, [sp, #20]
  102bf2:	9302      	str	r3, [sp, #8]
  102bf4:	9200      	str	r2, [sp, #0]
  102bf6:	480e      	ldr	r0, [pc, #56]	(102c30 <.text+0x2c30>)
  102bf8:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102bfa:	9a03      	ldr	r2, [sp, #12]
  102bfc:	9b04      	ldr	r3, [sp, #16]
  102bfe:	9601      	str	r6, [sp, #4]
  102c00:	fc1ef000 	bl	103440 <efsl_debug_printf_arm>
  102c04:	3701      	add	r7, #1
  102c06:	043b      	lsl	r3, r7, #16
  102c08:	0c1c      	lsr	r4, r3, #16
  102c0a:	892b      	ldrh	r3, [r5, #8]
  102c0c:	42a3      	cmp	r3, r4
  102c0e:	d8be      	bhi	102b8e <ioman_printStatus+0x1e>
  102c10:	b006      	add	sp, #24
  102c12:	bcf0      	pop	{r4, r5, r6, r7}
  102c14:	bc01      	pop	{r0}
  102c16:	4700      	bx	r0
  102c18:	4028      	and	r0, r5
  102c1a:	0010      	lsl	r0, r2, #0
  102c1c:	4054      	eor	r4, r2
  102c1e:	0010      	lsl	r0, r2, #0
  102c20:	407c      	eor	r4, r7
  102c22:	0010      	lsl	r0, r2, #0
  102c24:	4084      	lsl	r4, r0
  102c26:	0010      	lsl	r0, r2, #0
  102c28:	408c      	lsl	r4, r1
  102c2a:	0010      	lsl	r0, r2, #0
  102c2c:	4098      	lsl	r0, r3
  102c2e:	0010      	lsl	r0, r2, #0
  102c30:	40a4      	lsl	r4, r4
  102c32:	0010      	lsl	r0, r2, #0

00102c34 <ioman_releaseSector>:
  102c34:	b530      	push	{r4, r5, lr}
  102c36:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102c38:	fd38f7ff 	bl	1026ac <ioman_getBp>
  102c3c:	0400      	lsl	r0, r0, #16
  102c3e:	0c05      	lsr	r5, r0, #16
  102c40:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102c42:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102c44:	fc58f7ff 	bl	1024f8 <ioman_decUseCnt>
  102c48:	8923      	ldrh	r3, [r4, #8]
  102c4a:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  102c4c:	4293      	cmp	r3, r2
  102c4e:	d802      	bhi	102c56 <ioman_releaseSector+0x22>
  102c50:	2305      	mov	r3, #5
  102c52:	7323      	strb	r3, [r4, #12]
  102c54:	e004      	b	102c60 <ioman_releaseSector+0x2c>
  102c56:	192b      	add	r3, r5, r4
  102c58:	33bc      	add	r3, #188
  102c5a:	789b      	ldrb	r3, [r3, #2]
  102c5c:	2b00      	cmp	r3, #0
  102c5e:	d11b      	bne	102c98 <ioman_releaseSector+0x64>
  102c60:	192b      	add	r3, r5, r4
  102c62:	33c8      	add	r3, #200
  102c64:	789b      	ldrb	r3, [r3, #2]
  102c66:	2b00      	cmp	r3, #0
  102c68:	d016      	beq	102c98 <ioman_releaseSector+0x64>
  102c6a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102c6c:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102c6e:	2202      	mov	r2, #2
  102c70:	fc0cf7ff 	bl	10248c <ioman_getAttr>
  102c74:	2800      	cmp	r0, #0
  102c76:	d003      	beq	102c80 <ioman_releaseSector+0x4c>
  102c78:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102c7a:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102c7c:	fde2f7ff 	bl	102844 <ioman_flushSector>
  102c80:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102c82:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102c84:	fc98f7ff 	bl	1025b8 <ioman_pop>
  102c88:	00ab      	lsl	r3, r5, #2
  102c8a:	191b      	add	r3, r3, r4
  102c8c:	33a0      	add	r3, #160
  102c8e:	6819      	ldr	r1, [r3, #0]
  102c90:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102c92:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  102c94:	fe84f7ff 	bl	1029a0 <ioman_putSectorInCache>
  102c98:	2000      	mov	r0, #0
  102c9a:	bc30      	pop	{r4, r5}
  102c9c:	bc02      	pop	{r1}
  102c9e:	4708      	bx	r1

00102ca0 <ioman_findUnusedSpot>:
  102ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  102ca2:	2601      	mov	r6, #1
  102ca4:	b082      	sub	sp, #8
  102ca6:	2700      	mov	r7, #0
  102ca8:	22ff      	mov	r2, #255
  102caa:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102cac:	4276      	neg	r6, r6
  102cae:	9200      	str	r2, [sp, #0]
  102cb0:	9701      	str	r7, [sp, #4]
  102cb2:	e038      	b	102d26 <ioman_findUnusedSpot+0x86>
  102cb4:	1963      	add	r3, r4, r5
  102cb6:	33bc      	add	r3, #188
  102cb8:	789b      	ldrb	r3, [r3, #2]
  102cba:	2b00      	cmp	r3, #0
  102cbc:	d130      	bne	102d20 <ioman_findUnusedSpot+0x80>
  102cbe:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102cc0:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102cc2:	2202      	mov	r2, #2
  102cc4:	fbe2f7ff 	bl	10248c <ioman_getAttr>
  102cc8:	2800      	cmp	r0, #0
  102cca:	d106      	bne	102cda <ioman_findUnusedSpot+0x3a>
  102ccc:	2f00      	cmp	r7, #0
  102cce:	d104      	bne	102cda <ioman_findUnusedSpot+0x3a>
  102cd0:	23ff      	mov	r3, #255
  102cd2:	2601      	mov	r6, #1
  102cd4:	9300      	str	r3, [sp, #0]
  102cd6:	4276      	neg	r6, r6
  102cd8:	2701      	mov	r7, #1
  102cda:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102cdc:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102cde:	2202      	mov	r2, #2
  102ce0:	fbd4f7ff 	bl	10248c <ioman_getAttr>
  102ce4:	2800      	cmp	r0, #0
  102ce6:	d002      	beq	102cee <ioman_findUnusedSpot+0x4e>
  102ce8:	2f00      	cmp	r7, #0
  102cea:	d102      	bne	102cf2 <ioman_findUnusedSpot+0x52>
  102cec:	e008      	b	102d00 <ioman_findUnusedSpot+0x60>
  102cee:	2f00      	cmp	r7, #0
  102cf0:	d016      	beq	102d20 <ioman_findUnusedSpot+0x80>
  102cf2:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102cf4:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102cf6:	2202      	mov	r2, #2
  102cf8:	fbc8f7ff 	bl	10248c <ioman_getAttr>
  102cfc:	2800      	cmp	r0, #0
  102cfe:	d10f      	bne	102d20 <ioman_findUnusedSpot+0x80>
  102d00:	892b      	ldrh	r3, [r5, #8]
  102d02:	42a3      	cmp	r3, r4
  102d04:	d804      	bhi	102d10 <ioman_findUnusedSpot+0x70>
  102d06:	2305      	mov	r3, #5
  102d08:	732b      	strb	r3, [r5, #12]
  102d0a:	1c26      	mov	r6, r4		(add r6, r4, #0)
  102d0c:	2300      	mov	r3, #0
  102d0e:	e006      	b	102d1e <ioman_findUnusedSpot+0x7e>
  102d10:	1963      	add	r3, r4, r5
  102d12:	33c4      	add	r3, #196
  102d14:	781b      	ldrb	r3, [r3, #0]
  102d16:	9a00      	ldr	r2, [sp, #0]
  102d18:	4293      	cmp	r3, r2
  102d1a:	d801      	bhi	102d20 <ioman_findUnusedSpot+0x80>
  102d1c:	1c26      	mov	r6, r4		(add r6, r4, #0)
  102d1e:	9300      	str	r3, [sp, #0]
  102d20:	9b01      	ldr	r3, [sp, #4]
  102d22:	3301      	add	r3, #1
  102d24:	9301      	str	r3, [sp, #4]
  102d26:	9a01      	ldr	r2, [sp, #4]
  102d28:	0413      	lsl	r3, r2, #16
  102d2a:	0c1c      	lsr	r4, r3, #16
  102d2c:	892b      	ldrh	r3, [r5, #8]
  102d2e:	42a3      	cmp	r3, r4
  102d30:	d8c0      	bhi	102cb4 <ioman_findUnusedSpot+0x14>
  102d32:	1c30      	mov	r0, r6		(add r0, r6, #0)
  102d34:	b002      	add	sp, #8
  102d36:	bcf0      	pop	{r4, r5, r6, r7}
  102d38:	bc02      	pop	{r1}
  102d3a:	4708      	bx	r1

00102d3c <ioman_getSector>:
  102d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  102d3e:	b081      	sub	sp, #4
  102d40:	0612      	lsl	r2, r2, #24
  102d42:	1c04      	mov	r4, r0		(add r4, r0, #0)
  102d44:	9100      	str	r1, [sp, #0]
  102d46:	0e17      	lsr	r7, r2, #24
  102d48:	fcdcf7ff 	bl	102704 <ioman_findSectorInCache>
  102d4c:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102d4e:	1c43      	add	r3, r0, #1
  102d50:	d00b      	beq	102d6a <ioman_getSector+0x2e>
  102d52:	07bb      	lsl	r3, r7, #30
  102d54:	d506      	bpl	102d64 <ioman_getSector+0x28>
  102d56:	0401      	lsl	r1, r0, #16
  102d58:	0c09      	lsr	r1, r1, #16
  102d5a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102d5c:	2202      	mov	r2, #2
  102d5e:	2301      	mov	r3, #1
  102d60:	fb72f7ff 	bl	102448 <ioman_setAttr>
  102d64:	042b      	lsl	r3, r5, #16
  102d66:	0c1d      	lsr	r5, r3, #16
  102d68:	e05b      	b	102e22 <ioman_getSector+0xe6>
  102d6a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102d6c:	fceaf7ff 	bl	102744 <ioman_findFreeSpot>
  102d70:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102d72:	1c43      	add	r3, r0, #1
  102d74:	d112      	bne	102d9c <ioman_getSector+0x60>
  102d76:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102d78:	ff92f7ff 	bl	102ca0 <ioman_findUnusedSpot>
  102d7c:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102d7e:	1c43      	add	r3, r0, #1
  102d80:	d062      	beq	102e48 <ioman_getSector+0x10c>
  102d82:	0403      	lsl	r3, r0, #16
  102d84:	0c1e      	lsr	r6, r3, #16
  102d86:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102d88:	1c31      	mov	r1, r6		(add r1, r6, #0)
  102d8a:	2202      	mov	r2, #2
  102d8c:	fb7ef7ff 	bl	10248c <ioman_getAttr>
  102d90:	2800      	cmp	r0, #0
  102d92:	d003      	beq	102d9c <ioman_getSector+0x60>
  102d94:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102d96:	1c31      	mov	r1, r6		(add r1, r6, #0)
  102d98:	fd54f7ff 	bl	102844 <ioman_flushSector>
  102d9c:	042b      	lsl	r3, r5, #16
  102d9e:	0c1d      	lsr	r5, r3, #16
  102da0:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102da2:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102da4:	fc98f7ff 	bl	1026d8 <ioman_resetCacheItem>
  102da8:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102daa:	9900      	ldr	r1, [sp, #0]
  102dac:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  102dae:	fdf7f7ff 	bl	1029a0 <ioman_putSectorInCache>
  102db2:	0600      	lsl	r0, r0, #24
  102db4:	2800      	cmp	r0, #0
  102db6:	d145      	bne	102e44 <ioman_getSector+0x108>
  102db8:	2f02      	cmp	r7, #2
  102dba:	d132      	bne	102e22 <ioman_getSector+0xe6>
  102dbc:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102dbe:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102dc0:	2202      	mov	r2, #2
  102dc2:	2301      	mov	r3, #1
  102dc4:	fb40f7ff 	bl	102448 <ioman_setAttr>
  102dc8:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102dca:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102dcc:	fb82f7ff 	bl	1024d4 <ioman_incUseCnt>
  102dd0:	e02d      	b	102e2e <ioman_getSector+0xf2>
  102dd2:	0403      	lsl	r3, r0, #16
  102dd4:	0c1d      	lsr	r5, r3, #16
  102dd6:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102dd8:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102dda:	2202      	mov	r2, #2
  102ddc:	fb56f7ff 	bl	10248c <ioman_getAttr>
  102de0:	2800      	cmp	r0, #0
  102de2:	d003      	beq	102dec <ioman_getSector+0xb0>
  102de4:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102de6:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102de8:	fd2cf7ff 	bl	102844 <ioman_flushSector>
  102dec:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102dee:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102df0:	fc18f7ff 	bl	102624 <ioman_push>
  102df4:	0600      	lsl	r0, r0, #24
  102df6:	2800      	cmp	r0, #0
  102df8:	d124      	bne	102e44 <ioman_getSector+0x108>
  102dfa:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102dfc:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102dfe:	fc6bf7ff 	bl	1026d8 <ioman_resetCacheItem>
  102e02:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102e04:	9900      	ldr	r1, [sp, #0]
  102e06:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  102e08:	fdcaf7ff 	bl	1029a0 <ioman_putSectorInCache>
  102e0c:	0600      	lsl	r0, r0, #24
  102e0e:	2800      	cmp	r0, #0
  102e10:	d118      	bne	102e44 <ioman_getSector+0x108>
  102e12:	07bb      	lsl	r3, r7, #30
  102e14:	d505      	bpl	102e22 <ioman_getSector+0xe6>
  102e16:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102e18:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102e1a:	2202      	mov	r2, #2
  102e1c:	2301      	mov	r3, #1
  102e1e:	fb13f7ff 	bl	102448 <ioman_setAttr>
  102e22:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102e24:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102e26:	fb55f7ff 	bl	1024d4 <ioman_incUseCnt>
  102e2a:	077b      	lsl	r3, r7, #29
  102e2c:	d403      	bmi	102e36 <ioman_getSector+0xfa>
  102e2e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102e30:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102e32:	fb8ff7ff 	bl	102554 <ioman_incRefCnt>
  102e36:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102e38:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102e3a:	fc29f7ff 	bl	102690 <ioman_getPtr>
  102e3e:	e009      	b	102e54 <ioman_getSector+0x118>
  102e40:	230a      	mov	r3, #10
  102e42:	7323      	strb	r3, [r4, #12]
  102e44:	2000      	mov	r0, #0
  102e46:	e005      	b	102e54 <ioman_getSector+0x118>
  102e48:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102e4a:	fe3df7ff 	bl	102ac8 <ioman_findOverallocableSpot>
  102e4e:	1c43      	add	r3, r0, #1
  102e50:	d1bf      	bne	102dd2 <ioman_getSector+0x96>
  102e52:	e7f5      	b	102e40 <ioman_getSector+0x104>
  102e54:	b001      	add	sp, #4
  102e56:	bcf0      	pop	{r4, r5, r6, r7}
  102e58:	bc02      	pop	{r1}
  102e5a:	4708      	bx	r1

00102e5c <ioman_init>:
  102e5c:	b500      	push	{lr}
  102e5e:	1c03      	mov	r3, r0		(add r3, r0, #0)
  102e60:	33d0      	add	r3, #208
  102e62:	6043      	str	r3, [r0, #4]
  102e64:	2306      	mov	r3, #6
  102e66:	8103      	strh	r3, [r0, #8]
  102e68:	2303      	mov	r3, #3
  102e6a:	6001      	str	r1, [r0, #0]
  102e6c:	8143      	strh	r3, [r0, #10]
  102e6e:	fdf5f7ff 	bl	102a5c <ioman_reset>
  102e72:	2000      	mov	r0, #0
  102e74:	bc02      	pop	{r1}
  102e76:	4708      	bx	r1

00102e78 <mkdir>:
  102e78:	b5f0      	push	{r4, r5, r6, r7, lr}
  102e7a:	b091      	sub	sp, #68
  102e7c:	aa0e      	add	r2, sp, #56
  102e7e:	ab10      	add	r3, sp, #64
  102e80:	1c07      	mov	r7, r0		(add r7, r0, #0)
  102e82:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  102e84:	f906f7fe 	bl	101094 <fs_findFile>
  102e88:	0600      	lsl	r0, r0, #24
  102e8a:	2800      	cmp	r0, #0
  102e8c:	d001      	beq	102e92 <mkdir+0x1a>
  102e8e:	2001      	mov	r0, #1
  102e90:	e003      	b	102e9a <mkdir+0x22>
  102e92:	9b10      	ldr	r3, [sp, #64]
  102e94:	2b00      	cmp	r3, #0
  102e96:	d102      	bne	102e9e <mkdir+0x26>
  102e98:	2002      	mov	r0, #2
  102e9a:	4240      	neg	r0, r0
  102e9c:	e09f      	b	102fde <mkdir+0x166>
  102e9e:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102ea0:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102ea2:	aa0e      	add	r2, sp, #56
  102ea4:	2300      	mov	r3, #0
  102ea6:	f96ff7fe 	bl	101188 <fs_findFreeFile>
  102eaa:	0400      	lsl	r0, r0, #16
  102eac:	2800      	cmp	r0, #0
  102eae:	d101      	bne	102eb4 <mkdir+0x3c>
  102eb0:	2003      	mov	r0, #3
  102eb2:	e7f2      	b	102e9a <mkdir+0x22>
  102eb4:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102eb6:	ff93f7fd 	bl	100de0 <fs_giveFreeClusterHint>
  102eba:	1c01      	mov	r1, r0		(add r1, r0, #0)
  102ebc:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102ebe:	f875f7fe 	bl	100fac <fs_getNextFreeCluster>
  102ec2:	9001      	str	r0, [sp, #4]
  102ec4:	2800      	cmp	r0, #0
  102ec6:	d100      	bne	102eca <mkdir+0x52>
  102ec8:	e089      	b	102fde <mkdir+0x166>
  102eca:	9901      	ldr	r1, [sp, #4]
  102ecc:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102ece:	f813f7fe 	bl	100ef8 <fs_clearCluster>
  102ed2:	2202      	mov	r2, #2
  102ed4:	990e      	ldr	r1, [sp, #56]
  102ed6:	6838      	ldr	r0, [r7, #0]
  102ed8:	fe6ef7fd 	bl	100bb8 <part_getSect>
  102edc:	466d      	mov	r5, sp
  102ede:	352d      	add	r5, #45
  102ee0:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102ee2:	9002      	str	r0, [sp, #8]
  102ee4:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102ee6:	ac03      	add	r4, sp, #12
  102ee8:	f90ef7ff 	bl	102108 <dir_getFatFileName>
  102eec:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102eee:	2120      	mov	r1, #32
  102ef0:	fc2af000 	bl	103748 <memClr>
  102ef4:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102ef6:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102ef8:	220b      	mov	r2, #11
  102efa:	fc19f000 	bl	103730 <memCpy>
  102efe:	2300      	mov	r3, #0
  102f00:	930a      	str	r3, [sp, #40]
  102f02:	9b01      	ldr	r3, [sp, #4]
  102f04:	0c1b      	lsr	r3, r3, #16
  102f06:	9300      	str	r3, [sp, #0]
  102f08:	466b      	mov	r3, sp
  102f0a:	881b      	ldrh	r3, [r3, #0]
  102f0c:	82a3      	strh	r3, [r4, #20]
  102f0e:	9b01      	ldr	r3, [sp, #4]
  102f10:	041e      	lsl	r6, r3, #16
  102f12:	0c36      	lsr	r6, r6, #16
  102f14:	2310      	mov	r3, #16
  102f16:	72e3      	strb	r3, [r4, #11]
  102f18:	8366      	strh	r6, [r4, #26]
  102f1a:	ab0f      	add	r3, sp, #60
  102f1c:	7819      	ldrb	r1, [r3, #0]
  102f1e:	9b02      	ldr	r3, [sp, #8]
  102f20:	0149      	lsl	r1, r1, #5
  102f22:	1859      	add	r1, r3, r1
  102f24:	2220      	mov	r2, #32
  102f26:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102f28:	fc02f000 	bl	103730 <memCpy>
  102f2c:	9902      	ldr	r1, [sp, #8]
  102f2e:	6838      	ldr	r0, [r7, #0]
  102f30:	fdf0f7fd 	bl	100b14 <part_relSect>
  102f34:	9901      	ldr	r1, [sp, #4]
  102f36:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102f38:	683d      	ldr	r5, [r7, #0]
  102f3a:	ff13f7fd 	bl	100d64 <fs_clusterToSector>
  102f3e:	2202      	mov	r2, #2
  102f40:	1c01      	mov	r1, r0		(add r1, r0, #0)
  102f42:	1c28      	mov	r0, r5		(add r0, r5, #0)
  102f44:	fe38f7fd 	bl	100bb8 <part_getSect>
  102f48:	2120      	mov	r1, #32
  102f4a:	1c05      	mov	r5, r0		(add r5, r0, #0)
  102f4c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102f4e:	fbfbf000 	bl	103748 <memClr>
  102f52:	4825      	ldr	r0, [pc, #148]	(102fe8 <.text+0x2fe8>)
  102f54:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102f56:	220b      	mov	r2, #11
  102f58:	fbeaf000 	bl	103730 <memCpy>
  102f5c:	2310      	mov	r3, #16
  102f5e:	72e3      	strb	r3, [r4, #11]
  102f60:	2300      	mov	r3, #0
  102f62:	930a      	str	r3, [sp, #40]
  102f64:	466b      	mov	r3, sp
  102f66:	881b      	ldrh	r3, [r3, #0]
  102f68:	2220      	mov	r2, #32
  102f6a:	82a3      	strh	r3, [r4, #20]
  102f6c:	8366      	strh	r6, [r4, #26]
  102f6e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102f70:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102f72:	fbddf000 	bl	103730 <memCpy>
  102f76:	1c3b      	mov	r3, r7		(add r3, r7, #0)
  102f78:	333c      	add	r3, #60
  102f7a:	781b      	ldrb	r3, [r3, #0]
  102f7c:	9a10      	ldr	r2, [sp, #64]
  102f7e:	2b03      	cmp	r3, #3
  102f80:	d12a      	bne	102fd8 <mkdir+0x160>
  102f82:	69fb      	ldr	r3, [r7, #28]
  102f84:	429a      	cmp	r2, r3
  102f86:	d101      	bne	102f8c <mkdir+0x114>
  102f88:	2300      	mov	r3, #0
  102f8a:	9310      	str	r3, [sp, #64]
  102f8c:	ac03      	add	r4, sp, #12
  102f8e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102f90:	2120      	mov	r1, #32
  102f92:	fbd9f000 	bl	103748 <memClr>
  102f96:	4815      	ldr	r0, [pc, #84]	(102fec <.text+0x2fec>)
  102f98:	1c21      	mov	r1, r4		(add r1, r4, #0)
  102f9a:	220b      	mov	r2, #11
  102f9c:	fbc8f000 	bl	103730 <memCpy>
  102fa0:	9a10      	ldr	r2, [sp, #64]
  102fa2:	2310      	mov	r3, #16
  102fa4:	72e3      	strb	r3, [r4, #11]
  102fa6:	2300      	mov	r3, #0
  102fa8:	930a      	str	r3, [sp, #40]
  102faa:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102fac:	0c13      	lsr	r3, r2, #16
  102fae:	82a3      	strh	r3, [r4, #20]
  102fb0:	8362      	strh	r2, [r4, #26]
  102fb2:	3120      	add	r1, #32
  102fb4:	2220      	mov	r2, #32
  102fb6:	1c20      	mov	r0, r4		(add r0, r4, #0)
  102fb8:	fbbaf000 	bl	103730 <memCpy>
  102fbc:	1c29      	mov	r1, r5		(add r1, r5, #0)
  102fbe:	6838      	ldr	r0, [r7, #0]
  102fc0:	fda8f7fd 	bl	100b14 <part_relSect>
  102fc4:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102fc6:	f98bf7fe 	bl	1012e0 <fat_giveEocMarker>
  102fca:	9901      	ldr	r1, [sp, #4]
  102fcc:	1c02      	mov	r2, r0		(add r2, r0, #0)
  102fce:	1c38      	mov	r0, r7		(add r0, r7, #0)
  102fd0:	fb86f7fe 	bl	1016e0 <fat_setNextClusterAddress>
  102fd4:	2000      	mov	r0, #0
  102fd6:	e002      	b	102fde <mkdir+0x166>
  102fd8:	2a01      	cmp	r2, #1
  102fda:	d8d7      	bhi	102f8c <mkdir+0x114>
  102fdc:	e7d4      	b	102f88 <mkdir+0x110>
  102fde:	b011      	add	sp, #68
  102fe0:	bcf0      	pop	{r4, r5, r6, r7}
  102fe2:	bc02      	pop	{r1}
  102fe4:	4708      	bx	r1
  102fe6:	0000      	lsl	r0, r0, #0
  102fe8:	40cc      	lsr	r4, r1
  102fea:	0010      	lsl	r0, r2, #0
  102fec:	40d8      	lsr	r0, r3
  102fee:	0010      	lsl	r0, r2, #0

00102ff0 <rmfile>:
  102ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  102ff2:	b088      	sub	sp, #32
  102ff4:	aa06      	add	r2, sp, #24
  102ff6:	2300      	mov	r3, #0
  102ff8:	1c07      	mov	r7, r0		(add r7, r0, #0)
  102ffa:	f84bf7fe 	bl	101094 <fs_findFile>
  102ffe:	0600      	lsl	r0, r0, #24
  103000:	1600      	asr	r0, r0, #24
  103002:	2801      	cmp	r0, #1
  103004:	d002      	beq	10300c <rmfile+0x1c>
  103006:	2001      	mov	r0, #1
  103008:	4240      	neg	r0, r0
  10300a:	e02a      	b	103062 <rmfile+0x72>
  10300c:	2202      	mov	r2, #2
  10300e:	9906      	ldr	r1, [sp, #24]
  103010:	6838      	ldr	r0, [r7, #0]
  103012:	fdd1f7fd 	bl	100bb8 <part_getSect>
  103016:	466b      	mov	r3, sp
  103018:	7f19      	ldrb	r1, [r3, #28]
  10301a:	0149      	lsl	r1, r1, #5
  10301c:	3114      	add	r1, #20
  10301e:	1c05      	mov	r5, r0		(add r5, r0, #0)
  103020:	f8bcf000 	bl	10319c <ex_getb16>
  103024:	466b      	mov	r3, sp
  103026:	7f19      	ldrb	r1, [r3, #28]
  103028:	0149      	lsl	r1, r1, #5
  10302a:	0404      	lsl	r4, r0, #16
  10302c:	311a      	add	r1, #26
  10302e:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103030:	f8b4f000 	bl	10319c <ex_getb16>
  103034:	466b      	mov	r3, sp
  103036:	7f1a      	ldrb	r2, [r3, #28]
  103038:	231b      	mov	r3, #27
  10303a:	0152      	lsl	r2, r2, #5
  10303c:	425b      	neg	r3, r3
  10303e:	5553      	strb	r3, [r2, r5]
  103040:	1c06      	mov	r6, r0		(add r6, r0, #0)
  103042:	1c29      	mov	r1, r5		(add r1, r5, #0)
  103044:	6838      	ldr	r0, [r7, #0]
  103046:	fd65f7fd 	bl	100b14 <part_relSect>
  10304a:	2300      	mov	r3, #0
  10304c:	4669      	mov	r1, sp
  10304e:	700b      	strb	r3, [r1, #0]
  103050:	19a4      	add	r4, r4, r6
  103052:	1c38      	mov	r0, r7		(add r0, r7, #0)
  103054:	9301      	str	r3, [sp, #4]
  103056:	9304      	str	r3, [sp, #16]
  103058:	9302      	str	r3, [sp, #8]
  10305a:	9403      	str	r4, [sp, #12]
  10305c:	fbcaf7fe 	bl	1017f4 <fat_unlinkClusterChain>
  103060:	2000      	mov	r0, #0
  103062:	b008      	add	sp, #32
  103064:	bcf0      	pop	{r4, r5, r6, r7}
  103066:	bc02      	pop	{r1}
  103068:	4708      	bx	r1
	...

0010306c <listFiles>:
  10306c:	b5f0      	push	{r4, r5, r6, r7, lr}
  10306e:	4c48      	ldr	r4, [pc, #288]	(103190 <.text+0x3190>)
  103070:	780b      	ldrb	r3, [r1, #0]
  103072:	44a5      	add	sp, r4
  103074:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103076:	2b2f      	cmp	r3, #47
  103078:	d11a      	bne	1030b0 <listFiles+0x44>
  10307a:	784b      	ldrb	r3, [r1, #1]
  10307c:	2b00      	cmp	r3, #0
  10307e:	d117      	bne	1030b0 <listFiles+0x44>
  103080:	1c03      	mov	r3, r0		(add r3, r0, #0)
  103082:	333c      	add	r3, #60
  103084:	781b      	ldrb	r3, [r3, #0]
  103086:	3b01      	sub	r3, #1
  103088:	061b      	lsl	r3, r3, #24
  10308a:	0e1b      	lsr	r3, r3, #24
  10308c:	2b01      	cmp	r3, #1
  10308e:	d875      	bhi	10317c <listFiles+0x110>
  103090:	2500      	mov	r5, #0
  103092:	6ae1      	ldr	r1, [r4, #44]
  103094:	6820      	ldr	r0, [r4, #0]
  103096:	1869      	add	r1, r5, r1
  103098:	aa01      	add	r2, sp, #4
  10309a:	919d      	str	r1, [sp, #628]
  10309c:	fd44f7fd 	bl	100b28 <part_readBuf>
  1030a0:	1c6b      	add	r3, r5, #1
  1030a2:	041b      	lsl	r3, r3, #16
  1030a4:	0c1d      	lsr	r5, r3, #16
  1030a6:	89a3      	ldrh	r3, [r4, #12]
  1030a8:	091b      	lsr	r3, r3, #4
  1030aa:	429d      	cmp	r5, r3
  1030ac:	d866      	bhi	10317c <listFiles+0x110>
  1030ae:	e7f0      	b	103092 <listFiles+0x26>
  1030b0:	ad9d      	add	r5, sp, #628
  1030b2:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1030b4:	1c2a      	mov	r2, r5		(add r2, r5, #0)
  1030b6:	2300      	mov	r3, #0
  1030b8:	ffecf7fd 	bl	101094 <fs_findFile>
  1030bc:	0600      	lsl	r0, r0, #24
  1030be:	1600      	asr	r0, r0, #24
  1030c0:	2802      	cmp	r0, #2
  1030c2:	d002      	beq	1030ca <listFiles+0x5e>
  1030c4:	2001      	mov	r0, #1
  1030c6:	4240      	neg	r0, r0
  1030c8:	e05b      	b	103182 <listFiles+0x116>
  1030ca:	999d      	ldr	r1, [sp, #628]
  1030cc:	aa01      	add	r2, sp, #4
  1030ce:	6820      	ldr	r0, [r4, #0]
  1030d0:	fd2af7fd 	bl	100b28 <part_readBuf>
  1030d4:	792b      	ldrb	r3, [r5, #4]
  1030d6:	a995      	add	r1, sp, #596
  1030d8:	a801      	add	r0, sp, #4
  1030da:	015b      	lsl	r3, r3, #5
  1030dc:	181b      	add	r3, r3, r0
  1030de:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  1030e0:	cbe0      	ldmia	r3!,{r5, r6, r7}
  1030e2:	c2e0      	stmia	r2!,{r5, r6, r7}
  1030e4:	cb61      	ldmia	r3!,{r0, r5, r6}
  1030e6:	c261      	stmia	r2!,{r0, r5, r6}
  1030e8:	cb81      	ldmia	r3!,{r0, r7}
  1030ea:	c281      	stmia	r2!,{r0, r7}
  1030ec:	8a8a      	ldrh	r2, [r1, #20]
  1030ee:	8b4b      	ldrh	r3, [r1, #26]
  1030f0:	0412      	lsl	r2, r2, #16
  1030f2:	18d2      	add	r2, r2, r3
  1030f4:	2301      	mov	r3, #1
  1030f6:	425b      	neg	r3, r3
  1030f8:	938d      	str	r3, [sp, #564]
  1030fa:	928f      	str	r2, [sp, #572]
  1030fc:	ab81      	add	r3, sp, #516
  1030fe:	2210      	mov	r2, #16
  103100:	2600      	mov	r6, #0
  103102:	72da      	strb	r2, [r3, #11]
  103104:	948b      	str	r4, [sp, #556]
  103106:	9600      	str	r6, [sp, #0]
  103108:	e02e      	b	103168 <listFiles+0xfc>
  10310a:	4822      	ldr	r0, [pc, #136]	(103194 <.text+0x3194>)
  10310c:	9900      	ldr	r1, [sp, #0]
  10310e:	f997f000 	bl	103440 <efsl_debug_printf_arm>
  103112:	2400      	mov	r4, #0
  103114:	a995      	add	r1, sp, #596
  103116:	aa01      	add	r2, sp, #4
  103118:	18a3      	add	r3, r4, r2
  10311a:	1c0a      	mov	r2, r1		(add r2, r1, #0)
  10311c:	cba1      	ldmia	r3!,{r0, r5, r7}
  10311e:	c2a1      	stmia	r2!,{r0, r5, r7}
  103120:	cba1      	ldmia	r3!,{r0, r5, r7}
  103122:	c2a1      	stmia	r2!,{r0, r5, r7}
  103124:	cba0      	ldmia	r3!,{r5, r7}
  103126:	c2a0      	stmia	r2!,{r5, r7}
  103128:	7acb      	ldrb	r3, [r1, #11]
  10312a:	220f      	mov	r2, #15
  10312c:	4013      	and	r3, r2
  10312e:	2b0f      	cmp	r3, #15
  103130:	d012      	beq	103158 <listFiles+0xec>
  103132:	780a      	ldrb	r2, [r1, #0]
  103134:	1c13      	mov	r3, r2		(add r3, r2, #0)
  103136:	3b41      	sub	r3, #65
  103138:	061b      	lsl	r3, r3, #24
  10313a:	0e1b      	lsr	r3, r3, #24
  10313c:	2b19      	cmp	r3, #25
  10313e:	d905      	bls	10314c <listFiles+0xe0>
  103140:	1c13      	mov	r3, r2		(add r3, r2, #0)
  103142:	3b30      	sub	r3, #48
  103144:	061b      	lsl	r3, r3, #24
  103146:	0e1b      	lsr	r3, r3, #24
  103148:	2b09      	cmp	r3, #9
  10314a:	d805      	bhi	103158 <listFiles+0xec>
  10314c:	4812      	ldr	r0, [pc, #72]	(103198 <.text+0x3198>)
  10314e:	f977f000 	bl	103440 <efsl_debug_printf_arm>
  103152:	1c73      	add	r3, r6, #1
  103154:	041b      	lsl	r3, r3, #16
  103156:	0c1e      	lsr	r6, r3, #16
  103158:	2380      	mov	r3, #128
  10315a:	3420      	add	r4, #32
  10315c:	009b      	lsl	r3, r3, #2
  10315e:	429c      	cmp	r4, r3
  103160:	d1d8      	bne	103114 <listFiles+0xa8>
  103162:	9800      	ldr	r0, [sp, #0]
  103164:	1900      	add	r0, r0, r4
  103166:	9000      	str	r0, [sp, #0]
  103168:	2280      	mov	r2, #128
  10316a:	a881      	add	r0, sp, #516
  10316c:	9900      	ldr	r1, [sp, #0]
  10316e:	0092      	lsl	r2, r2, #2
  103170:	ab01      	add	r3, sp, #4
  103172:	fd23f7fe 	bl	101bbc <file_fread>
  103176:	2800      	cmp	r0, #0
  103178:	d1c7      	bne	10310a <listFiles+0x9e>
  10317a:	e000      	b	10317e <listFiles+0x112>
  10317c:	2600      	mov	r6, #0
  10317e:	0433      	lsl	r3, r6, #16
  103180:	1418      	asr	r0, r3, #16
  103182:	239f      	mov	r3, #159
  103184:	009b      	lsl	r3, r3, #2
  103186:	449d      	add	sp, r3
  103188:	bcf0      	pop	{r4, r5, r6, r7}
  10318a:	bc02      	pop	{r1}
  10318c:	4708      	bx	r1
  10318e:	0000      	lsl	r0, r0, #0
  103190:	fd84      	second half of BL instruction 0xfd84
  103192:	ffff      	second half of BL instruction 0xffff
  103194:	40e4      	lsr	r4, r4
  103196:	0010      	lsl	r0, r2, #0
  103198:	4110      	asr	r0, r2
  10319a:	0010      	lsl	r0, r2, #0

0010319c <ex_getb16>:
  10319c:	1840      	add	r0, r0, r1
  10319e:	7843      	ldrb	r3, [r0, #1]
  1031a0:	7800      	ldrb	r0, [r0, #0]
  1031a2:	021b      	lsl	r3, r3, #8
  1031a4:	18c0      	add	r0, r0, r3
  1031a6:	0400      	lsl	r0, r0, #16
  1031a8:	0c00      	lsr	r0, r0, #16
  1031aa:	4770      	bx	lr

001031ac <ex_getb32>:
  1031ac:	1840      	add	r0, r0, r1
  1031ae:	78c2      	ldrb	r2, [r0, #3]
  1031b0:	7883      	ldrb	r3, [r0, #2]
  1031b2:	0612      	lsl	r2, r2, #24
  1031b4:	041b      	lsl	r3, r3, #16
  1031b6:	7841      	ldrb	r1, [r0, #1]
  1031b8:	18d2      	add	r2, r2, r3
  1031ba:	7803      	ldrb	r3, [r0, #0]
  1031bc:	0209      	lsl	r1, r1, #8
  1031be:	18d2      	add	r2, r2, r3
  1031c0:	1889      	add	r1, r1, r2
  1031c2:	1c08      	mov	r0, r1		(add r0, r1, #0)
  1031c4:	4770      	bx	lr
	...

001031c8 <ex_setb16>:
  1031c8:	1840      	add	r0, r0, r1
  1031ca:	7002      	strb	r2, [r0, #0]
  1031cc:	0a12      	lsr	r2, r2, #8
  1031ce:	7042      	strb	r2, [r0, #1]
  1031d0:	4770      	bx	lr
	...

001031d4 <ex_setb32>:
  1031d4:	1840      	add	r0, r0, r1
  1031d6:	0a13      	lsr	r3, r2, #8
  1031d8:	7002      	strb	r2, [r0, #0]
  1031da:	7043      	strb	r3, [r0, #1]
  1031dc:	0c13      	lsr	r3, r2, #16
  1031de:	0e12      	lsr	r2, r2, #24
  1031e0:	7083      	strb	r3, [r0, #2]
  1031e2:	70c2      	strb	r2, [r0, #3]
  1031e4:	4770      	bx	lr
	...

001031e8 <ex_getPartitionField>:
  1031e8:	b530      	push	{r4, r5, lr}
  1031ea:	1884      	add	r4, r0, r2
  1031ec:	7823      	ldrb	r3, [r4, #0]
  1031ee:	700b      	strb	r3, [r1, #0]
  1031f0:	7863      	ldrb	r3, [r4, #1]
  1031f2:	704b      	strb	r3, [r1, #1]
  1031f4:	78a3      	ldrb	r3, [r4, #2]
  1031f6:	708b      	strb	r3, [r1, #2]
  1031f8:	78e3      	ldrb	r3, [r4, #3]
  1031fa:	70cb      	strb	r3, [r1, #3]
  1031fc:	7923      	ldrb	r3, [r4, #4]
  1031fe:	710b      	strb	r3, [r1, #4]
  103200:	7963      	ldrb	r3, [r4, #5]
  103202:	714b      	strb	r3, [r1, #5]
  103204:	79a3      	ldrb	r3, [r4, #6]
  103206:	718b      	strb	r3, [r1, #6]
  103208:	79e3      	ldrb	r3, [r4, #7]
  10320a:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  10320c:	71cb      	strb	r3, [r1, #7]
  10320e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103210:	2108      	mov	r1, #8
  103212:	ffcbf7ff 	bl	1031ac <ex_getb32>
  103216:	210c      	mov	r1, #12
  103218:	60a8      	str	r0, [r5, #8]
  10321a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10321c:	ffc6f7ff 	bl	1031ac <ex_getb32>
  103220:	60e8      	str	r0, [r5, #12]
  103222:	bc30      	pop	{r4, r5}
  103224:	bc01      	pop	{r0}
  103226:	4700      	bx	r0

00103228 <ex_setPartitionField>:
  103228:	4770      	bx	lr
  10322a:	46c0      	nop			(mov r8, r8)

0010322c <ls_isValidFileEntry>:
  10322c:	7803      	ldrb	r3, [r0, #0]
  10322e:	2b00      	cmp	r3, #0
  103230:	d00f      	beq	103252 <ls_isValidFileEntry+0x26>
  103232:	2be5      	cmp	r3, #229
  103234:	d00d      	beq	103252 <ls_isValidFileEntry+0x26>
  103236:	2b2e      	cmp	r3, #46
  103238:	d00b      	beq	103252 <ls_isValidFileEntry+0x26>
  10323a:	7c03      	ldrb	r3, [r0, #16]
  10323c:	220f      	mov	r2, #15
  10323e:	4013      	and	r3, r2
  103240:	2100      	mov	r1, #0
  103242:	2b0f      	cmp	r3, #15
  103244:	d100      	bne	103248 <ls_isValidFileEntry+0x1c>
  103246:	2101      	mov	r1, #1
  103248:	2301      	mov	r3, #1
  10324a:	404b      	eor	r3, r1
  10324c:	061b      	lsl	r3, r3, #24
  10324e:	0e18      	lsr	r0, r3, #24
  103250:	e000      	b	103254 <ls_isValidFileEntry+0x28>
  103252:	2000      	mov	r0, #0
  103254:	4770      	bx	lr
	...

00103258 <ls_fileEntryToDirListEntry>:
  103258:	b530      	push	{r4, r5, lr}
  10325a:	0412      	lsl	r2, r2, #16
  10325c:	23f0      	mov	r3, #240
  10325e:	1c0c      	mov	r4, r1		(add r4, r1, #0)
  103260:	005b      	lsl	r3, r3, #1
  103262:	0c11      	lsr	r1, r2, #16
  103264:	1c05      	mov	r5, r0		(add r5, r0, #0)
  103266:	4299      	cmp	r1, r3
  103268:	d810      	bhi	10328c <ls_fileEntryToDirListEntry+0x34>
  10326a:	231f      	mov	r3, #31
  10326c:	4219      	tst	r1, r3
  10326e:	d10d      	bne	10328c <ls_fileEntryToDirListEntry+0x34>
  103270:	1864      	add	r4, r4, r1
  103272:	1c01      	mov	r1, r0		(add r1, r0, #0)
  103274:	3108      	add	r1, #8
  103276:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103278:	220c      	mov	r2, #12
  10327a:	fa59f000 	bl	103730 <memCpy>
  10327e:	7ae3      	ldrb	r3, [r4, #11]
  103280:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103282:	762b      	strb	r3, [r5, #24]
  103284:	211c      	mov	r1, #28
  103286:	ff91f7ff 	bl	1031ac <ex_getb32>
  10328a:	6168      	str	r0, [r5, #20]
  10328c:	bc30      	pop	{r4, r5}
  10328e:	bc01      	pop	{r0}
  103290:	4700      	bx	r0
	...

00103294 <ls_getRootAreaEntry>:
  103294:	b530      	push	{r4, r5, lr}
  103296:	6802      	ldr	r2, [r0, #0]
  103298:	1c13      	mov	r3, r2		(add r3, r2, #0)
  10329a:	333c      	add	r3, #60
  10329c:	781b      	ldrb	r3, [r3, #0]
  10329e:	3b01      	sub	r3, #1
  1032a0:	061b      	lsl	r3, r3, #24
  1032a2:	0e1b      	lsr	r3, r3, #24
  1032a4:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1032a6:	2b01      	cmp	r3, #1
  1032a8:	d81a      	bhi	1032e0 <ls_getRootAreaEntry+0x4c>
  1032aa:	88c1      	ldrh	r1, [r0, #6]
  1032ac:	8993      	ldrh	r3, [r2, #12]
  1032ae:	428b      	cmp	r3, r1
  1032b0:	d916      	bls	1032e0 <ls_getRootAreaEntry+0x4c>
  1032b2:	6ad3      	ldr	r3, [r2, #44]
  1032b4:	0909      	lsr	r1, r1, #4
  1032b6:	18c9      	add	r1, r1, r3
  1032b8:	6810      	ldr	r0, [r2, #0]
  1032ba:	2201      	mov	r2, #1
  1032bc:	fc7cf7fd 	bl	100bb8 <part_getSect>
  1032c0:	88ea      	ldrh	r2, [r5, #6]
  1032c2:	230f      	mov	r3, #15
  1032c4:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1032c6:	401a      	and	r2, r3
  1032c8:	0152      	lsl	r2, r2, #5
  1032ca:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1032cc:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1032ce:	ffc3f7ff 	bl	103258 <ls_fileEntryToDirListEntry>
  1032d2:	682b      	ldr	r3, [r5, #0]
  1032d4:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1032d6:	6818      	ldr	r0, [r3, #0]
  1032d8:	fc1cf7fd 	bl	100b14 <part_relSect>
  1032dc:	2000      	mov	r0, #0
  1032de:	e001      	b	1032e4 <ls_getRootAreaEntry+0x50>
  1032e0:	2001      	mov	r0, #1
  1032e2:	4240      	neg	r0, r0
  1032e4:	bc30      	pop	{r4, r5}
  1032e6:	bc02      	pop	{r1}
  1032e8:	4708      	bx	r1
	...

001032ec <ls_getRealDirEntry>:
  1032ec:	b570      	push	{r4, r5, r6, lr}
  1032ee:	6a83      	ldr	r3, [r0, #40]
  1032f0:	1c06      	mov	r6, r0		(add r6, r0, #0)
  1032f2:	2b01      	cmp	r3, #1
  1032f4:	d931      	bls	10335a <ls_getRealDirEntry+0x6e>
  1032f6:	6804      	ldr	r4, [r0, #0]
  1032f8:	79a1      	ldrb	r1, [r4, #6]
  1032fa:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1032fc:	0109      	lsl	r1, r1, #4
  1032fe:	88c0      	ldrh	r0, [r0, #6]
  103300:	fc44f000 	bl	103b8c <__aeabi_idiv>
  103304:	351c      	add	r5, #28
  103306:	1c02      	mov	r2, r0		(add r2, r0, #0)
  103308:	1c29      	mov	r1, r5		(add r1, r5, #0)
  10330a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10330c:	f90ef7fe 	bl	10152c <fat_LogicToDiscCluster>
  103310:	0400      	lsl	r0, r0, #16
  103312:	2800      	cmp	r0, #0
  103314:	d121      	bne	10335a <ls_getRealDirEntry+0x6e>
  103316:	6830      	ldr	r0, [r6, #0]
  103318:	6a71      	ldr	r1, [r6, #36]
  10331a:	6805      	ldr	r5, [r0, #0]
  10331c:	fd22f7fd 	bl	100d64 <fs_clusterToSector>
  103320:	6833      	ldr	r3, [r6, #0]
  103322:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103324:	88f0      	ldrh	r0, [r6, #6]
  103326:	7999      	ldrb	r1, [r3, #6]
  103328:	0900      	lsr	r0, r0, #4
  10332a:	fc81f000 	bl	103c30 <__modsi3>
  10332e:	1824      	add	r4, r4, r0
  103330:	1c21      	mov	r1, r4		(add r1, r4, #0)
  103332:	2201      	mov	r2, #1
  103334:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103336:	fc3ff7fd 	bl	100bb8 <part_getSect>
  10333a:	88f2      	ldrh	r2, [r6, #6]
  10333c:	230f      	mov	r3, #15
  10333e:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103340:	401a      	and	r2, r3
  103342:	0152      	lsl	r2, r2, #5
  103344:	1c30      	mov	r0, r6		(add r0, r6, #0)
  103346:	1c21      	mov	r1, r4		(add r1, r4, #0)
  103348:	ff86f7ff 	bl	103258 <ls_fileEntryToDirListEntry>
  10334c:	6833      	ldr	r3, [r6, #0]
  10334e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  103350:	6818      	ldr	r0, [r3, #0]
  103352:	fbdff7fd 	bl	100b14 <part_relSect>
  103356:	2000      	mov	r0, #0
  103358:	e001      	b	10335e <ls_getRealDirEntry+0x72>
  10335a:	2001      	mov	r0, #1
  10335c:	4240      	neg	r0, r0
  10335e:	bc70      	pop	{r4, r5, r6}
  103360:	bc02      	pop	{r1}
  103362:	4708      	bx	r1

00103364 <ls_getDirEntry>:
  103364:	b500      	push	{lr}
  103366:	6a83      	ldr	r3, [r0, #40]
  103368:	2b01      	cmp	r3, #1
  10336a:	d102      	bne	103372 <ls_getDirEntry+0xe>
  10336c:	ff92f7ff 	bl	103294 <ls_getRootAreaEntry>
  103370:	e006      	b	103380 <ls_getDirEntry+0x1c>
  103372:	2b00      	cmp	r3, #0
  103374:	d102      	bne	10337c <ls_getDirEntry+0x18>
  103376:	2001      	mov	r0, #1
  103378:	4240      	neg	r0, r0
  10337a:	e003      	b	103384 <ls_getDirEntry+0x20>
  10337c:	ffb6f7ff 	bl	1032ec <ls_getRealDirEntry>
  103380:	0600      	lsl	r0, r0, #24
  103382:	1600      	asr	r0, r0, #24
  103384:	bc02      	pop	{r1}
  103386:	4708      	bx	r1

00103388 <ls_getNext>:
  103388:	b510      	push	{r4, lr}
  10338a:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10338c:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10338e:	ffe9f7ff 	bl	103364 <ls_getDirEntry>
  103392:	0600      	lsl	r0, r0, #24
  103394:	2800      	cmp	r0, #0
  103396:	d002      	beq	10339e <ls_getNext+0x16>
  103398:	2001      	mov	r0, #1
  10339a:	4240      	neg	r0, r0
  10339c:	e00c      	b	1033b8 <ls_getNext+0x30>
  10339e:	88e3      	ldrh	r3, [r4, #6]
  1033a0:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1033a2:	3301      	add	r3, #1
  1033a4:	80e3      	strh	r3, [r4, #6]
  1033a6:	3008      	add	r0, #8
  1033a8:	ff40f7ff 	bl	10322c <ls_isValidFileEntry>
  1033ac:	2800      	cmp	r0, #0
  1033ae:	d0ed      	beq	10338c <ls_getNext+0x4>
  1033b0:	88a3      	ldrh	r3, [r4, #4]
  1033b2:	3301      	add	r3, #1
  1033b4:	80a3      	strh	r3, [r4, #4]
  1033b6:	2000      	mov	r0, #0
  1033b8:	bc10      	pop	{r4}
  1033ba:	bc02      	pop	{r1}
  1033bc:	4708      	bx	r1
	...

001033c0 <ls_openDir>:
  1033c0:	b510      	push	{r4, lr}
  1033c2:	b083      	sub	sp, #12
  1033c4:	6001      	str	r1, [r0, #0]
  1033c6:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1033c8:	ab02      	add	r3, sp, #8
  1033ca:	1c08      	mov	r0, r1		(add r0, r1, #0)
  1033cc:	1c11      	mov	r1, r2		(add r1, r2, #0)
  1033ce:	466a      	mov	r2, sp
  1033d0:	fe60f7fd 	bl	101094 <fs_findFile>
  1033d4:	0600      	lsl	r0, r0, #24
  1033d6:	1600      	asr	r0, r0, #24
  1033d8:	2802      	cmp	r0, #2
  1033da:	d002      	beq	1033e2 <ls_openDir+0x22>
  1033dc:	2001      	mov	r0, #1
  1033de:	4240      	neg	r0, r0
  1033e0:	e010      	b	103404 <ls_openDir+0x44>
  1033e2:	1c21      	mov	r1, r4		(add r1, r4, #0)
  1033e4:	6820      	ldr	r0, [r4, #0]
  1033e6:	311c      	add	r1, #28
  1033e8:	9a02      	ldr	r2, [sp, #8]
  1033ea:	fd05f7fd 	bl	100df8 <fs_initClusterChain>
  1033ee:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1033f0:	3008      	add	r0, #8
  1033f2:	2114      	mov	r1, #20
  1033f4:	f9a8f000 	bl	103748 <memClr>
  1033f8:	2300      	mov	r3, #0
  1033fa:	80e3      	strh	r3, [r4, #6]
  1033fc:	2301      	mov	r3, #1
  1033fe:	425b      	neg	r3, r3
  103400:	80a3      	strh	r3, [r4, #4]
  103402:	2000      	mov	r0, #0
  103404:	b003      	add	sp, #12
  103406:	bc10      	pop	{r4}
  103408:	bc02      	pop	{r1}
  10340a:	4708      	bx	r1

0010340c <efsl_debug_devopen_arm>:
  10340c:	4b01      	ldr	r3, [pc, #4]	(103414 <.text+0x3414>)
  10340e:	6018      	str	r0, [r3, #0]
  103410:	4770      	bx	lr
  103412:	0000      	lsl	r0, r0, #0
  103414:	00dc      	lsl	r4, r3, #3
  103416:	0020      	lsl	r0, r4, #0

00103418 <myputchar>:
  103418:	b510      	push	{r4, lr}
  10341a:	0600      	lsl	r0, r0, #24
  10341c:	0e04      	lsr	r4, r0, #24
  10341e:	2c0a      	cmp	r4, #10
  103420:	d104      	bne	10342c <myputchar+0x14>
  103422:	4b06      	ldr	r3, [pc, #24]	(10343c <.text+0x343c>)
  103424:	200d      	mov	r0, #13
  103426:	681b      	ldr	r3, [r3, #0]
  103428:	f8b7f000 	bl	10359a <efsl_debug_printf_arm+0x15a>
  10342c:	4b03      	ldr	r3, [pc, #12]	(10343c <.text+0x343c>)
  10342e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103430:	681b      	ldr	r3, [r3, #0]
  103432:	f8b2f000 	bl	10359a <efsl_debug_printf_arm+0x15a>
  103436:	bc10      	pop	{r4}
  103438:	bc01      	pop	{r0}
  10343a:	4700      	bx	r0
  10343c:	00dc      	lsl	r4, r3, #3
  10343e:	0020      	lsl	r0, r4, #0

00103440 <efsl_debug_printf_arm>:
  103440:	b40f      	push	{r0, r1, r2, r3}
  103442:	b5f0      	push	{r4, r5, r6, r7, lr}
  103444:	b086      	sub	sp, #24
  103446:	ab0b      	add	r3, sp, #44
  103448:	cb20      	ldmia	r3!,{r5}
  10344a:	9305      	str	r3, [sp, #20]
  10344c:	e004      	b	103458 <efsl_debug_printf_arm+0x18>
  10344e:	2800      	cmp	r0, #0
  103450:	d100      	bne	103454 <efsl_debug_printf_arm+0x14>
  103452:	e09d      	b	103590 <efsl_debug_printf_arm+0x150>
  103454:	ffe0f7ff 	bl	103418 <myputchar>
  103458:	7828      	ldrb	r0, [r5, #0]
  10345a:	3501      	add	r5, #1
  10345c:	2825      	cmp	r0, #37
  10345e:	d1f6      	bne	10344e <efsl_debug_printf_arm+0xe>
  103460:	7828      	ldrb	r0, [r5, #0]
  103462:	3501      	add	r5, #1
  103464:	2830      	cmp	r0, #48
  103466:	d004      	beq	103472 <efsl_debug_printf_arm+0x32>
  103468:	2820      	cmp	r0, #32
  10346a:	d002      	beq	103472 <efsl_debug_printf_arm+0x32>
  10346c:	2200      	mov	r2, #0
  10346e:	9201      	str	r2, [sp, #4]
  103470:	e009      	b	103486 <efsl_debug_printf_arm+0x46>
  103472:	782a      	ldrb	r2, [r5, #0]
  103474:	1c13      	mov	r3, r2		(add r3, r2, #0)
  103476:	3b30      	sub	r3, #48
  103478:	061b      	lsl	r3, r3, #24
  10347a:	0e1f      	lsr	r7, r3, #24
  10347c:	3501      	add	r5, #1
  10347e:	2f09      	cmp	r7, #9
  103480:	d903      	bls	10348a <efsl_debug_printf_arm+0x4a>
  103482:	9001      	str	r0, [sp, #4]
  103484:	1c10      	mov	r0, r2		(add r0, r2, #0)
  103486:	2700      	mov	r7, #0
  103488:	e003      	b	103492 <efsl_debug_printf_arm+0x52>
  10348a:	782b      	ldrb	r3, [r5, #0]
  10348c:	9001      	str	r0, [sp, #4]
  10348e:	3501      	add	r5, #1
  103490:	1c18      	mov	r0, r3		(add r0, r3, #0)
  103492:	286c      	cmp	r0, #108
  103494:	d001      	beq	10349a <efsl_debug_printf_arm+0x5a>
  103496:	284c      	cmp	r0, #76
  103498:	d101      	bne	10349e <efsl_debug_printf_arm+0x5e>
  10349a:	7828      	ldrb	r0, [r5, #0]
  10349c:	3501      	add	r5, #1
  10349e:	2858      	cmp	r0, #88
  1034a0:	d03f      	beq	103522 <efsl_debug_printf_arm+0xe2>
  1034a2:	2858      	cmp	r0, #88
  1034a4:	d80d      	bhi	1034c2 <efsl_debug_printf_arm+0x82>
  1034a6:	2849      	cmp	r0, #73
  1034a8:	d02e      	beq	103508 <efsl_debug_printf_arm+0xc8>
  1034aa:	2849      	cmp	r0, #73
  1034ac:	d804      	bhi	1034b8 <efsl_debug_printf_arm+0x78>
  1034ae:	2843      	cmp	r0, #67
  1034b0:	d017      	beq	1034e2 <efsl_debug_printf_arm+0xa2>
  1034b2:	2844      	cmp	r0, #68
  1034b4:	d1ce      	bne	103454 <efsl_debug_printf_arm+0x14>
  1034b6:	e027      	b	103508 <efsl_debug_printf_arm+0xc8>
  1034b8:	2853      	cmp	r0, #83
  1034ba:	d017      	beq	1034ec <efsl_debug_printf_arm+0xac>
  1034bc:	2855      	cmp	r0, #85
  1034be:	d1c9      	bne	103454 <efsl_debug_printf_arm+0x14>
  1034c0:	e020      	b	103504 <efsl_debug_printf_arm+0xc4>
  1034c2:	2869      	cmp	r0, #105
  1034c4:	d020      	beq	103508 <efsl_debug_printf_arm+0xc8>
  1034c6:	2869      	cmp	r0, #105
  1034c8:	d804      	bhi	1034d4 <efsl_debug_printf_arm+0x94>
  1034ca:	2863      	cmp	r0, #99
  1034cc:	d009      	beq	1034e2 <efsl_debug_printf_arm+0xa2>
  1034ce:	2864      	cmp	r0, #100
  1034d0:	d1c0      	bne	103454 <efsl_debug_printf_arm+0x14>
  1034d2:	e019      	b	103508 <efsl_debug_printf_arm+0xc8>
  1034d4:	2875      	cmp	r0, #117
  1034d6:	d015      	beq	103504 <efsl_debug_printf_arm+0xc4>
  1034d8:	2878      	cmp	r0, #120
  1034da:	d022      	beq	103522 <efsl_debug_printf_arm+0xe2>
  1034dc:	2873      	cmp	r0, #115
  1034de:	d1b9      	bne	103454 <efsl_debug_printf_arm+0x14>
  1034e0:	e004      	b	1034ec <efsl_debug_printf_arm+0xac>
  1034e2:	9a05      	ldr	r2, [sp, #20]
  1034e4:	7810      	ldrb	r0, [r2, #0]
  1034e6:	1d13      	add	r3, r2, #4
  1034e8:	9305      	str	r3, [sp, #20]
  1034ea:	e7b3      	b	103454 <efsl_debug_printf_arm+0x14>
  1034ec:	9a05      	ldr	r2, [sp, #20]
  1034ee:	6814      	ldr	r4, [r2, #0]
  1034f0:	1d13      	add	r3, r2, #4
  1034f2:	9305      	str	r3, [sp, #20]
  1034f4:	e002      	b	1034fc <efsl_debug_printf_arm+0xbc>
  1034f6:	ff8ff7ff 	bl	103418 <myputchar>
  1034fa:	3401      	add	r4, #1
  1034fc:	7820      	ldrb	r0, [r4, #0]
  1034fe:	2800      	cmp	r0, #0
  103500:	d1f9      	bne	1034f6 <efsl_debug_printf_arm+0xb6>
  103502:	e7a9      	b	103458 <efsl_debug_printf_arm+0x18>
  103504:	220a      	mov	r2, #10
  103506:	e00d      	b	103524 <efsl_debug_printf_arm+0xe4>
  103508:	9a05      	ldr	r2, [sp, #20]
  10350a:	1d13      	add	r3, r2, #4
  10350c:	9305      	str	r3, [sp, #20]
  10350e:	6814      	ldr	r4, [r2, #0]
  103510:	2c00      	cmp	r4, #0
  103512:	da03      	bge	10351c <efsl_debug_printf_arm+0xdc>
  103514:	202d      	mov	r0, #45
  103516:	4264      	neg	r4, r4
  103518:	ff7ef7ff 	bl	103418 <myputchar>
  10351c:	230a      	mov	r3, #10
  10351e:	9300      	str	r3, [sp, #0]
  103520:	e005      	b	10352e <efsl_debug_printf_arm+0xee>
  103522:	2210      	mov	r2, #16
  103524:	9805      	ldr	r0, [sp, #20]
  103526:	1d03      	add	r3, r0, #4
  103528:	9200      	str	r2, [sp, #0]
  10352a:	9305      	str	r3, [sp, #20]
  10352c:	6804      	ldr	r4, [r0, #0]
  10352e:	2200      	mov	r2, #0
  103530:	ab02      	add	r3, sp, #8
  103532:	466e      	mov	r6, sp
  103534:	72da      	strb	r2, [r3, #11]
  103536:	3613      	add	r6, #19
  103538:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10353a:	9900      	ldr	r1, [sp, #0]
  10353c:	f9e2f7fd 	bl	100904 <__umodsi3>
  103540:	3030      	add	r0, #48
  103542:	0600      	lsl	r0, r0, #24
  103544:	0e00      	lsr	r0, r0, #24
  103546:	2839      	cmp	r0, #57
  103548:	d902      	bls	103550 <efsl_debug_printf_arm+0x110>
  10354a:	1dc3      	add	r3, r0, #7
  10354c:	061b      	lsl	r3, r3, #24
  10354e:	0e18      	lsr	r0, r3, #24
  103550:	3e01      	sub	r6, #1
  103552:	7030      	strb	r0, [r6, #0]
  103554:	9900      	ldr	r1, [sp, #0]
  103556:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103558:	f98ef7fd 	bl	100878 <__aeabi_uidiv>
  10355c:	1c04      	mov	r4, r0		(add r4, r0, #0)
  10355e:	2f00      	cmp	r7, #0
  103560:	d002      	beq	103568 <efsl_debug_printf_arm+0x128>
  103562:	1e7b      	sub	r3, r7, #1
  103564:	061b      	lsl	r3, r3, #24
  103566:	0e1f      	lsr	r7, r3, #24
  103568:	2c00      	cmp	r4, #0
  10356a:	d004      	beq	103576 <efsl_debug_printf_arm+0x136>
  10356c:	e7e4      	b	103538 <efsl_debug_printf_arm+0xf8>
  10356e:	466b      	mov	r3, sp
  103570:	791b      	ldrb	r3, [r3, #4]
  103572:	3e01      	sub	r6, #1
  103574:	7033      	strb	r3, [r6, #0]
  103576:	1e7b      	sub	r3, r7, #1
  103578:	061b      	lsl	r3, r3, #24
  10357a:	0e1f      	lsr	r7, r3, #24
  10357c:	2fff      	cmp	r7, #255
  10357e:	d1f6      	bne	10356e <efsl_debug_printf_arm+0x12e>
  103580:	e002      	b	103588 <efsl_debug_printf_arm+0x148>
  103582:	ff49f7ff 	bl	103418 <myputchar>
  103586:	3601      	add	r6, #1
  103588:	7830      	ldrb	r0, [r6, #0]
  10358a:	2800      	cmp	r0, #0
  10358c:	d1f9      	bne	103582 <efsl_debug_printf_arm+0x142>
  10358e:	e763      	b	103458 <efsl_debug_printf_arm+0x18>
  103590:	b006      	add	sp, #24
  103592:	bcf0      	pop	{r4, r5, r6, r7}
  103594:	bc08      	pop	{r3}
  103596:	b004      	add	sp, #16
  103598:	4718      	bx	r3
  10359a:	4718      	bx	r3

0010359c <if_spiSetSpeed>:
  10359c:	0600      	lsl	r0, r0, #24
  10359e:	0e00      	lsr	r0, r0, #24
  1035a0:	2801      	cmp	r0, #1
  1035a2:	d800      	bhi	1035a6 <if_spiSetSpeed+0xa>
  1035a4:	2002      	mov	r0, #2
  1035a6:	4905      	ldr	r1, [pc, #20]	(1035bc <.text+0x35bc>)
  1035a8:	4b05      	ldr	r3, [pc, #20]	(1035c0 <.text+0x35c0>)
  1035aa:	6b0a      	ldr	r2, [r1, #48]
  1035ac:	401a      	and	r2, r3
  1035ae:	2302      	mov	r3, #2
  1035b0:	425b      	neg	r3, r3
  1035b2:	4003      	and	r3, r0
  1035b4:	021b      	lsl	r3, r3, #8
  1035b6:	431a      	orr	r2, r3
  1035b8:	630a      	str	r2, [r1, #48]
  1035ba:	4770      	bx	lr
  1035bc:	0000      	lsl	r0, r0, #0
  1035be:	fffe      	second half of BL instruction 0xfffe
  1035c0:	00ff      	lsl	r7, r7, #3
  1035c2:	ffff      	second half of BL instruction 0xffff

001035c4 <if_spiSend>:
  1035c4:	0609      	lsl	r1, r1, #24
  1035c6:	0e09      	lsr	r1, r1, #24
  1035c8:	4a06      	ldr	r2, [pc, #24]	(1035e4 <.text+0x35e4>)
  1035ca:	6913      	ldr	r3, [r2, #16]
  1035cc:	0798      	lsl	r0, r3, #30
  1035ce:	d5fb      	bpl	1035c8 <if_spiSend+0x4>
  1035d0:	60d1      	str	r1, [r2, #12]
  1035d2:	4a04      	ldr	r2, [pc, #16]	(1035e4 <.text+0x35e4>)
  1035d4:	6913      	ldr	r3, [r2, #16]
  1035d6:	07d9      	lsl	r1, r3, #31
  1035d8:	d5fb      	bpl	1035d2 <if_spiSend+0xe>
  1035da:	6890      	ldr	r0, [r2, #8]
  1035dc:	0600      	lsl	r0, r0, #24
  1035de:	0e00      	lsr	r0, r0, #24
  1035e0:	4770      	bx	lr
  1035e2:	0000      	lsl	r0, r0, #0
  1035e4:	0000      	lsl	r0, r0, #0
  1035e6:	fffe      	second half of BL instruction 0xfffe

001035e8 <if_spiInit>:
  1035e8:	b570      	push	{r4, r5, r6, lr}
  1035ea:	4a1b      	ldr	r2, [pc, #108]	(103658 <.text+0x3658>)
  1035ec:	23e0      	mov	r3, #224
  1035ee:	01db      	lsl	r3, r3, #7
  1035f0:	6053      	str	r3, [r2, #4]
  1035f2:	6713      	str	r3, [r2, #112]
  1035f4:	2300      	mov	r3, #0
  1035f6:	6013      	str	r3, [r2, #0]
  1035f8:	6313      	str	r3, [r2, #48]
  1035fa:	6113      	str	r3, [r2, #16]
  1035fc:	4b17      	ldr	r3, [pc, #92]	(10365c <.text+0x365c>)
  1035fe:	4c18      	ldr	r4, [pc, #96]	(103660 <.text+0x3660>)
  103600:	2220      	mov	r2, #32
  103602:	611a      	str	r2, [r3, #16]
  103604:	2381      	mov	r3, #129
  103606:	6023      	str	r3, [r4, #0]
  103608:	2311      	mov	r3, #17
  10360a:	6063      	str	r3, [r4, #4]
  10360c:	4a15      	ldr	r2, [pc, #84]	(103664 <.text+0x3664>)
  10360e:	6863      	ldr	r3, [r4, #4]
  103610:	4013      	and	r3, r2
  103612:	6063      	str	r3, [r4, #4]
  103614:	23e0      	mov	r3, #224
  103616:	6862      	ldr	r2, [r4, #4]
  103618:	031b      	lsl	r3, r3, #12
  10361a:	431a      	orr	r2, r3
  10361c:	2501      	mov	r5, #1
  10361e:	6062      	str	r2, [r4, #4]
  103620:	1c06      	mov	r6, r0		(add r6, r0, #0)
  103622:	6325      	str	r5, [r4, #48]
  103624:	20fe      	mov	r0, #254
  103626:	ffb9f7ff 	bl	10359c <if_spiSetSpeed>
  10362a:	6025      	str	r5, [r4, #0]
  10362c:	2400      	mov	r4, #0
  10362e:	1c30      	mov	r0, r6		(add r0, r6, #0)
  103630:	21ff      	mov	r1, #255
  103632:	ffc7f7ff 	bl	1035c4 <if_spiSend>
  103636:	1c63      	add	r3, r4, #1
  103638:	061b      	lsl	r3, r3, #24
  10363a:	0e1c      	lsr	r4, r3, #24
  10363c:	2c15      	cmp	r4, #21
  10363e:	d1f6      	bne	10362e <if_spiInit+0x46>
  103640:	4b05      	ldr	r3, [pc, #20]	(103658 <.text+0x3658>)
  103642:	2280      	mov	r2, #128
  103644:	2100      	mov	r1, #0
  103646:	0112      	lsl	r2, r2, #4
  103648:	6159      	str	r1, [r3, #20]
  10364a:	6359      	str	r1, [r3, #52]
  10364c:	605a      	str	r2, [r3, #4]
  10364e:	671a      	str	r2, [r3, #112]
  103650:	6759      	str	r1, [r3, #116]
  103652:	bc70      	pop	{r4, r5, r6}
  103654:	bc01      	pop	{r0}
  103656:	4700      	bx	r0
  103658:	fffff400 	bl	ffd0465a <PMC_USBDIV+0xcfd0465a>
  10365c:	fc00      	second half of BL instruction 0xfc00
  10365e:	ffff      	second half of BL instruction 0xffff
  103660:	0000      	lsl	r0, r0, #0
  103662:	fffe      	second half of BL instruction 0xfffe
  103664:	ffff      	second half of BL instruction 0xffff
  103666:	fff0      	second half of BL instruction 0xfff0

00103668 <if_setPos>:
  103668:	2000      	mov	r0, #0
  10366a:	4770      	bx	lr

0010366c <if_writeBuf>:
  10366c:	b500      	push	{lr}
  10366e:	f9b7f000 	bl	1039e0 <sd_writeSector>
  103672:	0600      	lsl	r0, r0, #24
  103674:	1600      	asr	r0, r0, #24
  103676:	bc02      	pop	{r1}
  103678:	4708      	bx	r1
	...

0010367c <if_readBuf>:
  10367c:	b500      	push	{lr}
  10367e:	2380      	mov	r3, #128
  103680:	009b      	lsl	r3, r3, #2
  103682:	f967f000 	bl	103954 <sd_readSector>
  103686:	0600      	lsl	r0, r0, #24
  103688:	1600      	asr	r0, r0, #24
  10368a:	bc02      	pop	{r1}
  10368c:	4708      	bx	r1
	...

00103690 <if_initInterface>:
  103690:	b510      	push	{r4, lr}
  103692:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103694:	b081      	sub	sp, #4
  103696:	ffa7f7ff 	bl	1035e8 <if_spiInit>
  10369a:	1c20      	mov	r0, r4		(add r0, r4, #0)
  10369c:	fa32f000 	bl	103b04 <sd_Init>
  1036a0:	0603      	lsl	r3, r0, #24
  1036a2:	d504      	bpl	1036ae <if_initInterface+0x1e>
  1036a4:	4814      	ldr	r0, [pc, #80]	(1036f8 <.text+0x36f8>)
  1036a6:	fecbf7ff 	bl	103440 <efsl_debug_printf_arm>
  1036aa:	2001      	mov	r0, #1
  1036ac:	e008      	b	1036c0 <if_initInterface+0x30>
  1036ae:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1036b0:	f9c8f000 	bl	103a44 <sd_State>
  1036b4:	0603      	lsl	r3, r0, #24
  1036b6:	d505      	bpl	1036c4 <if_initInterface+0x34>
  1036b8:	4810      	ldr	r0, [pc, #64]	(1036fc <.text+0x36fc>)
  1036ba:	fec1f7ff 	bl	103440 <efsl_debug_printf_arm>
  1036be:	2002      	mov	r0, #2
  1036c0:	4240      	neg	r0, r0
  1036c2:	e014      	b	1036ee <if_initInterface+0x5e>
  1036c4:	4669      	mov	r1, sp
  1036c6:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1036c8:	f8eef000 	bl	1038a8 <sd_getDriveSize>
  1036cc:	9a00      	ldr	r2, [sp, #0]
  1036ce:	4b0c      	ldr	r3, [pc, #48]	(103700 <.text+0x3700>)
  1036d0:	0a51      	lsr	r1, r2, #9
  1036d2:	6021      	str	r1, [r4, #0]
  1036d4:	421a      	tst	r2, r3
  1036d6:	d001      	beq	1036dc <if_initInterface+0x4c>
  1036d8:	1e4b      	sub	r3, r1, #1
  1036da:	6023      	str	r3, [r4, #0]
  1036dc:	4809      	ldr	r0, [pc, #36]	(103704 <.text+0x3704>)
  1036de:	9900      	ldr	r1, [sp, #0]
  1036e0:	6822      	ldr	r2, [r4, #0]
  1036e2:	feadf7ff 	bl	103440 <efsl_debug_printf_arm>
  1036e6:	2002      	mov	r0, #2
  1036e8:	ff58f7ff 	bl	10359c <if_spiSetSpeed>
  1036ec:	2000      	mov	r0, #0
  1036ee:	b001      	add	sp, #4
  1036f0:	bc10      	pop	{r4}
  1036f2:	bc02      	pop	{r1}
  1036f4:	4708      	bx	r1
  1036f6:	0000      	lsl	r0, r0, #0
  1036f8:	4120      	asr	r0, r4
  1036fa:	0010      	lsl	r0, r2, #0
  1036fc:	4148      	adc	r0, r1
  1036fe:	0010      	lsl	r0, r2, #0
  103700:	01ff      	lsl	r7, r7, #7
  103702:	0000      	lsl	r0, r0, #0
  103704:	417c      	adc	r4, r7
  103706:	0010      	lsl	r0, r2, #0

00103708 <strMatch>:
  103708:	b570      	push	{r4, r5, r6, lr}
  10370a:	1c06      	mov	r6, r0		(add r6, r0, #0)
  10370c:	1c0d      	mov	r5, r1		(add r5, r1, #0)
  10370e:	1c14      	mov	r4, r2		(add r4, r2, #0)
  103710:	2100      	mov	r1, #0
  103712:	2000      	mov	r0, #0
  103714:	e007      	b	103726 <strMatch+0x1e>
  103716:	5d8a      	ldrb	r2, [r1, r6]
  103718:	5d4b      	ldrb	r3, [r1, r5]
  10371a:	429a      	cmp	r2, r3
  10371c:	d002      	beq	103724 <strMatch+0x1c>
  10371e:	1c43      	add	r3, r0, #1
  103720:	041b      	lsl	r3, r3, #16
  103722:	0c18      	lsr	r0, r3, #16
  103724:	3101      	add	r1, #1
  103726:	42a1      	cmp	r1, r4
  103728:	d1f5      	bne	103716 <strMatch+0xe>
  10372a:	bc70      	pop	{r4, r5, r6}
  10372c:	bc02      	pop	{r1}
  10372e:	4708      	bx	r1

00103730 <memCpy>:
  103730:	1889      	add	r1, r1, r2
  103732:	1880      	add	r0, r0, r2
  103734:	e002      	b	10373c <memCpy+0xc>
  103736:	7803      	ldrb	r3, [r0, #0]
  103738:	700b      	strb	r3, [r1, #0]
  10373a:	3a01      	sub	r2, #1
  10373c:	3801      	sub	r0, #1
  10373e:	3901      	sub	r1, #1
  103740:	2a00      	cmp	r2, #0
  103742:	d1f8      	bne	103736 <memCpy+0x6>
  103744:	4770      	bx	lr
	...

00103748 <memClr>:
  103748:	1840      	add	r0, r0, r1
  10374a:	e002      	b	103752 <memClr+0xa>
  10374c:	2300      	mov	r3, #0
  10374e:	7003      	strb	r3, [r0, #0]
  103750:	3901      	sub	r1, #1
  103752:	3801      	sub	r0, #1
  103754:	2900      	cmp	r1, #0
  103756:	d1f9      	bne	10374c <memClr+0x4>
  103758:	4770      	bx	lr
	...

0010375c <memSet>:
  10375c:	0612      	lsl	r2, r2, #24
  10375e:	0e12      	lsr	r2, r2, #24
  103760:	1840      	add	r0, r0, r1
  103762:	e001      	b	103768 <memSet+0xc>
  103764:	7002      	strb	r2, [r0, #0]
  103766:	3901      	sub	r1, #1
  103768:	3801      	sub	r0, #1
  10376a:	2900      	cmp	r1, #0
  10376c:	d1fa      	bne	103764 <memSet+0x8>
  10376e:	4770      	bx	lr

00103770 <fs_makeDate>:
  103770:	2000      	mov	r0, #0
  103772:	4770      	bx	lr

00103774 <fs_makeTime>:
  103774:	2000      	mov	r0, #0
  103776:	4770      	bx	lr

00103778 <fs_hasTimeSupport>:
  103778:	2000      	mov	r0, #0
  10377a:	4770      	bx	lr

0010377c <sd_Resp8bError>:
  10377c:	b500      	push	{lr}
  10377e:	0609      	lsl	r1, r1, #24
  103780:	0e09      	lsr	r1, r1, #24
  103782:	2908      	cmp	r1, #8
  103784:	d017      	beq	1037b6 <sd_Resp8bError+0x3a>
  103786:	2908      	cmp	r1, #8
  103788:	d806      	bhi	103798 <sd_Resp8bError+0x1c>
  10378a:	2902      	cmp	r1, #2
  10378c:	d017      	beq	1037be <sd_Resp8bError+0x42>
  10378e:	2904      	cmp	r1, #4
  103790:	d013      	beq	1037ba <sd_Resp8bError+0x3e>
  103792:	2901      	cmp	r1, #1
  103794:	d117      	bne	1037c6 <sd_Resp8bError+0x4a>
  103796:	e014      	b	1037c2 <sd_Resp8bError+0x46>
  103798:	2920      	cmp	r1, #32
  10379a:	d006      	beq	1037aa <sd_Resp8bError+0x2e>
  10379c:	2940      	cmp	r1, #64
  10379e:	d002      	beq	1037a6 <sd_Resp8bError+0x2a>
  1037a0:	2910      	cmp	r1, #16
  1037a2:	d110      	bne	1037c6 <sd_Resp8bError+0x4a>
  1037a4:	e005      	b	1037b2 <sd_Resp8bError+0x36>
  1037a6:	480a      	ldr	r0, [pc, #40]	(1037d0 <.text+0x37d0>)
  1037a8:	e000      	b	1037ac <sd_Resp8bError+0x30>
  1037aa:	480a      	ldr	r0, [pc, #40]	(1037d4 <.text+0x37d4>)
  1037ac:	fe48f7ff 	bl	103440 <efsl_debug_printf_arm>
  1037b0:	e00c      	b	1037cc <sd_Resp8bError+0x50>
  1037b2:	4809      	ldr	r0, [pc, #36]	(1037d8 <.text+0x37d8>)
  1037b4:	e7fa      	b	1037ac <sd_Resp8bError+0x30>
  1037b6:	4809      	ldr	r0, [pc, #36]	(1037dc <.text+0x37dc>)
  1037b8:	e7f8      	b	1037ac <sd_Resp8bError+0x30>
  1037ba:	4809      	ldr	r0, [pc, #36]	(1037e0 <.text+0x37e0>)
  1037bc:	e7f6      	b	1037ac <sd_Resp8bError+0x30>
  1037be:	4809      	ldr	r0, [pc, #36]	(1037e4 <.text+0x37e4>)
  1037c0:	e7f4      	b	1037ac <sd_Resp8bError+0x30>
  1037c2:	4809      	ldr	r0, [pc, #36]	(1037e8 <.text+0x37e8>)
  1037c4:	e7f2      	b	1037ac <sd_Resp8bError+0x30>
  1037c6:	4809      	ldr	r0, [pc, #36]	(1037ec <.text+0x37ec>)
  1037c8:	fe3af7ff 	bl	103440 <efsl_debug_printf_arm>
  1037cc:	bc01      	pop	{r0}
  1037ce:	4700      	bx	r0
  1037d0:	41a8      	sbc	r0, r5
  1037d2:	0010      	lsl	r0, r2, #0
  1037d4:	41c4      	ror	r4, r0
  1037d6:	0010      	lsl	r0, r2, #0
  1037d8:	41dc      	ror	r4, r3
  1037da:	0010      	lsl	r0, r2, #0
  1037dc:	41fc      	ror	r4, r7
  1037de:	0010      	lsl	r0, r2, #0
  1037e0:	420c      	tst	r4, r1
  1037e2:	0010      	lsl	r0, r2, #0
  1037e4:	4220      	tst	r0, r4
  1037e6:	0010      	lsl	r0, r2, #0
  1037e8:	4248      	neg	r0, r1
  1037ea:	0010      	lsl	r0, r2, #0
  1037ec:	4260      	neg	r0, r4
  1037ee:	0010      	lsl	r0, r2, #0

001037f0 <sd_Resp8b>:
  1037f0:	b530      	push	{r4, r5, lr}
  1037f2:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1037f4:	2400      	mov	r4, #0
  1037f6:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1037f8:	21ff      	mov	r1, #255
  1037fa:	fee3f7ff 	bl	1035c4 <if_spiSend>
  1037fe:	28ff      	cmp	r0, #255
  103800:	d105      	bne	10380e <sd_Resp8b+0x1e>
  103802:	1c63      	add	r3, r4, #1
  103804:	061b      	lsl	r3, r3, #24
  103806:	0e1c      	lsr	r4, r3, #24
  103808:	2c08      	cmp	r4, #8
  10380a:	d1f4      	bne	1037f6 <sd_Resp8b+0x6>
  10380c:	20ff      	mov	r0, #255
  10380e:	bc30      	pop	{r4, r5}
  103810:	bc02      	pop	{r1}
  103812:	4708      	bx	r1

00103814 <sd_Resp16b>:
  103814:	b530      	push	{r4, r5, lr}
  103816:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103818:	ffeaf7ff 	bl	1037f0 <sd_Resp8b>
  10381c:	21ff      	mov	r1, #255
  10381e:	0605      	lsl	r5, r0, #24
  103820:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103822:	fecff7ff 	bl	1035c4 <if_spiSend>
  103826:	0c2d      	lsr	r5, r5, #16
  103828:	4305      	orr	r5, r0
  10382a:	042d      	lsl	r5, r5, #16
  10382c:	0c2d      	lsr	r5, r5, #16
  10382e:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103830:	bc30      	pop	{r4, r5}
  103832:	bc02      	pop	{r1}
  103834:	4708      	bx	r1
	...

00103838 <sd_Command>:
  103838:	b5f0      	push	{r4, r5, r6, r7, lr}
  10383a:	041f      	lsl	r7, r3, #16
  10383c:	0415      	lsl	r5, r2, #16
  10383e:	b082      	sub	sp, #8
  103840:	0c2a      	lsr	r2, r5, #16
  103842:	0c3b      	lsr	r3, r7, #16
  103844:	060c      	lsl	r4, r1, #24
  103846:	21ff      	mov	r1, #255
  103848:	1c06      	mov	r6, r0		(add r6, r0, #0)
  10384a:	9201      	str	r2, [sp, #4]
  10384c:	9300      	str	r3, [sp, #0]
  10384e:	0e24      	lsr	r4, r4, #24
  103850:	feb8f7ff 	bl	1035c4 <if_spiSend>
  103854:	2340      	mov	r3, #64
  103856:	431c      	orr	r4, r3
  103858:	0624      	lsl	r4, r4, #24
  10385a:	0e24      	lsr	r4, r4, #24
  10385c:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10385e:	1c21      	mov	r1, r4		(add r1, r4, #0)
  103860:	0e2d      	lsr	r5, r5, #24
  103862:	feaff7ff 	bl	1035c4 <if_spiSend>
  103866:	1c29      	mov	r1, r5		(add r1, r5, #0)
  103868:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10386a:	feabf7ff 	bl	1035c4 <if_spiSend>
  10386e:	9a01      	ldr	r2, [sp, #4]
  103870:	0611      	lsl	r1, r2, #24
  103872:	1c30      	mov	r0, r6		(add r0, r6, #0)
  103874:	0e09      	lsr	r1, r1, #24
  103876:	fea5f7ff 	bl	1035c4 <if_spiSend>
  10387a:	0e39      	lsr	r1, r7, #24
  10387c:	1c30      	mov	r0, r6		(add r0, r6, #0)
  10387e:	fea1f7ff 	bl	1035c4 <if_spiSend>
  103882:	9b00      	ldr	r3, [sp, #0]
  103884:	0619      	lsl	r1, r3, #24
  103886:	1c30      	mov	r0, r6		(add r0, r6, #0)
  103888:	0e09      	lsr	r1, r1, #24
  10388a:	fe9bf7ff 	bl	1035c4 <if_spiSend>
  10388e:	1c30      	mov	r0, r6		(add r0, r6, #0)
  103890:	2195      	mov	r1, #149
  103892:	fe97f7ff 	bl	1035c4 <if_spiSend>
  103896:	1c30      	mov	r0, r6		(add r0, r6, #0)
  103898:	21ff      	mov	r1, #255
  10389a:	fe93f7ff 	bl	1035c4 <if_spiSend>
  10389e:	b002      	add	sp, #8
  1038a0:	bcf0      	pop	{r4, r5, r6, r7}
  1038a2:	bc01      	pop	{r0}
  1038a4:	4700      	bx	r0
	...

001038a8 <sd_getDriveSize>:
  1038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  1038aa:	1c0f      	mov	r7, r1		(add r7, r1, #0)
  1038ac:	b084      	sub	sp, #16
  1038ae:	2109      	mov	r1, #9
  1038b0:	2200      	mov	r2, #0
  1038b2:	2300      	mov	r3, #0
  1038b4:	1c05      	mov	r5, r0		(add r5, r0, #0)
  1038b6:	ffbff7ff 	bl	103838 <sd_Command>
  1038ba:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1038bc:	ff98f7ff 	bl	1037f0 <sd_Resp8b>
  1038c0:	28fe      	cmp	r0, #254
  1038c2:	d1fa      	bne	1038ba <sd_getDriveSize+0x12>
  1038c4:	4820      	ldr	r0, [pc, #128]	(103948 <.text+0x3948>)
  1038c6:	fdbbf7ff 	bl	103440 <efsl_debug_printf_arm>
  1038ca:	2400      	mov	r4, #0
  1038cc:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1038ce:	ff8ff7ff 	bl	1037f0 <sd_Resp8b>
  1038d2:	466e      	mov	r6, sp
  1038d4:	55a0      	strb	r0, [r4, r6]
  1038d6:	1c01      	mov	r1, r0		(add r1, r0, #0)
  1038d8:	3401      	add	r4, #1
  1038da:	481c      	ldr	r0, [pc, #112]	(10394c <.text+0x394c>)
  1038dc:	fdb0f7ff 	bl	103440 <efsl_debug_printf_arm>
  1038e0:	2c10      	cmp	r4, #16
  1038e2:	d1f3      	bne	1038cc <sd_getDriveSize+0x24>
  1038e4:	481a      	ldr	r0, [pc, #104]	(103950 <.text+0x3950>)
  1038e6:	fdabf7ff 	bl	103440 <efsl_debug_printf_arm>
  1038ea:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1038ec:	21ff      	mov	r1, #255
  1038ee:	fe69f7ff 	bl	1035c4 <if_spiSend>
  1038f2:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1038f4:	21ff      	mov	r1, #255
  1038f6:	fe65f7ff 	bl	1035c4 <if_spiSend>
  1038fa:	7a30      	ldrb	r0, [r6, #8]
  1038fc:	79f3      	ldrb	r3, [r6, #7]
  1038fe:	7a72      	ldrb	r2, [r6, #9]
  103900:	009b      	lsl	r3, r3, #2
  103902:	0980      	lsr	r0, r0, #6
  103904:	2103      	mov	r1, #3
  103906:	18c0      	add	r0, r0, r3
  103908:	7ab3      	ldrb	r3, [r6, #10]
  10390a:	79b4      	ldrb	r4, [r6, #6]
  10390c:	400a      	and	r2, r1
  10390e:	09db      	lsr	r3, r3, #7
  103910:	0052      	lsl	r2, r2, #1
  103912:	400c      	and	r4, r1
  103914:	18d2      	add	r2, r2, r3
  103916:	2101      	mov	r1, #1
  103918:	3202      	add	r2, #2
  10391a:	1c0b      	mov	r3, r1		(add r3, r1, #0)
  10391c:	4093      	lsl	r3, r2
  10391e:	041a      	lsl	r2, r3, #16
  103920:	02a4      	lsl	r4, r4, #10
  103922:	7973      	ldrb	r3, [r6, #5]
  103924:	1824      	add	r4, r4, r0
  103926:	200f      	mov	r0, #15
  103928:	4003      	and	r3, r0
  10392a:	4099      	lsl	r1, r3
  10392c:	0409      	lsl	r1, r1, #16
  10392e:	3401      	add	r4, #1
  103930:	0c09      	lsr	r1, r1, #16
  103932:	1c0b      	mov	r3, r1		(add r3, r1, #0)
  103934:	4363      	mul	r3, r4
  103936:	0c12      	lsr	r2, r2, #16
  103938:	4353      	mul	r3, r2
  10393a:	2000      	mov	r0, #0
  10393c:	b004      	add	sp, #16
  10393e:	603b      	str	r3, [r7, #0]
  103940:	bcf0      	pop	{r4, r5, r6, r7}
  103942:	bc02      	pop	{r1}
  103944:	4708      	bx	r1
  103946:	0000      	lsl	r0, r0, #0
  103948:	4290      	cmp	r0, r2
  10394a:	0010      	lsl	r0, r2, #0
  10394c:	4298      	cmp	r0, r3
  10394e:	0010      	lsl	r0, r2, #0
  103950:	3e6c      	sub	r6, #108
  103952:	0010      	lsl	r0, r2, #0

00103954 <sd_readSector>:
  103954:	b5f0      	push	{r4, r5, r6, r7, lr}
  103956:	b081      	sub	sp, #4
  103958:	064c      	lsl	r4, r1, #25
  10395a:	9200      	str	r2, [sp, #0]
  10395c:	041b      	lsl	r3, r3, #16
  10395e:	024a      	lsl	r2, r1, #9
  103960:	0c24      	lsr	r4, r4, #16
  103962:	1c05      	mov	r5, r0		(add r5, r0, #0)
  103964:	0c12      	lsr	r2, r2, #16
  103966:	2111      	mov	r1, #17
  103968:	0c1f      	lsr	r7, r3, #16
  10396a:	1c23      	mov	r3, r4		(add r3, r4, #0)
  10396c:	ff64f7ff 	bl	103838 <sd_Command>
  103970:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103972:	ff3df7ff 	bl	1037f0 <sd_Resp8b>
  103976:	4c19      	ldr	r4, [pc, #100]	(1039dc <.text+0x39dc>)
  103978:	1c06      	mov	r6, r0		(add r6, r0, #0)
  10397a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10397c:	ff38f7ff 	bl	1037f0 <sd_Resp8b>
  103980:	1c01      	mov	r1, r0		(add r1, r0, #0)
  103982:	28ff      	cmp	r0, #255
  103984:	d105      	bne	103992 <sd_readSector+0x3e>
  103986:	1e63      	sub	r3, r4, #1
  103988:	041b      	lsl	r3, r3, #16
  10398a:	0c1c      	lsr	r4, r3, #16
  10398c:	4b13      	ldr	r3, [pc, #76]	(1039dc <.text+0x39dc>)
  10398e:	429c      	cmp	r4, r3
  103990:	d1f3      	bne	10397a <sd_readSector+0x26>
  103992:	2e00      	cmp	r6, #0
  103994:	d101      	bne	10399a <sd_readSector+0x46>
  103996:	29fe      	cmp	r1, #254
  103998:	d005      	beq	1039a6 <sd_readSector+0x52>
  10399a:	1c28      	mov	r0, r5		(add r0, r5, #0)
  10399c:	feeef7ff 	bl	10377c <sd_Resp8bError>
  1039a0:	2001      	mov	r0, #1
  1039a2:	4240      	neg	r0, r0
  1039a4:	e016      	b	1039d4 <sd_readSector+0x80>
  1039a6:	2400      	mov	r4, #0
  1039a8:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1039aa:	21ff      	mov	r1, #255
  1039ac:	fe0af7ff 	bl	1035c4 <if_spiSend>
  1039b0:	42bc      	cmp	r4, r7
  1039b2:	d201      	bcs	1039b8 <sd_readSector+0x64>
  1039b4:	9b00      	ldr	r3, [sp, #0]
  1039b6:	54e0      	strb	r0, [r4, r3]
  1039b8:	2380      	mov	r3, #128
  1039ba:	3401      	add	r4, #1
  1039bc:	009b      	lsl	r3, r3, #2
  1039be:	429c      	cmp	r4, r3
  1039c0:	d1f2      	bne	1039a8 <sd_readSector+0x54>
  1039c2:	21ff      	mov	r1, #255
  1039c4:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1039c6:	fdfdf7ff 	bl	1035c4 <if_spiSend>
  1039ca:	1c28      	mov	r0, r5		(add r0, r5, #0)
  1039cc:	21ff      	mov	r1, #255
  1039ce:	fdf9f7ff 	bl	1035c4 <if_spiSend>
  1039d2:	2000      	mov	r0, #0
  1039d4:	b001      	add	sp, #4
  1039d6:	bcf0      	pop	{r4, r5, r6, r7}
  1039d8:	bc02      	pop	{r1}
  1039da:	4708      	bx	r1
  1039dc:	ffff      	second half of BL instruction 0xffff
	...

001039e0 <sd_writeSector>:
  1039e0:	b570      	push	{r4, r5, r6, lr}
  1039e2:	064b      	lsl	r3, r1, #25
  1039e4:	1c16      	mov	r6, r2		(add r6, r2, #0)
  1039e6:	024a      	lsl	r2, r1, #9
  1039e8:	1c04      	mov	r4, r0		(add r4, r0, #0)
  1039ea:	0c12      	lsr	r2, r2, #16
  1039ec:	0c1b      	lsr	r3, r3, #16
  1039ee:	2118      	mov	r1, #24
  1039f0:	ff22f7ff 	bl	103838 <sd_Command>
  1039f4:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1039f6:	fefbf7ff 	bl	1037f0 <sd_Resp8b>
  1039fa:	1c20      	mov	r0, r4		(add r0, r4, #0)
  1039fc:	21fe      	mov	r1, #254
  1039fe:	fde1f7ff 	bl	1035c4 <if_spiSend>
  103a02:	2500      	mov	r5, #0
  103a04:	5da9      	ldrb	r1, [r5, r6]
  103a06:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103a08:	fddcf7ff 	bl	1035c4 <if_spiSend>
  103a0c:	2380      	mov	r3, #128
  103a0e:	3501      	add	r5, #1
  103a10:	009b      	lsl	r3, r3, #2
  103a12:	429d      	cmp	r5, r3
  103a14:	d1f6      	bne	103a04 <sd_writeSector+0x24>
  103a16:	21ff      	mov	r1, #255
  103a18:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103a1a:	fdd3f7ff 	bl	1035c4 <if_spiSend>
  103a1e:	21ff      	mov	r1, #255
  103a20:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103a22:	fdcff7ff 	bl	1035c4 <if_spiSend>
  103a26:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103a28:	21ff      	mov	r1, #255
  103a2a:	fdcbf7ff 	bl	1035c4 <if_spiSend>
  103a2e:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103a30:	21ff      	mov	r1, #255
  103a32:	fdc7f7ff 	bl	1035c4 <if_spiSend>
  103a36:	28ff      	cmp	r0, #255
  103a38:	d1f9      	bne	103a2e <sd_writeSector+0x4e>
  103a3a:	2000      	mov	r0, #0
  103a3c:	bc70      	pop	{r4, r5, r6}
  103a3e:	bc02      	pop	{r1}
  103a40:	4708      	bx	r1
	...

00103a44 <sd_State>:
  103a44:	b510      	push	{r4, lr}
  103a46:	2300      	mov	r3, #0
  103a48:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103a4a:	210d      	mov	r1, #13
  103a4c:	2200      	mov	r2, #0
  103a4e:	fef3f7ff 	bl	103838 <sd_Command>
  103a52:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103a54:	fedef7ff 	bl	103814 <sd_Resp16b>
  103a58:	0403      	lsl	r3, r0, #16
  103a5a:	141b      	asr	r3, r3, #16
  103a5c:	2b08      	cmp	r3, #8
  103a5e:	d021      	beq	103aa4 <sd_State+0x60>
  103a60:	2b08      	cmp	r3, #8
  103a62:	dc0b      	bgt	103a7c <sd_State+0x38>
  103a64:	2b01      	cmp	r3, #1
  103a66:	d017      	beq	103a98 <sd_State+0x54>
  103a68:	2b01      	cmp	r3, #1
  103a6a:	dc02      	bgt	103a72 <sd_State+0x2e>
  103a6c:	2b00      	cmp	r3, #0
  103a6e:	d011      	beq	103a94 <sd_State+0x50>
  103a70:	e024      	b	103abc <sd_State+0x78>
  103a72:	2b02      	cmp	r3, #2
  103a74:	d012      	beq	103a9c <sd_State+0x58>
  103a76:	2b04      	cmp	r3, #4
  103a78:	d120      	bne	103abc <sd_State+0x78>
  103a7a:	e011      	b	103aa0 <sd_State+0x5c>
  103a7c:	2b20      	cmp	r3, #32
  103a7e:	d015      	beq	103aac <sd_State+0x68>
  103a80:	2b20      	cmp	r3, #32
  103a82:	dc02      	bgt	103a8a <sd_State+0x46>
  103a84:	2b10      	cmp	r3, #16
  103a86:	d119      	bne	103abc <sd_State+0x78>
  103a88:	e00e      	b	103aa8 <sd_State+0x64>
  103a8a:	2b40      	cmp	r3, #64
  103a8c:	d010      	beq	103ab0 <sd_State+0x6c>
  103a8e:	2b80      	cmp	r3, #128
  103a90:	d114      	bne	103abc <sd_State+0x78>
  103a92:	e00f      	b	103ab4 <sd_State+0x70>
  103a94:	2001      	mov	r0, #1
  103a96:	e01f      	b	103ad8 <sd_State+0x94>
  103a98:	4811      	ldr	r0, [pc, #68]	(103ae0 <.text+0x3ae0>)
  103a9a:	e00c      	b	103ab6 <sd_State+0x72>
  103a9c:	4811      	ldr	r0, [pc, #68]	(103ae4 <.text+0x3ae4>)
  103a9e:	e00a      	b	103ab6 <sd_State+0x72>
  103aa0:	4811      	ldr	r0, [pc, #68]	(103ae8 <.text+0x3ae8>)
  103aa2:	e008      	b	103ab6 <sd_State+0x72>
  103aa4:	4811      	ldr	r0, [pc, #68]	(103aec <.text+0x3aec>)
  103aa6:	e006      	b	103ab6 <sd_State+0x72>
  103aa8:	4811      	ldr	r0, [pc, #68]	(103af0 <.text+0x3af0>)
  103aaa:	e004      	b	103ab6 <sd_State+0x72>
  103aac:	4811      	ldr	r0, [pc, #68]	(103af4 <.text+0x3af4>)
  103aae:	e002      	b	103ab6 <sd_State+0x72>
  103ab0:	4811      	ldr	r0, [pc, #68]	(103af8 <.text+0x3af8>)
  103ab2:	e000      	b	103ab6 <sd_State+0x72>
  103ab4:	4811      	ldr	r0, [pc, #68]	(103afc <.text+0x3afc>)
  103ab6:	fcc3f7ff 	bl	103440 <efsl_debug_printf_arm>
  103aba:	e00b      	b	103ad4 <sd_State+0x90>
  103abc:	0400      	lsl	r0, r0, #16
  103abe:	1401      	asr	r1, r0, #16
  103ac0:	29ff      	cmp	r1, #255
  103ac2:	dd04      	ble	103ace <sd_State+0x8a>
  103ac4:	0e01      	lsr	r1, r0, #24
  103ac6:	1c20      	mov	r0, r4		(add r0, r4, #0)
  103ac8:	fe58f7ff 	bl	10377c <sd_Resp8bError>
  103acc:	e002      	b	103ad4 <sd_State+0x90>
  103ace:	480c      	ldr	r0, [pc, #48]	(103b00 <.text+0x3b00>)
  103ad0:	fcb6f7ff 	bl	103440 <efsl_debug_printf_arm>
  103ad4:	2001      	mov	r0, #1
  103ad6:	4240      	neg	r0, r0
  103ad8:	bc10      	pop	{r4}
  103ada:	bc02      	pop	{r1}
  103adc:	4708      	bx	r1
  103ade:	0000      	lsl	r0, r0, #0
  103ae0:	42a0      	cmp	r0, r4
  103ae2:	0010      	lsl	r0, r2, #0
  103ae4:	42b4      	cmp	r4, r6
  103ae6:	0010      	lsl	r0, r2, #0
  103ae8:	42dc      	cmn	r4, r3
  103aea:	0010      	lsl	r0, r2, #0
  103aec:	4308      	orr	r0, r1
  103aee:	0010      	lsl	r0, r2, #0
  103af0:	432c      	orr	r4, r5
  103af2:	0010      	lsl	r0, r2, #0
  103af4:	436c      	mul	r4, r5
  103af6:	0010      	lsl	r0, r2, #0
  103af8:	4388      	bic	r0, r1
  103afa:	0010      	lsl	r0, r2, #0
  103afc:	43b4      	bic	r4, r6
  103afe:	0010      	lsl	r0, r2, #0
  103b00:	43d4      	mvn	r4, r2
  103b02:	0010      	lsl	r0, r2, #0

00103b04 <sd_Init>:
  103b04:	b570      	push	{r4, r5, r6, lr}
  103b06:	1c05      	mov	r5, r0		(add r5, r0, #0)
  103b08:	2464      	mov	r4, #100
  103b0a:	2100      	mov	r1, #0
  103b0c:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b0e:	2200      	mov	r2, #0
  103b10:	2300      	mov	r3, #0
  103b12:	fe91f7ff 	bl	103838 <sd_Command>
  103b16:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b18:	fe6af7ff 	bl	1037f0 <sd_Resp8b>
  103b1c:	1c01      	mov	r1, r0		(add r1, r0, #0)
  103b1e:	2801      	cmp	r0, #1
  103b20:	d010      	beq	103b44 <sd_Init+0x40>
  103b22:	1e63      	sub	r3, r4, #1
  103b24:	041b      	lsl	r3, r3, #16
  103b26:	0c1c      	lsr	r4, r3, #16
  103b28:	141b      	asr	r3, r3, #16
  103b2a:	3301      	add	r3, #1
  103b2c:	d1ed      	bne	103b0a <sd_Init+0x6>
  103b2e:	28ff      	cmp	r0, #255
  103b30:	d101      	bne	103b36 <sd_Init+0x32>
  103b32:	2001      	mov	r0, #1
  103b34:	e025      	b	103b82 <sd_Init+0x7e>
  103b36:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b38:	fe20f7ff 	bl	10377c <sd_Resp8bError>
  103b3c:	2002      	mov	r0, #2
  103b3e:	e020      	b	103b82 <sd_Init+0x7e>
  103b40:	2000      	mov	r0, #0
  103b42:	e01f      	b	103b84 <sd_Init+0x80>
  103b44:	26fa      	mov	r6, #250
  103b46:	01f6      	lsl	r6, r6, #7
  103b48:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b4a:	2101      	mov	r1, #1
  103b4c:	2200      	mov	r2, #0
  103b4e:	2300      	mov	r3, #0
  103b50:	fe72f7ff 	bl	103838 <sd_Command>
  103b54:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b56:	fe4bf7ff 	bl	1037f0 <sd_Resp8b>
  103b5a:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103b5c:	2800      	cmp	r0, #0
  103b5e:	d0ef      	beq	103b40 <sd_Init+0x3c>
  103b60:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b62:	1c21      	mov	r1, r4		(add r1, r4, #0)
  103b64:	fe0af7ff 	bl	10377c <sd_Resp8bError>
  103b68:	2c01      	cmp	r4, #1
  103b6a:	d105      	bne	103b78 <sd_Init+0x74>
  103b6c:	1e73      	sub	r3, r6, #1
  103b6e:	041b      	lsl	r3, r3, #16
  103b70:	0c1e      	lsr	r6, r3, #16
  103b72:	141b      	asr	r3, r3, #16
  103b74:	3301      	add	r3, #1
  103b76:	d1e7      	bne	103b48 <sd_Init+0x44>
  103b78:	1c28      	mov	r0, r5		(add r0, r5, #0)
  103b7a:	1c21      	mov	r1, r4		(add r1, r4, #0)
  103b7c:	fdfef7ff 	bl	10377c <sd_Resp8bError>
  103b80:	2003      	mov	r0, #3
  103b82:	4240      	neg	r0, r0
  103b84:	bc70      	pop	{r4, r5, r6}
  103b86:	bc02      	pop	{r1}
  103b88:	4708      	bx	r1
  103b8a:	46c0      	nop			(mov r8, r8)

00103b8c <__aeabi_idiv>:
  103b8c:	2900      	cmp	r1, #0
  103b8e:	d041      	beq	103c14 <__aeabi_idiv+0x88>
  103b90:	b410      	push	{r4}
  103b92:	1c04      	mov	r4, r0		(add r4, r0, #0)
  103b94:	404c      	eor	r4, r1
  103b96:	46a4      	mov	ip, r4
  103b98:	2301      	mov	r3, #1
  103b9a:	2200      	mov	r2, #0
  103b9c:	2900      	cmp	r1, #0
  103b9e:	d500      	bpl	103ba2 <__aeabi_idiv+0x16>
  103ba0:	4249      	neg	r1, r1
  103ba2:	2800      	cmp	r0, #0
  103ba4:	d500      	bpl	103ba8 <__aeabi_idiv+0x1c>
  103ba6:	4240      	neg	r0, r0
  103ba8:	4288      	cmp	r0, r1
  103baa:	d32c      	bcc	103c06 <__aeabi_idiv+0x7a>
  103bac:	2401      	mov	r4, #1
  103bae:	0724      	lsl	r4, r4, #28
  103bb0:	42a1      	cmp	r1, r4
  103bb2:	d204      	bcs	103bbe <__aeabi_idiv+0x32>
  103bb4:	4281      	cmp	r1, r0
  103bb6:	d202      	bcs	103bbe <__aeabi_idiv+0x32>
  103bb8:	0109      	lsl	r1, r1, #4
  103bba:	011b      	lsl	r3, r3, #4
  103bbc:	e7f8      	b	103bb0 <__aeabi_idiv+0x24>
  103bbe:	00e4      	lsl	r4, r4, #3
  103bc0:	42a1      	cmp	r1, r4
  103bc2:	d204      	bcs	103bce <__aeabi_idiv+0x42>
  103bc4:	4281      	cmp	r1, r0
  103bc6:	d202      	bcs	103bce <__aeabi_idiv+0x42>
  103bc8:	0049      	lsl	r1, r1, #1
  103bca:	005b      	lsl	r3, r3, #1
  103bcc:	e7f8      	b	103bc0 <__aeabi_idiv+0x34>
  103bce:	4288      	cmp	r0, r1
  103bd0:	d301      	bcc	103bd6 <__aeabi_idiv+0x4a>
  103bd2:	1a40      	sub	r0, r0, r1
  103bd4:	431a      	orr	r2, r3
  103bd6:	084c      	lsr	r4, r1, #1
  103bd8:	42a0      	cmp	r0, r4
  103bda:	d302      	bcc	103be2 <__aeabi_idiv+0x56>
  103bdc:	1b00      	sub	r0, r0, r4
  103bde:	085c      	lsr	r4, r3, #1
  103be0:	4322      	orr	r2, r4
  103be2:	088c      	lsr	r4, r1, #2
  103be4:	42a0      	cmp	r0, r4
  103be6:	d302      	bcc	103bee <__aeabi_idiv+0x62>
  103be8:	1b00      	sub	r0, r0, r4
  103bea:	089c      	lsr	r4, r3, #2
  103bec:	4322      	orr	r2, r4
  103bee:	08cc      	lsr	r4, r1, #3
  103bf0:	42a0      	cmp	r0, r4
  103bf2:	d302      	bcc	103bfa <__aeabi_idiv+0x6e>
  103bf4:	1b00      	sub	r0, r0, r4
  103bf6:	08dc      	lsr	r4, r3, #3
  103bf8:	4322      	orr	r2, r4
  103bfa:	2800      	cmp	r0, #0
  103bfc:	d003      	beq	103c06 <__aeabi_idiv+0x7a>
  103bfe:	091b      	lsr	r3, r3, #4
  103c00:	d001      	beq	103c06 <__aeabi_idiv+0x7a>
  103c02:	0909      	lsr	r1, r1, #4
  103c04:	e7e3      	b	103bce <__aeabi_idiv+0x42>
  103c06:	1c10      	mov	r0, r2		(add r0, r2, #0)
  103c08:	4664      	mov	r4, ip
  103c0a:	2c00      	cmp	r4, #0
  103c0c:	d500      	bpl	103c10 <__aeabi_idiv+0x84>
  103c0e:	4240      	neg	r0, r0
  103c10:	bc10      	pop	{r4}
  103c12:	4770      	bx	lr
  103c14:	b502      	push	{r1, lr}
  103c16:	fed9f7fc 	bl	1009cc <__aeabi_idiv0>
  103c1a:	2000      	mov	r0, #0
  103c1c:	bc06      	pop	{r1, r2}
  103c1e:	4710      	bx	r2

00103c20 <__aeabi_idivmod>:
  103c20:	b503      	push	{r0, r1, lr}
  103c22:	ffb3f7ff 	bl	103b8c <__aeabi_idiv>
  103c26:	bc0e      	pop	{r1, r2, r3}
  103c28:	4342      	mul	r2, r0
  103c2a:	1a89      	sub	r1, r1, r2
  103c2c:	4718      	bx	r3
  103c2e:	46c0      	nop			(mov r8, r8)

00103c30 <__modsi3>:
  103c30:	2301      	mov	r3, #1
  103c32:	2900      	cmp	r1, #0
  103c34:	d062      	beq	103cfc <__modsi3+0xcc>
  103c36:	d500      	bpl	103c3a <__modsi3+0xa>
  103c38:	4249      	neg	r1, r1
  103c3a:	b410      	push	{r4}
  103c3c:	b401      	push	{r0}
  103c3e:	2800      	cmp	r0, #0
  103c40:	d500      	bpl	103c44 <__modsi3+0x14>
  103c42:	4240      	neg	r0, r0
  103c44:	4288      	cmp	r0, r1
  103c46:	d353      	bcc	103cf0 <__modsi3+0xc0>
  103c48:	2401      	mov	r4, #1
  103c4a:	0724      	lsl	r4, r4, #28
  103c4c:	42a1      	cmp	r1, r4
  103c4e:	d204      	bcs	103c5a <__modsi3+0x2a>
  103c50:	4281      	cmp	r1, r0
  103c52:	d202      	bcs	103c5a <__modsi3+0x2a>
  103c54:	0109      	lsl	r1, r1, #4
  103c56:	011b      	lsl	r3, r3, #4
  103c58:	e7f8      	b	103c4c <__modsi3+0x1c>
  103c5a:	00e4      	lsl	r4, r4, #3
  103c5c:	42a1      	cmp	r1, r4
  103c5e:	d204      	bcs	103c6a <__modsi3+0x3a>
  103c60:	4281      	cmp	r1, r0
  103c62:	d202      	bcs	103c6a <__modsi3+0x3a>
  103c64:	0049      	lsl	r1, r1, #1
  103c66:	005b      	lsl	r3, r3, #1
  103c68:	e7f8      	b	103c5c <__modsi3+0x2c>
  103c6a:	2200      	mov	r2, #0
  103c6c:	4288      	cmp	r0, r1
  103c6e:	d300      	bcc	103c72 <__modsi3+0x42>
  103c70:	1a40      	sub	r0, r0, r1
  103c72:	084c      	lsr	r4, r1, #1
  103c74:	42a0      	cmp	r0, r4
  103c76:	d305      	bcc	103c84 <__modsi3+0x54>
  103c78:	1b00      	sub	r0, r0, r4
  103c7a:	469c      	mov	ip, r3
  103c7c:	2401      	mov	r4, #1
  103c7e:	41e3      	ror	r3, r4
  103c80:	431a      	orr	r2, r3
  103c82:	4663      	mov	r3, ip
  103c84:	088c      	lsr	r4, r1, #2
  103c86:	42a0      	cmp	r0, r4
  103c88:	d305      	bcc	103c96 <__modsi3+0x66>
  103c8a:	1b00      	sub	r0, r0, r4
  103c8c:	469c      	mov	ip, r3
  103c8e:	2402      	mov	r4, #2
  103c90:	41e3      	ror	r3, r4
  103c92:	431a      	orr	r2, r3
  103c94:	4663      	mov	r3, ip
  103c96:	08cc      	lsr	r4, r1, #3
  103c98:	42a0      	cmp	r0, r4
  103c9a:	d305      	bcc	103ca8 <__modsi3+0x78>
  103c9c:	1b00      	sub	r0, r0, r4
  103c9e:	469c      	mov	ip, r3
  103ca0:	2403      	mov	r4, #3
  103ca2:	41e3      	ror	r3, r4
  103ca4:	431a      	orr	r2, r3
  103ca6:	4663      	mov	r3, ip
  103ca8:	469c      	mov	ip, r3
  103caa:	2800      	cmp	r0, #0
  103cac:	d003      	beq	103cb6 <__modsi3+0x86>
  103cae:	091b      	lsr	r3, r3, #4
  103cb0:	d001      	beq	103cb6 <__modsi3+0x86>
  103cb2:	0909      	lsr	r1, r1, #4
  103cb4:	e7d9      	b	103c6a <__modsi3+0x3a>
  103cb6:	240e      	mov	r4, #14
  103cb8:	0724      	lsl	r4, r4, #28
  103cba:	4022      	and	r2, r4
  103cbc:	d018      	beq	103cf0 <__modsi3+0xc0>
  103cbe:	4663      	mov	r3, ip
  103cc0:	2407      	mov	r4, #7
  103cc2:	4223      	tst	r3, r4
  103cc4:	d014      	beq	103cf0 <__modsi3+0xc0>
  103cc6:	4663      	mov	r3, ip
  103cc8:	2403      	mov	r4, #3
  103cca:	41e3      	ror	r3, r4
  103ccc:	421a      	tst	r2, r3
  103cce:	d001      	beq	103cd4 <__modsi3+0xa4>
  103cd0:	08cc      	lsr	r4, r1, #3
  103cd2:	1900      	add	r0, r0, r4
  103cd4:	4663      	mov	r3, ip
  103cd6:	2402      	mov	r4, #2
  103cd8:	41e3      	ror	r3, r4
  103cda:	421a      	tst	r2, r3
  103cdc:	d001      	beq	103ce2 <__modsi3+0xb2>
  103cde:	088c      	lsr	r4, r1, #2
  103ce0:	1900      	add	r0, r0, r4
  103ce2:	4663      	mov	r3, ip
  103ce4:	2401      	mov	r4, #1
  103ce6:	41e3      	ror	r3, r4
  103ce8:	421a      	tst	r2, r3
  103cea:	d001      	beq	103cf0 <__modsi3+0xc0>
  103cec:	084c      	lsr	r4, r1, #1
  103cee:	1900      	add	r0, r0, r4
  103cf0:	bc10      	pop	{r4}
  103cf2:	2c00      	cmp	r4, #0
  103cf4:	d500      	bpl	103cf8 <__modsi3+0xc8>
  103cf6:	4240      	neg	r0, r0
  103cf8:	bc10      	pop	{r4}
  103cfa:	4770      	bx	lr
  103cfc:	b502      	push	{r1, lr}
  103cfe:	fe65f7fc 	bl	1009cc <__aeabi_idiv0>
  103d02:	2000      	mov	r0, #0
  103d04:	bc06      	pop	{r1, r2}
  103d06:	4710      	bx	r2

00103d08 <____umodsi3_from_arm>:
  103d08:	e59fc000 	ldr	ip, [pc, #0]	; 103d10 <____umodsi3_from_arm+0x8>
  103d0c:	e12fff1c 	bx	ip
  103d10:	00100905 	andeqs	r0, r0, r5, lsl #18

00103d14 <__systime_init_from_thumb>:
  103d14:	4778      	bx	pc
  103d16:	46c0      	nop			(mov r8, r8)

00103d18 <__systime_init_change_to_arm>:
  103d18:	eafff144 	b	100230 <systime_init>

00103d1c <__systime_get_from_thumb>:
  103d1c:	4778      	bx	pc
  103d1e:	46c0      	nop			(mov r8, r8)

00103d20 <__systime_get_change_to_arm>:
  103d20:	eafff151 	b	10026c <systime_get>
Disassembly of section .data:

00200000 <_data>:
  200000:	e59ff018 	ldr	pc, [pc, #24]	; 200020 <Reset_AddrR>
  200004:	e59ff018 	ldr	pc, [pc, #24]	; 200024 <Undef_AddrR>
  200008:	e59ff018 	ldr	pc, [pc, #24]	; 200028 <SWI_AddrR>
  20000c:	e59ff018 	ldr	pc, [pc, #24]	; 20002c <PAbt_AddrR>
  200010:	e59ff018 	ldr	pc, [pc, #24]	; 200030 <DAbt_AddrR>
  200014:	e1a00000 	nop			(mov r0,r0)
  200018:	e51fff20 	ldr	pc, [pc, #-3872]	; 1ff100 <PMC_PLLR_Val+0x6d4fb>
  20001c:	e51fff20 	ldr	pc, [pc, #-3872]	; 1ff104 <PMC_PLLR_Val+0x6d4ff>

00200020 <Reset_AddrR>:
  200020:	0010005c 	andeqs	r0, r0, ip, asr r0

00200024 <Undef_AddrR>:
  200024:	00200040 	eoreq	r0, r0, r0, asr #32

00200028 <SWI_AddrR>:
  200028:	00200044 	eoreq	r0, r0, r4, asr #32

0020002c <PAbt_AddrR>:
  20002c:	00200048 	eoreq	r0, r0, r8, asr #32

00200030 <DAbt_AddrR>:
  200030:	0020004c 	eoreq	r0, r0, ip, asr #32
  200034:	00000000 	andeq	r0, r0, r0

00200038 <IRQ_AddrR>:
  200038:	00200050 	eoreq	r0, r0, r0, asr r0

0020003c <FIQ_AddrR>:
  20003c:	00200054 	eoreq	r0, r0, r4, asr r0

00200040 <Undef_HandlerR>:
  200040:	eafffffe 	b	200040 <Undef_HandlerR>

00200044 <SWI_HandlerR>:
  200044:	eafffffe 	b	200044 <SWI_HandlerR>

00200048 <PAbt_HandlerR>:
  200048:	eafffffe 	b	200048 <PAbt_HandlerR>

0020004c <DAbt_HandlerR>:
  20004c:	eafffffe 	b	20004c <DAbt_HandlerR>

00200050 <IRQ_HandlerR>:
  200050:	eafffffe 	b	200050 <IRQ_HandlerR>

00200054 <FIQ_HandlerR>:
  200054:	eafffffe 	b	200054 <FIQ_HandlerR>

00200058 <LogFileName>:
  200058:	53676f6c 355f4d41 7478742e 00000000     logSAM_5.txt....

00200068 <pUSART>:
  200068:	fffc0000                                ....

0020006c <systime_isr>:
  20006c:	e24ee004 	sub	lr, lr, #4	; 0x4
  200070:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
  200074:	e14f1000 	mrs	r1, SPSR
  200078:	e92d0002 	stmdb	sp!, {r1}
  20007c:	e3e04c02 	mvn	r4, #512	; 0x200
  200080:	e51430cb 	ldr	r3, [r4, #-203]
  200084:	e2132001 	ands	r2, r3, #1	; 0x1
  200088:	e59f0044 	ldr	r0, [pc, #68]	; 2000d4 <.data+0xd4>
  20008c:	e3a01f7d 	mov	r1, #500	; 0x1f4
  200090:	0a00000a 	beq	2000c0 <systime_isr+0x54>
  200094:	e5903000 	ldr	r3, [r0]
  200098:	e2833001 	add	r3, r3, #1	; 0x1
  20009c:	e5803000 	str	r3, [r0]
  2000a0:	e5900000 	ldr	r0, [r0]
  2000a4:	ebfc0f17 	bl	103d08 <____umodsi3_from_arm>
  2000a8:	e3e02000 	mvn	r2, #0	; 0x0
  2000ac:	e3500000 	cmp	r0, #0	; 0x0
  2000b0:	05123bc7 	ldreq	r3, [r2, #-3015]
  2000b4:	02233008 	eoreq	r3, r3, #8	; 0x8
  2000b8:	05023bc7 	streq	r3, [r2, #-3015]
  2000bc:	e51420c7 	ldr	r2, [r4, #-199]
  2000c0:	e3e03000 	mvn	r3, #0	; 0x0
  2000c4:	e5032ecf 	str	r2, [r3, #-3791]
  2000c8:	e8bd0002 	ldmia	sp!, {r1}
  2000cc:	e161f001 	msr	SPSR_c, r1
  2000d0:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
  2000d4:	002000e0 	eoreq	r0, r0, r0, ror #1
