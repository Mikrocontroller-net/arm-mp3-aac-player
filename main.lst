   1              		.code	16
   2              		.file	"main.c"
  10              	.Ltext0:
  11              		.section	.rodata.str1.4,"aMS",%progbits,1
  12              		.align	2
  13              	.LC0:
  14 0000 0A0A4154 		.ascii	"\012\012AT91SAM7 Filesystem-Demo (P:AT91SAM7S64 L:e"
  14      39315341 
  14      4D372046 
  14      696C6573 
  14      79737465 
  15 002d 66736C29 		.ascii	"fsl)\012\000"
  15      0A00
  16 0033 00       		.align	2
  17              	.LC2:
  18 0034 6566736C 		.ascii	"efsl AT91-Interface and this Demo-Application\012\000"
  18      20415439 
  18      312D496E 
  18      74657266 
  18      61636520 
  19 0063 00       		.align	2
  20              	.LC4:
  21 0064 646F6E65 		.ascii	"done by Martin Thomas, Kaiserslautern, Germany\012\012"
  21      20627920 
  21      4D617274 
  21      696E2054 
  21      686F6D61 
  22 0094 00       		.ascii	"\000"
  23 0095 000000   		.align	2
  24              	.LC7:
  25 0098 43415244 		.ascii	"CARD init...\000"
  25      20696E69 
  25      742E2E2E 
  25      00
  26 00a5 000000   		.align	2
  27              	.LC10:
  28 00a8 6661696C 		.ascii	"failed with %i\012\000"
  28      65642077 
  28      69746820 
  28      25690A00 
  29              		.align	2
  30              	.LC12:
  31 00b8 6F6B0A00 		.ascii	"ok\012\000"
  32              		.align	2
  33              	.LC14:
  34 00bc 0A446972 		.ascii	"\012Directory of 'root':\012\000"
  34      6563746F 
  34      7279206F 
  34      66202772 
  34      6F6F7427 
  35 00d3 00       		.align	2
  36              	.LC18:
  37 00d4 2F00     		.ascii	"/\000"
  38 00d6 0000     		.align	2
  39              	.LC20:
  40 00d8 25732028 		.ascii	"%s ( %li bytes )\012\000"
  40      20256C69 
  40      20627974 
  40      65732029 
  40      0A00
  41 00ea 0000     		.align	2
  42              	.LC25:
  43 00ec 0A46696C 		.ascii	"\012File %s open. Content:\012\000"
  43      65202573 
  43      206F7065 
  43      6E2E2043 
  43      6F6E7465 
  44 0105 000000   		.align	2
  45              	.LC29:
  46 0108 0A00     		.ascii	"\012\000"
  47 010a 0000     		.align	2
  48              	.LC32:
  49 010c 0A46696C 		.ascii	"\012File %s open for append. Appending...\000"
  49      65202573 
  49      206F7065 
  49      6E20666F 
  49      72206170 
  50 0133 00       		.align	2
  51              	.LC34:
  52 0134 4D617274 		.ascii	"Martin hat's angehaengt\015\012\000"
  52      696E2068 
  52      61742773 
  52      20616E67 
  52      65686165 
  53 014e 0000     		.align	2
  54              	.LC36:
  55 0150 6661696C 		.ascii	"failed\012\000"
  55      65640A00 
  56              		.align	2
  57              	.LC38:
  58 0158 0A486974 		.ascii	"\012Hit B to start the benchmark\012\000"
  58      20422074 
  58      6F207374 
  58      61727420 
  58      74686520 
  59 0177 00       		.align	2
  60              	.LC42:
  61 0178 6566735F 		.ascii	"efs_init failed with %i\012\000"
  61      696E6974 
  61      20666169 
  61      6C656420 
  61      77697468 
  62 0191 000000   		.align	2
  63              	.LC44:
  64 0194 0A66696C 		.ascii	"\012file_open for %s failed\000"
  64      655F6F70 
  64      656E2066 
  64      6F722025 
  64      73206661 
  65 01ad 000000   		.align	2
  66              	.LC46:
  67 01b0 57726974 		.ascii	"Write benchmark start - write to file %s (%i bytes/"
  67      65206265 
  67      6E63686D 
  67      61726B20 
  67      73746172 
  68 01e3 77726974 		.ascii	"write)\012\000"
  68      65290A00 
  69 01eb 00       		.align	2
  70              	.LC48:
  71 01ec 416E2065 		.ascii	"An error occured during write!\012\000"
  71      72726F72 
  71      206F6363 
  71      75726564 
  71      20647572 
  72              		.align	2
  73              	.LC50:
  74 020c 256C7520 		.ascii	"%lu bytes written in %lu ms (%lu KBytes/sec)\012\000"
  74      62797465 
  74      73207772 
  74      69747465 
  74      6E20696E 
  75              		.global	__udivsi3
  76 023a 0000     		.align	2
  77              	.LC52:
  78 023c 52656164 		.ascii	"Read benchmark start - from file %s (in %i bytes bl"
  78      2062656E 
  78      63686D61 
  78      726B2073 
  78      74617274 
  79 026f 6F636B73 		.ascii	"ocks)\012\000"
  79      290A00
  80 0276 0000     		.align	2
  81              	.LC54:
  82 0278 256C7520 		.ascii	"%lu bytes read in %lu ms (%lu KBytes/sec)\012\000"
  82      62797465 
  82      73207265 
  82      61642069 
  82      6E20256C 
  83 02a3 00       		.align	2
  84              	.LC56:
  85 02a4 0A596F75 		.ascii	"\012You pressed the \"%c\" key\012\000"
  85      20707265 
  85      73736564 
  85      20746865 
  85      20222563 
  86 02bf 00       		.align	2
  87              	.LC40:
  88 02c0 626D322E 		.ascii	"bm2.txt\000"
  88      74787400 
  89              		.text
  90              		.align	2
  91              		.global	main
  92              		.code 16
  93              		.thumb_func
  95              	main:
  96              	.LFB4:
  97              		.file 1 "main.c"
   1:main.c        **** //*----------------------------------------------------------------------------
   2:main.c        **** //*
   3:main.c        **** //* AT91SAM7 efsl example (11/2005)
   4:main.c        **** //* by Martin Thomas, Kaiserslautern, Germany <mthomas@rhrk.uni-kl.de>
   5:main.c        **** //*
   6:main.c        **** //* Some code from examples by Atmel and Keil
   7:main.c        **** //*
   8:main.c        **** //*----------------------------------------------------------------------------
   9:main.c        **** 
  10:main.c        **** #include "Board.h"
  11:main.c        **** //#define _inline inline
  12:main.c        **** //#include "lib_AT91SAM7S64.h"
  13:main.c        **** #include "systime.h"
  14:main.c        **** 
  15:main.c        **** #include "serial.h"
  16:main.c        **** #include <string.h>
  17:main.c        **** 
  18:main.c        **** #include "efs.h"
  19:main.c        **** #include "ls.h"
  20:main.c        **** #include "mkfs.h"
  21:main.c        **** #include "interfaces/efsl_dbg_printf_arm.h"
  22:main.c        **** 
  23:main.c        **** #define rprintf efsl_debug_printf_arm
  24:main.c        **** 
  25:main.c        **** #define TCK  1000                           /* Timer Clock  */
  26:main.c        **** #define PIV  ((MCK/TCK/16)-1)               /* Periodic Interval Value */
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** static void led1(int on)
  31:main.c        **** {
  32:main.c        **** 	AT91PS_PIO  pPIOA = AT91C_BASE_PIOA;
  33:main.c        **** 	
  34:main.c        **** 	if (on) pPIOA->PIO_CODR = LED1;
  35:main.c        **** 	else pPIOA->PIO_SODR = LED1;
  36:main.c        **** }
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** EmbeddedFileSystem efs;
  40:main.c        **** EmbeddedFile filer, filew;
  41:main.c        **** DirList list;
  42:main.c        **** unsigned short e;
  43:main.c        **** unsigned char buf[513];
  44:main.c        **** 
  45:main.c        **** static char LogFileName[] = "logSAM_5.txt";
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** static void benchmark()
  49:main.c        **** {
  50:main.c        **** 	signed char res;
  51:main.c        **** 	char bmfile[] = "bm2.txt";
  52:main.c        **** 	unsigned long starttime, deltat, bytes;
  53:main.c        **** 	int error;
  54:main.c        **** 	unsigned short l = 100;
  55:main.c        **** 	
  56:main.c        **** 	if ( ( res = efs_init( &efs, 0 ) ) != 0 ) {
  57:main.c        **** 		rprintf("efs_init failed with %i\n",res);
  58:main.c        **** 		return;
  59:main.c        **** 	}
  60:main.c        **** 	
  61:main.c        **** 	rmfile( &efs.myFs, (euint8*)bmfile );
  62:main.c        **** 	
  63:main.c        **** 	if ( file_fopen( &filew, &efs.myFs , bmfile , 'w' ) != 0 ) {
  64:main.c        **** 		rprintf("\nfile_open for %s failed", bmfile);
  65:main.c        **** 		fs_umount( &efs.myFs );
  66:main.c        **** 		return;
  67:main.c        **** 	}
  68:main.c        **** 		
  69:main.c        **** 	rprintf("Write benchmark start - write to file %s (%i bytes/write)\n", 
  70:main.c        **** 		bmfile, l);
  71:main.c        **** 	
  72:main.c        **** 	bytes = 0;
  73:main.c        **** 	error = 0;
  74:main.c        **** 	starttime = systime_get();	// millisec.
  75:main.c        **** 	
  76:main.c        **** 	do { 
  77:main.c        **** 		if ( file_write( &filew, l, buf ) != l ) {
  78:main.c        **** 			error = 1;
  79:main.c        **** 		}
  80:main.c        **** 		else {
  81:main.c        **** 			bytes+=l;
  82:main.c        **** 		}
  83:main.c        **** 		deltat = (unsigned long)(systime_get()-starttime);
  84:main.c        **** 	} while ( ( deltat < 5000UL ) && !error );
  85:main.c        **** 	
  86:main.c        **** 	file_fclose( &filew );
  87:main.c        **** 	fs_flushFs( &(efs.myFs) ); // close & flushing included in time
  88:main.c        **** 	
  89:main.c        **** 	deltat = (unsigned long)(systime_get()-starttime);
  90:main.c        **** 	if ( error ) rprintf("An error occured during write!\n");
  91:main.c        **** 	rprintf("%lu bytes written in %lu ms (%lu KBytes/sec)\n", 
  92:main.c        **** 		bytes, deltat, (unsigned long)(((bytes/deltat)*1000UL)/1024UL) ) ;
  93:main.c        **** 
  94:main.c        **** 	
  95:main.c        **** 	rprintf("Read benchmark start - from file %s (in %i bytes blocks)\n", 
  96:main.c        **** 		bmfile, l);
  97:main.c        **** 	
  98:main.c        **** 	if ( file_fopen( &filer, &efs.myFs , bmfile , 'r' ) != 0 ) {
  99:main.c        **** 		rprintf("\nfile_open for %s failed", bmfile);
 100:main.c        **** 		fs_umount( &efs.myFs );
 101:main.c        **** 		return;
 102:main.c        **** 	}
 103:main.c        **** 
 104:main.c        **** 	bytes = 0;
 105:main.c        **** 	error = 0;
 106:main.c        **** 	starttime = systime_get();	// millisec.
 107:main.c        **** 		
 108:main.c        **** 	while ( ( e = file_read( &filer, l, buf ) ) != 0 ) {
 109:main.c        **** 		bytes += e;
 110:main.c        **** 	}
 111:main.c        **** 
 112:main.c        **** 	file_fclose( &filer );
 113:main.c        **** 
 114:main.c        **** 	deltat = (unsigned long)(systime_get()-starttime);
 115:main.c        **** 	rprintf("%lu bytes read in %lu ms (%lu KBytes/sec)\n", 
 116:main.c        **** 		bytes, deltat, (unsigned long)(((bytes/deltat)*1000UL)/1024UL) ) ;
 117:main.c        **** 		
 118:main.c        **** 	
 119:main.c        **** 	fs_umount( &efs.myFs ); 
 120:main.c        **** }
 121:main.c        **** 
 122:main.c        **** 
 123:main.c        **** int main(void)
 124:main.c        **** {
  98              		.loc 1 124 0
  99 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 100              	.LCFI0:
 125:main.c        **** 	signed char res;
 126:main.c        **** 	int c, flag = 0;
 127:main.c        **** 	
 128:main.c        **** 	AT91PS_PMC  pPMC  = AT91C_BASE_PMC;
 129:main.c        **** 	AT91PS_PIO  pPIOA = AT91C_BASE_PIOA;
 130:main.c        **** 	AT91PS_RSTC pRSTC = AT91C_BASE_RSTC;
 131:main.c        **** 	
 132:main.c        **** 	// Enable the clock for PIO and UART0
 133:main.c        **** 	pPMC->PMC_PCER = ( ( 1 << AT91C_ID_PIOA ) | ( 1 << AT91C_ID_US0 ) ); // n.b. IDs are just bit-numb
 101              		.loc 1 133 0
 102 0002 D04B     		ldr	r3, .L61
 134:main.c        **** 	
 135:main.c        **** 	// Configure the PIO Lines corresponding to LED1 to LED4
 136:main.c        **** 	pPIOA->PIO_PER = LED_MASK; // pins controlled by PIO (GPIO)
 103              		.loc 1 136 0
 104 0004 D04D     		ldr	r5, .L61+4
 105              		.loc 1 133 0
 106 0006 4422     		mov	r2, #68
 107 0008 1A61     		str	r2, [r3, #16]
 108              		.loc 1 136 0
 109 000a 0F23     		mov	r3, #15
 137:main.c        **** 	pPIOA->PIO_OER = LED_MASK; // pins outputs
 138:main.c        **** 	
 139:main.c        **** 	// Turn off the LEDs. Low Active: set bits to turn off 
 140:main.c        **** 	pPIOA->PIO_SODR = LED_MASK;
 141:main.c        **** 	
 142:main.c        **** 	// enable reset-key on demo-board 
 143:main.c        **** 	pRSTC->RSTC_RMR = (0xA5000000 | AT91C_RSTC_URSTEN);
 110              		.loc 1 143 0
 111 000c CF4A     		ldr	r2, .L61+8
 112              		.loc 1 136 0
 113 000e 2B60     		str	r3, [r5]
 114              		.loc 1 137 0
 115 0010 2B61     		str	r3, [r5, #16]
 116              		.loc 1 140 0
 117 0012 2B63     		str	r3, [r5, #48]
 118              		.loc 1 143 0
 119 0014 CE4B     		ldr	r3, .L61+12
 120              		.loc 1 124 0
 121 0016 83B0     		sub	sp, sp, #12
 122              	.LCFI1:
 123              		.loc 1 143 0
 124 0018 9A60     		str	r2, [r3, #8]
 144:main.c        **** 
 145:main.c        **** 	systime_init();
 125              		.loc 1 145 0
 126 001a FFF7FEFF 		bl	systime_init
 146:main.c        **** 
 147:main.c        **** 	uart0_init();
 127              		.loc 1 147 0
 128 001e FFF7FEFF 		bl	uart0_init
 148:main.c        **** 	uart0_prints("\n\nAT91SAM7 Filesystem-Demo (P:AT91SAM7S64 L:efsl)\n");
 129              		.loc 1 148 0
 130 0022 CC48     		ldr	r0, .L61+16
 131 0024 FFF7FEFF 		bl	uart0_prints
 149:main.c        **** 	uart0_prints("efsl AT91-Interface and this Demo-Application\n");
 132              		.loc 1 149 0
 133 0028 CB48     		ldr	r0, .L61+20
 134 002a FFF7FEFF 		bl	uart0_prints
 150:main.c        **** 	uart0_prints("done by Martin Thomas, Kaiserslautern, Germany\n\n");
 135              		.loc 1 150 0
 136 002e CB48     		ldr	r0, .L61+24
 137 0030 FFF7FEFF 		bl	uart0_prints
 138              	.LBB20:
 139              	.LBB21:
 140              		.loc 1 34 0
 141 0034 0126     		mov	r6, #1
 142              	.LBE21:
 143              	.LBE20:
 151:main.c        **** 	
 152:main.c        **** 	/* init efsl debug-output */
 153:main.c        **** 	efsl_debug_devopen_arm(uart0_putc);
 144              		.loc 1 153 0
 145 0036 CA48     		ldr	r0, .L61+28
 146 0038 FFF7FEFF 		bl	efsl_debug_devopen_arm
 154:main.c        **** 	
 155:main.c        **** 	led1(1);
 156:main.c        **** 	
 157:main.c        **** 	rprintf("CARD init...");
 147              		.loc 1 157 0
 148 003c C948     		ldr	r0, .L61+32
 149              	.LBB22:
 150              	.LBB23:
 151              		.loc 1 34 0
 152 003e 6E63     		str	r6, [r5, #52]
 153              	.LBE23:
 154              	.LBE22:
 155              		.loc 1 157 0
 156 0040 FFF7FEFF 		bl	efsl_debug_printf_arm
 158:main.c        **** 
 159:main.c        **** 	if ( ( res = efs_init( &efs, 0 ) ) != 0 ) {
 157              		.loc 1 159 0
 158 0044 C84C     		ldr	r4, .L61+36
 159 0046 0021     		mov	r1, #0
 160 0048 201C     		mov	r0, r4
 161 004a FFF7FEFF 		bl	efs_init
 162 004e 0006     		lsl	r0, r0, #24
 163 0050 010E     		lsr	r1, r0, #24
 164              	.LVL0:
 165 0052 0029     		cmp	r1, #0
 166 0054 05D0     		beq	.L2
 160:main.c        **** 		rprintf("failed with %i\n",res);
 167              		.loc 1 160 0
 168 0056 0906     		lsl	r1, r1, #24
 169              	.LVL1:
 170 0058 C448     		ldr	r0, .L61+40
 171 005a 0916     		asr	r1, r1, #24
 172 005c FFF7FEFF 		bl	efsl_debug_printf_arm
 173 0060 A8E0     		b	.L4
 174              	.LVL2:
 175              	.L2:
 161:main.c        **** 	}
 162:main.c        **** 	else {
 163:main.c        **** 		rprintf("ok\n");
 176              		.loc 1 163 0
 177 0062 C348     		ldr	r0, .L61+44
 178 0064 FFF7FEFF 		bl	efsl_debug_printf_arm
 179              	.LVL3:
 180              	.LBB24:
 181              	.LBB25:
 182              		.loc 1 35 0
 183 0068 2E63     		str	r6, [r5, #48]
 184              	.LBE25:
 185              	.LBE24:
 164:main.c        **** 		
 165:main.c        **** 		led1(0);
 166:main.c        **** 		
 167:main.c        **** 		rprintf("\nDirectory of 'root':\n");
 186              		.loc 1 167 0
 187 006a C248     		ldr	r0, .L61+48
 188 006c FFF7FEFF 		bl	efsl_debug_printf_arm
 168:main.c        **** 		ls_openDir( &list, &(efs.myFs) , "/");
 189              		.loc 1 168 0
 190 0070 C14B     		ldr	r3, .L61+52
 191 0072 C24A     		ldr	r2, .L61+56
 192 0074 E118     		add	r1, r4, r3
 193 0076 C248     		ldr	r0, .L61+60
 194 0078 FFF7FEFF 		bl	ls_openDir
 195 007c 06E0     		b	.L5
 196              	.L6:
 169:main.c        **** 		while ( ls_getNext( &list ) == 0 ) {
 170:main.c        **** 			list.currentEntry.FileName[LIST_MAXLENFILENAME-1] = '\0';
 171:main.c        **** 			rprintf( "%s ( %li bytes )\n" ,
 197              		.loc 1 171 0
 198 007e 211C     		mov	r1, r4
 199              		.loc 1 170 0
 200 0080 E074     		strb	r0, [r4, #19]
 201              		.loc 1 171 0
 202 0082 0831     		add	r1, r1, #8
 203 0084 BF48     		ldr	r0, .L61+64
 204 0086 6269     		ldr	r2, [r4, #20]
 205 0088 FFF7FEFF 		bl	efsl_debug_printf_arm
 206              	.L5:
 207              		.loc 1 169 0
 208 008c BC4C     		ldr	r4, .L61+60
 209 008e 201C     		mov	r0, r4
 210 0090 FFF7FEFF 		bl	ls_getNext
 211 0094 0006     		lsl	r0, r0, #24
 212 0096 000E     		lsr	r0, r0, #24
 213 0098 0028     		cmp	r0, #0
 214 009a F0D0     		beq	.L6
 215              	.LBB26:
 216              	.LBB27:
 217              		.loc 1 34 0
 218 009c AA4B     		ldr	r3, .L61+4
 219              	.LBE27:
 220              	.LBE26:
 172:main.c        **** 				list.currentEntry.FileName,
 173:main.c        **** 				list.currentEntry.FileSize ) ;
 174:main.c        **** 		}
 175:main.c        **** 
 176:main.c        **** #if 1
 177:main.c        **** 
 178:main.c        **** 		led1(1);
 179:main.c        **** 		
 180:main.c        **** 		if ( file_fopen( &filer, &efs.myFs , LogFileName , 'r' ) == 0 ) {
 221              		.loc 1 180 0
 222 009e BA4C     		ldr	r4, .L61+68
 223              	.LBB28:
 224              	.LBB29:
 225              		.loc 1 34 0
 226 00a0 0122     		mov	r2, #1
 227 00a2 5A63     		str	r2, [r3, #52]
 228              	.LBE29:
 229              	.LBE28:
 230              		.loc 1 180 0
 231 00a4 B948     		ldr	r0, .L61+72
 232 00a6 BA49     		ldr	r1, .L61+76
 233 00a8 221C     		mov	r2, r4
 234 00aa 7223     		mov	r3, #114
 235 00ac FFF7FEFF 		bl	file_fopen
 236 00b0 0006     		lsl	r0, r0, #24
 237 00b2 0028     		cmp	r0, #0
 238 00b4 1DD1     		bne	.L8
 181:main.c        **** 			rprintf("\nFile %s open. Content:\n", LogFileName);
 239              		.loc 1 181 0
 240 00b6 B748     		ldr	r0, .L61+80
 241 00b8 211C     		mov	r1, r4
 242 00ba FFF7FEFF 		bl	efsl_debug_printf_arm
 243 00be 04E0     		b	.L10
 244              	.L11:
 182:main.c        **** 			while ( ( e = file_read( &filer, 512, buf ) ) != 0 ) {
 183:main.c        **** 				buf[e]='\0';
 245              		.loc 1 183 0
 246 00c0 0023     		mov	r3, #0
 247 00c2 2354     		strb	r3, [r4, r0]
 184:main.c        **** 				uart0_puts((char*)buf);
 248              		.loc 1 184 0
 249 00c4 201C     		mov	r0, r4
 250 00c6 FFF7FEFF 		bl	uart0_puts
 251              	.L10:
 252              		.loc 1 182 0
 253 00ca B04D     		ldr	r5, .L61+72
 254 00cc B24C     		ldr	r4, .L61+84
 255 00ce 8021     		mov	r1, #128
 256 00d0 281C     		mov	r0, r5
 257 00d2 8900     		lsl	r1, r1, #2
 258 00d4 221C     		mov	r2, r4
 259 00d6 FFF7FEFF 		bl	file_read
 260 00da B04B     		ldr	r3, .L61+88
 261 00dc 0004     		lsl	r0, r0, #16
 262 00de 000C     		lsr	r0, r0, #16
 263 00e0 1880     		strh	r0, [r3]
 264 00e2 0028     		cmp	r0, #0
 265 00e4 ECD1     		bne	.L11
 185:main.c        **** 			}
 186:main.c        **** 			rprintf("\n");
 266              		.loc 1 186 0
 267 00e6 AE48     		ldr	r0, .L61+92
 268 00e8 FFF7FEFF 		bl	efsl_debug_printf_arm
 187:main.c        **** 			file_fclose( &filer );
 269              		.loc 1 187 0
 270 00ec 281C     		mov	r0, r5
 271 00ee FFF7FEFF 		bl	file_fclose
 272              	.L8:
 273              	.LBB30:
 274              	.LBB31:
 275              		.loc 1 35 0
 276 00f2 954B     		ldr	r3, .L61+4
 277              	.LBE31:
 278              	.LBE30:
 188:main.c        **** 		}
 189:main.c        **** 		
 190:main.c        **** 		led1(0);
 191:main.c        **** 		
 192:main.c        **** 		if ( file_fopen( &filew, &efs.myFs , LogFileName , 'a' ) == 0 ) {
 279              		.loc 1 192 0
 280 00f4 AB4D     		ldr	r5, .L61+96
 281 00f6 A44E     		ldr	r6, .L61+68
 282              	.LBB32:
 283              	.LBB33:
 284              		.loc 1 35 0
 285 00f8 0122     		mov	r2, #1
 286 00fa 1A63     		str	r2, [r3, #48]
 287              	.LBE33:
 288              	.LBE32:
 289              		.loc 1 192 0
 290 00fc A449     		ldr	r1, .L61+76
 291 00fe 281C     		mov	r0, r5
 292 0100 321C     		mov	r2, r6
 293 0102 6123     		mov	r3, #97
 294 0104 FFF7FEFF 		bl	file_fopen
 295 0108 0006     		lsl	r0, r0, #24
 296 010a 0028     		cmp	r0, #0
 297 010c 21D1     		bne	.L13
 193:main.c        **** 			rprintf("\nFile %s open for append. Appending...", LogFileName);
 298              		.loc 1 193 0
 299 010e A648     		ldr	r0, .L61+100
 300 0110 311C     		mov	r1, r6
 301 0112 FFF7FEFF 		bl	efsl_debug_printf_arm
 194:main.c        **** 			strcpy((char*)buf, "Martin hat's angehaengt\r\n");
 302              		.loc 1 194 0
 303 0116 A04C     		ldr	r4, .L61+84
 304 0118 A449     		ldr	r1, .L61+104
 305 011a 201C     		mov	r0, r4
 306 011c FFF7FEFF 		bl	strcpy
 195:main.c        **** 			if ( file_write( &filew, strlen((char*)buf), buf ) == strlen((char*)buf) ) {
 307              		.loc 1 195 0
 308 0120 201C     		mov	r0, r4
 309 0122 FFF7FEFF 		bl	strlen
 310 0126 221C     		mov	r2, r4
 311 0128 011C     		mov	r1, r0
 312 012a 281C     		mov	r0, r5
 313 012c FFF7FEFF 		bl	file_write
 314 0130 051C     		mov	r5, r0
 315 0132 201C     		mov	r0, r4
 316 0134 FFF7FEFF 		bl	strlen
 317 0138 8542     		cmp	r5, r0
 318 013a 03D1     		bne	.L15
 196:main.c        **** 				rprintf("ok\n");
 319              		.loc 1 196 0
 320 013c 8C48     		ldr	r0, .L61+44
 321 013e FFF7FEFF 		bl	efsl_debug_printf_arm
 322 0142 03E0     		b	.L17
 323              	.L15:
 197:main.c        **** 			}
 198:main.c        **** 			else {
 199:main.c        **** 				rprintf("failed\n", LogFileName);
 324              		.loc 1 199 0
 325 0144 9A48     		ldr	r0, .L61+108
 326 0146 311C     		mov	r1, r6
 327 0148 FFF7FEFF 		bl	efsl_debug_printf_arm
 328              	.L17:
 200:main.c        **** 			}
 201:main.c        **** 			file_fclose( &filew );
 329              		.loc 1 201 0
 330 014c 9548     		ldr	r0, .L61+96
 331 014e FFF7FEFF 		bl	file_fclose
 332              	.L13:
 333              	.LBB34:
 334              	.LBB35:
 335              		.loc 1 34 0
 336 0152 7D4B     		ldr	r3, .L61+4
 337              	.LBE35:
 338              	.LBE34:
 202:main.c        **** 		}
 203:main.c        **** 		
 204:main.c        **** 		led1(1);
 205:main.c        **** 		
 206:main.c        **** 		if ( file_fopen( &filer, &efs.myFs , LogFileName , 'r' ) == 0 ) {
 339              		.loc 1 206 0
 340 0154 8C4C     		ldr	r4, .L61+68
 341              	.LBB36:
 342              	.LBB37:
 343              		.loc 1 34 0
 344 0156 0122     		mov	r2, #1
 345 0158 5A63     		str	r2, [r3, #52]
 346              	.LBE37:
 347              	.LBE36:
 348              		.loc 1 206 0
 349 015a 8C48     		ldr	r0, .L61+72
 350 015c 8C49     		ldr	r1, .L61+76
 351 015e 221C     		mov	r2, r4
 352 0160 7223     		mov	r3, #114
 353 0162 FFF7FEFF 		bl	file_fopen
 354 0166 0006     		lsl	r0, r0, #24
 355 0168 0028     		cmp	r0, #0
 356 016a 1DD1     		bne	.L18
 207:main.c        **** 			rprintf("\nFile %s open. Content:\n", LogFileName);
 357              		.loc 1 207 0
 358 016c 8948     		ldr	r0, .L61+80
 359 016e 211C     		mov	r1, r4
 360 0170 FFF7FEFF 		bl	efsl_debug_printf_arm
 361 0174 04E0     		b	.L20
 362              	.L21:
 208:main.c        **** 			while ( ( e = file_read( &filer, 512, buf ) ) != 0 ) {
 209:main.c        **** 				buf[e]='\0';
 363              		.loc 1 209 0
 364 0176 0023     		mov	r3, #0
 365 0178 2354     		strb	r3, [r4, r0]
 210:main.c        **** 				uart0_puts((char*)buf);
 366              		.loc 1 210 0
 367 017a 201C     		mov	r0, r4
 368 017c FFF7FEFF 		bl	uart0_puts
 369              	.L20:
 370              		.loc 1 208 0
 371 0180 824D     		ldr	r5, .L61+72
 372 0182 854C     		ldr	r4, .L61+84
 373 0184 8021     		mov	r1, #128
 374 0186 281C     		mov	r0, r5
 375 0188 8900     		lsl	r1, r1, #2
 376 018a 221C     		mov	r2, r4
 377 018c FFF7FEFF 		bl	file_read
 378 0190 824B     		ldr	r3, .L61+88
 379 0192 0004     		lsl	r0, r0, #16
 380 0194 000C     		lsr	r0, r0, #16
 381 0196 1880     		strh	r0, [r3]
 382 0198 0028     		cmp	r0, #0
 383 019a ECD1     		bne	.L21
 211:main.c        **** 			}
 212:main.c        **** 			rprintf("\n");
 384              		.loc 1 212 0
 385 019c 8048     		ldr	r0, .L61+92
 386 019e FFF7FEFF 		bl	efsl_debug_printf_arm
 213:main.c        **** 			file_fclose( &filer );
 387              		.loc 1 213 0
 388 01a2 281C     		mov	r0, r5
 389 01a4 FFF7FEFF 		bl	file_fclose
 390              	.L18:
 391              	.LBB38:
 392              	.LBB39:
 393              		.loc 1 35 0
 394 01a8 674A     		ldr	r2, .L61+4
 395 01aa 0123     		mov	r3, #1
 396 01ac 1363     		str	r3, [r2, #48]
 397              	.LBE39:
 398              	.LBE38:
 214:main.c        **** 		}
 215:main.c        **** 
 216:main.c        **** #endif
 217:main.c        **** 		
 218:main.c        **** 		led1(0);
 219:main.c        **** 		
 220:main.c        **** 		fs_umount( &efs.myFs ) ;
 399              		.loc 1 220 0
 400 01ae 7848     		ldr	r0, .L61+76
 401 01b0 FFF7FEFF 		bl	fs_umount
 402              	.L4:
 221:main.c        **** 	}
 222:main.c        **** 	
 223:main.c        **** 	rprintf("\nHit B to start the benchmark\n");
 403              		.loc 1 223 0
 404 01b4 7F48     		ldr	r0, .L61+112
 405 01b6 FFF7FEFF 		bl	efsl_debug_printf_arm
 406              	.LVL4:
 407              	.L56:
 408 01ba 0020     		mov	r0, #0
 409 01bc 0090     		str	r0, [sp]
 410              	.L60:
 224:main.c        **** 	
 225:main.c        **** 	for (;;) {
 226:main.c        **** 	
 227:main.c        **** 		if ( uart0_kbhit() ) {
 411              		.loc 1 227 0
 412 01be FFF7FEFF 		bl	uart0_kbhit
 413 01c2 0028     		cmp	r0, #0
 414 01c4 FBD0     		beq	.L60
 228:main.c        **** 			c = uart0_getc();
 415              		.loc 1 228 0
 416 01c6 FFF7FEFF 		bl	uart0_getc
 417 01ca 011C     		mov	r1, r0
 418              	.LVL5:
 229:main.c        **** 			if ( c == 'B' ) {
 419              		.loc 1 229 0
 420 01cc 4228     		cmp	r0, #66
 421 01ce 00D0     		beq	.LCB356
 422 01d0 9DE0     		b	.L25	@long jump
 423              	.LCB356:
 424              	.LVL6:
 425              	.LBB40:
 426              	.LBB41:
 427              		.loc 1 51 0
 428 01d2 794B     		ldr	r3, .L61+116
 429              	.LBE41:
 430              		.loc 1 56 0
 431 01d4 644D     		ldr	r5, .L61+36
 432              	.LBB42:
 433              		.loc 1 51 0
 434 01d6 01AC     		add	r4, sp, #4
 435              	.LVL7:
 436 01d8 221C     		mov	r2, r4
 437 01da 03CB     		ldmia	r3!, {r0, r1}
 438 01dc 03C2     		stmia	r2!, {r0, r1}
 439              	.LVL8:
 440              	.LBE42:
 441              		.loc 1 56 0
 442 01de 0021     		mov	r1, #0
 443 01e0 281C     		mov	r0, r5
 444 01e2 FFF7FEFF 		bl	efs_init
 445 01e6 0006     		lsl	r0, r0, #24
 446 01e8 010E     		lsr	r1, r0, #24
 447              	.LVL9:
 448              	.LBB43:
 449 01ea 0029     		cmp	r1, #0
 450 01ec 03D0     		beq	.L27
 451              		.loc 1 57 0
 452 01ee 0906     		lsl	r1, r1, #24
 453              	.LVL10:
 454 01f0 7248     		ldr	r0, .L61+120
 455 01f2 0916     		asr	r1, r1, #24
 456 01f4 8EE0     		b	.L57
 457              	.LVL11:
 458              	.L27:
 459              		.loc 1 61 0
 460 01f6 6049     		ldr	r1, .L61+52
 461              	.LVL12:
 462 01f8 6D18     		add	r5, r5, r1
 463 01fa 281C     		mov	r0, r5
 464 01fc 211C     		mov	r1, r4
 465 01fe FFF7FEFF 		bl	rmfile
 466              	.LBE43:
 467              		.loc 1 63 0
 468 0202 6848     		ldr	r0, .L61+96
 469 0204 291C     		mov	r1, r5
 470 0206 221C     		mov	r2, r4
 471 0208 7723     		mov	r3, #119
 472 020a FFF7FEFF 		bl	file_fopen
 473 020e 0006     		lsl	r0, r0, #24
 474              	.LBB44:
 475 0210 0028     		cmp	r0, #0
 476 0212 4AD1     		bne	.L59
 477              		.loc 1 69 0
 478 0214 211C     		mov	r1, r4
 479 0216 6A48     		ldr	r0, .L61+124
 480 0218 6422     		mov	r2, #100
 481 021a FFF7FEFF 		bl	efsl_debug_printf_arm
 482              	.LBE44:
 483              		.loc 1 74 0
 484 021e FFF7FEFF 		bl	systime_get
 485 0222 0027     		mov	r7, #0
 486 0224 041C     		mov	r4, r0
 487              	.LVL13:
 488 0226 0026     		mov	r6, #0
 489              	.LVL14:
 490              	.L32:
 491              		.loc 1 77 0
 492 0228 5E48     		ldr	r0, .L61+96
 493 022a 5B4A     		ldr	r2, .L61+84
 494 022c 6421     		mov	r1, #100
 495 022e FFF7FEFF 		bl	file_write
 496              	.LBB45:
 497 0232 6428     		cmp	r0, #100
 498 0234 01D0     		beq	.L33
 499 0236 0126     		mov	r6, #1
 500 0238 00E0     		b	.L35
 501              	.L33:
 502              		.loc 1 81 0
 503 023a 6437     		add	r7, r7, #100
 504              	.L35:
 505              	.LBE45:
 506              		.loc 1 83 0
 507 023c FFF7FEFF 		bl	systime_get
 508              	.LBB46:
 509              		.loc 1 84 0
 510 0240 604B     		ldr	r3, .L61+128
 511 0242 001B     		sub	r0, r0, r4
 512 0244 9842     		cmp	r0, r3
 513 0246 02D8     		bhi	.L36
 514 0248 002E     		cmp	r6, #0
 515 024a 71D1     		bne	.L54
 516 024c ECE7     		b	.L32
 517              	.L36:
 518              		.loc 1 86 0
 519 024e 5548     		ldr	r0, .L61+96
 520 0250 FFF7FEFF 		bl	file_fclose
 521              		.loc 1 87 0
 522 0254 4E48     		ldr	r0, .L61+76
 523 0256 FFF7FEFF 		bl	fs_flushFs
 524              	.LBE46:
 525              		.loc 1 89 0
 526 025a FFF7FEFF 		bl	systime_get
 527              	.LBB47:
 528 025e 051B     		sub	r5, r0, r4
 529              	.LVL15:
 530              		.loc 1 90 0
 531 0260 002E     		cmp	r6, #0
 532 0262 02D0     		beq	.L39
 533              	.L40:
 534 0264 5848     		ldr	r0, .L61+132
 535 0266 FFF7FEFF 		bl	efsl_debug_printf_arm
 536              	.L39:
 537              		.loc 1 91 0
 538 026a 291C     		mov	r1, r5
 539 026c 381C     		mov	r0, r7
 540 026e FFF7FEFF 		bl	__udivsi3
 541 0272 4301     		lsl	r3, r0, #5
 542 0274 1B1A     		sub	r3, r3, r0
 543 0276 9B00     		lsl	r3, r3, #2
 544 0278 544C     		ldr	r4, .L61+136
 545              	.LVL16:
 546 027a 1B18     		add	r3, r3, r0
 547 027c DB00     		lsl	r3, r3, #3
 548 027e 9B0A     		lsr	r3, r3, #10
 549 0280 201C     		mov	r0, r4
 550 0282 2A1C     		mov	r2, r5
 551 0284 391C     		mov	r1, r7
 552              		.loc 1 95 0
 553 0286 01AC     		add	r4, sp, #4
 554              		.loc 1 91 0
 555 0288 FFF7FEFF 		bl	efsl_debug_printf_arm
 556              		.loc 1 95 0
 557 028c 5048     		ldr	r0, .L61+140
 558 028e 211C     		mov	r1, r4
 559 0290 6422     		mov	r2, #100
 560 0292 FFF7FEFF 		bl	efsl_debug_printf_arm
 561              	.LBE47:
 562              		.loc 1 98 0
 563 0296 3E4D     		ldr	r5, .L61+76
 564              	.LVL17:
 565 0298 3C48     		ldr	r0, .L61+72
 566 029a 291C     		mov	r1, r5
 567 029c 221C     		mov	r2, r4
 568 029e 7223     		mov	r3, #114
 569 02a0 FFF7FEFF 		bl	file_fopen
 570 02a4 0006     		lsl	r0, r0, #24
 571              	.LBB48:
 572 02a6 0028     		cmp	r0, #0
 573 02a8 05D0     		beq	.L41
 574              	.LVL18:
 575              	.L59:
 576              		.loc 1 99 0
 577 02aa 4A48     		ldr	r0, .L61+144
 578 02ac 211C     		mov	r1, r4
 579 02ae FFF7FEFF 		bl	efsl_debug_printf_arm
 580              		.loc 1 100 0
 581 02b2 281C     		mov	r0, r5
 582 02b4 28E0     		b	.L58
 583              	.LVL19:
 584              	.L41:
 585              	.LBE48:
 586              		.loc 1 106 0
 587 02b6 FFF7FEFF 		bl	systime_get
 588 02ba 0026     		mov	r6, #0
 589              	.LVL20:
 590 02bc 051C     		mov	r5, r0
 591              	.LVL21:
 592 02be 00E0     		b	.L43
 593              	.L44:
 594              	.LBB49:
 595              		.loc 1 109 0
 596 02c0 3618     		add	r6, r6, r0
 597              	.L43:
 598              	.LBE49:
 599              		.loc 1 108 0
 600 02c2 324C     		ldr	r4, .L61+72
 601 02c4 344A     		ldr	r2, .L61+84
 602 02c6 201C     		mov	r0, r4
 603 02c8 6421     		mov	r1, #100
 604 02ca FFF7FEFF 		bl	file_read
 605              	.LBB50:
 606 02ce 334B     		ldr	r3, .L61+88
 607 02d0 0004     		lsl	r0, r0, #16
 608 02d2 000C     		lsr	r0, r0, #16
 609 02d4 1880     		strh	r0, [r3]
 610 02d6 0028     		cmp	r0, #0
 611 02d8 F2D1     		bne	.L44
 612              		.loc 1 112 0
 613 02da 201C     		mov	r0, r4
 614 02dc FFF7FEFF 		bl	file_fclose
 615              	.LBE50:
 616              		.loc 1 114 0
 617 02e0 FFF7FEFF 		bl	systime_get
 618              	.LBB51:
 619 02e4 441B     		sub	r4, r0, r5
 620              	.LVL22:
 621              		.loc 1 115 0
 622 02e6 211C     		mov	r1, r4
 623 02e8 301C     		mov	r0, r6
 624 02ea FFF7FEFF 		bl	__udivsi3
 625 02ee 4301     		lsl	r3, r0, #5
 626 02f0 1B1A     		sub	r3, r3, r0
 627 02f2 9B00     		lsl	r3, r3, #2
 628 02f4 384D     		ldr	r5, .L61+148
 629              	.LVL23:
 630 02f6 1B18     		add	r3, r3, r0
 631 02f8 DB00     		lsl	r3, r3, #3
 632 02fa 281C     		mov	r0, r5
 633 02fc 9B0A     		lsr	r3, r3, #10
 634 02fe 311C     		mov	r1, r6
 635 0300 221C     		mov	r2, r4
 636 0302 FFF7FEFF 		bl	efsl_debug_printf_arm
 637              		.loc 1 119 0
 638 0306 2248     		ldr	r0, .L61+76
 639              	.LVL24:
 640              	.L58:
 641 0308 FFF7FEFF 		bl	fs_umount
 642 030c 04E0     		b	.L29
 643              	.LVL25:
 644              	.L25:
 645              	.LBE51:
 646              	.LBE40:
 230:main.c        **** 				benchmark();
 231:main.c        **** 			}
 232:main.c        **** 			else {
 233:main.c        **** 				rprintf("\nYou pressed the \"%c\" key\n", (char)c);
 647              		.loc 1 233 0
 648 030e 0906     		lsl	r1, r1, #24
 649 0310 3248     		ldr	r0, .L61+152
 650              	.LVL26:
 651 0312 090E     		lsr	r1, r1, #24
 652              	.L57:
 653 0314 FFF7FEFF 		bl	efsl_debug_printf_arm
 654              	.L29:
 234:main.c        **** 			}
 235:main.c        **** 			if ( flag ) {
 655              		.loc 1 235 0
 656 0318 009B     		ldr	r3, [sp]
 657 031a 002B     		cmp	r3, #0
 658 031c 03D0     		beq	.L46
 659              	.LBB52:
 660              	.LBB53:
 661              		.loc 1 35 0
 662 031e 0A4B     		ldr	r3, .L61+4
 663 0320 0122     		mov	r2, #1
 664 0322 1A63     		str	r2, [r3, #48]
 665 0324 49E7     		b	.L56
 666              	.L46:
 667              	.LBE53:
 668              	.LBE52:
 669              	.LBB54:
 670              	.LBB55:
 671              		.loc 1 34 0
 672 0326 084B     		ldr	r3, .L61+4
 673 0328 0122     		mov	r2, #1
 674 032a 5A63     		str	r2, [r3, #52]
 675 032c 0092     		str	r2, [sp]
 676 032e 46E7     		b	.L60
 677              	.LVL27:
 678              	.L54:
 679              	.LBE55:
 680              	.LBE54:
 681              	.LBB56:
 682              	.LBB57:
 683              		.loc 1 86 0
 684 0330 1C48     		ldr	r0, .L61+96
 685 0332 FFF7FEFF 		bl	file_fclose
 686              		.loc 1 87 0
 687 0336 1648     		ldr	r0, .L61+76
 688 0338 FFF7FEFF 		bl	fs_flushFs
 689              	.LBE57:
 690              		.loc 1 89 0
 691 033c FFF7FEFF 		bl	systime_get
 692              	.LBB58:
 693 0340 051B     		sub	r5, r0, r4
 694              	.LVL28:
 695 0342 8FE7     		b	.L40
 696              	.L62:
 697              		.align	2
 698              	.L61:
 699 0344 00FCFFFF 		.word	-1024
 700 0348 00F4FFFF 		.word	-3072
 701 034c 010000A5 		.word	-1526726655
 702 0350 00FDFFFF 		.word	-768
 703 0354 00000000 		.word	.LC0
 704 0358 34000000 		.word	.LC2
 705 035c 64000000 		.word	.LC4
 706 0360 00000000 		.word	uart0_putc
 707 0364 98000000 		.word	.LC7
 708 0368 00000000 		.word	efs
 709 036c A8000000 		.word	.LC10
 710 0370 B8000000 		.word	.LC12
 711 0374 BC000000 		.word	.LC14
 712 0378 240D0000 		.word	3364
 713 037c D4000000 		.word	.LC18
 714 0380 00000000 		.word	list
 715 0384 D8000000 		.word	.LC20
 716 0388 00000000 		.word	LogFileName
 717 038c 00000000 		.word	filer
 718 0390 240D0000 		.word	efs+3364
 719 0394 EC000000 		.word	.LC25
 720 0398 00000000 		.word	buf
 721 039c 00000000 		.word	e
 722 03a0 08010000 		.word	.LC29
 723 03a4 00000000 		.word	filew
 724 03a8 0C010000 		.word	.LC32
 725 03ac 34010000 		.word	.LC34
 726 03b0 50010000 		.word	.LC36
 727 03b4 58010000 		.word	.LC38
 728 03b8 C0020000 		.word	.LC40
 729 03bc 78010000 		.word	.LC42
 730 03c0 B0010000 		.word	.LC46
 731 03c4 87130000 		.word	4999
 732 03c8 EC010000 		.word	.LC48
 733 03cc 0C020000 		.word	.LC50
 734 03d0 3C020000 		.word	.LC52
 735 03d4 94010000 		.word	.LC44
 736 03d8 78020000 		.word	.LC54
 737 03dc A4020000 		.word	.LC56
 738              	.LBE58:
 739              	.LBE56:
 740              	.LFE4:
 742              		.data
 743              		.align	2
 746              	LogFileName:
 747 0000 6C6F6753 		.ascii	"logSAM_5.txt\000"
 747      414D5F35 
 747      2E747874 
 747      00
 748              		.comm	efs,3428,4
 749              		.comm	filer,80,4
 750              		.comm	filew,80,4
 751              		.comm	list,52,4
 752              		.comm	e,2,2
 753              		.comm	buf,513,1
 806              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/tmp//ccycKIgG.s:1      .text:00000000 $t
/var/tmp//ccycKIgG.s:95     .text:00000000 main
/var/tmp//ccycKIgG.s:699    .text:00000344 $d
                            *COM*:00000d64 efs
                            *COM*:00000034 list
/var/tmp//ccycKIgG.s:746    .data:00000000 LogFileName
                            *COM*:00000050 filer
                            *COM*:00000201 buf
                            *COM*:00000002 e
                            *COM*:00000050 filew

UNDEFINED SYMBOLS
__udivsi3
systime_init
uart0_init
uart0_prints
efsl_debug_devopen_arm
efsl_debug_printf_arm
efs_init
ls_openDir
ls_getNext
file_fopen
uart0_puts
file_read
file_fclose
strcpy
strlen
file_write
fs_umount
uart0_kbhit
uart0_getc
rmfile
systime_get
fs_flushFs
uart0_putc
