   1              		.code	16
   2              		.file	"main.c"
  10              	.Ltext0:
  11              		.section	.rodata.str1.4,"aMS",%progbits,1
  12              		.align	2
  13              	.LC0:
  14 0000 0A0A4154 		.ascii	"\012\012AT91SAM7 Filesystem-Demo (P:AT91SAM7S64 L:e"
  14      39315341 
  14      4D372046 
  14      696C6573 
  14      79737465 
  15 002d 66736C29 		.ascii	"fsl)\012\000"
  15      0A00
  16 0033 00       		.align	2
  17              	.LC2:
  18 0034 6566736C 		.ascii	"efsl AT91-Interface and this Demo-Application\012\000"
  18      20415439 
  18      312D496E 
  18      74657266 
  18      61636520 
  19 0063 00       		.align	2
  20              	.LC4:
  21 0064 646F6E65 		.ascii	"done by Martin Thomas, Kaiserslautern, Germany\012\012"
  21      20627920 
  21      4D617274 
  21      696E2054 
  21      686F6D61 
  22 0094 00       		.ascii	"\000"
  23 0095 000000   		.align	2
  24              	.LC7:
  25 0098 43415244 		.ascii	"CARD init...\000"
  25      20696E69 
  25      742E2E2E 
  25      00
  26 00a5 000000   		.align	2
  27              	.LC10:
  28 00a8 6661696C 		.ascii	"failed with %i\012\000"
  28      65642077 
  28      69746820 
  28      25690A00 
  29              		.align	2
  30              	.LC12:
  31 00b8 6F6B0A00 		.ascii	"ok\012\000"
  32              		.align	2
  33              	.LC14:
  34 00bc 0A446972 		.ascii	"\012Directory of 'root':\012\000"
  34      6563746F 
  34      7279206F 
  34      66202772 
  34      6F6F7427 
  35 00d3 00       		.align	2
  36              	.LC18:
  37 00d4 2F00     		.ascii	"/\000"
  38 00d6 0000     		.align	2
  39              	.LC20:
  40 00d8 25732028 		.ascii	"%s ( %li bytes )\012\000"
  40      20256C69 
  40      20627974 
  40      65732029 
  40      0A00
  41 00ea 0000     		.align	2
  42              	.LC25:
  43 00ec 0A46696C 		.ascii	"\012File %s open. Content:\012\000"
  43      65202573 
  43      206F7065 
  43      6E2E2043 
  43      6F6E7465 
  44 0105 000000   		.align	2
  45              	.LC29:
  46 0108 0A00     		.ascii	"\012\000"
  47 010a 0000     		.align	2
  48              	.LC32:
  49 010c 0A46696C 		.ascii	"\012File %s open for append. Appending...\000"
  49      65202573 
  49      206F7065 
  49      6E20666F 
  49      72206170 
  50 0133 00       		.align	2
  51              	.LC34:
  52 0134 4D617274 		.ascii	"Martin hat's angehaengt\015\012\000"
  52      696E2068 
  52      61742773 
  52      20616E67 
  52      65686165 
  53 014e 0000     		.align	2
  54              	.LC36:
  55 0150 6661696C 		.ascii	"failed\012\000"
  55      65640A00 
  56              		.align	2
  57              	.LC38:
  58 0158 0A486974 		.ascii	"\012Hit B to start the benchmark\012\000"
  58      20422074 
  58      6F207374 
  58      61727420 
  58      74686520 
  59 0177 00       		.align	2
  60              	.LC42:
  61 0178 6566735F 		.ascii	"efs_init failed with %i\012\000"
  61      696E6974 
  61      20666169 
  61      6C656420 
  61      77697468 
  62 0191 000000   		.align	2
  63              	.LC44:
  64 0194 0A66696C 		.ascii	"\012file_open for %s failed\000"
  64      655F6F70 
  64      656E2066 
  64      6F722025 
  64      73206661 
  65 01ad 000000   		.align	2
  66              	.LC46:
  67 01b0 57726974 		.ascii	"Write benchmark start - write to file %s (%i bytes/"
  67      65206265 
  67      6E63686D 
  67      61726B20 
  67      73746172 
  68 01e3 77726974 		.ascii	"write)\012\000"
  68      65290A00 
  69 01eb 00       		.align	2
  70              	.LC48:
  71 01ec 416E2065 		.ascii	"An error occured during write!\012\000"
  71      72726F72 
  71      206F6363 
  71      75726564 
  71      20647572 
  72              		.align	2
  73              	.LC50:
  74 020c 256C7520 		.ascii	"%lu bytes written in %lu ms (%lu KBytes/sec)\012\000"
  74      62797465 
  74      73207772 
  74      69747465 
  74      6E20696E 
  75              		.global	__udivsi3
  76 023a 0000     		.align	2
  77              	.LC52:
  78 023c 52656164 		.ascii	"Read benchmark start - from file %s (in %i bytes bl"
  78      2062656E 
  78      63686D61 
  78      726B2073 
  78      74617274 
  79 026f 6F636B73 		.ascii	"ocks)\012\000"
  79      290A00
  80 0276 0000     		.align	2
  81              	.LC54:
  82 0278 256C7520 		.ascii	"%lu bytes read in %lu ms (%lu KBytes/sec)\012\000"
  82      62797465 
  82      73207265 
  82      61642069 
  82      6E20256C 
  83 02a3 00       		.align	2
  84              	.LC56:
  85 02a4 0A596F75 		.ascii	"\012You pressed the \"%c\" key\012\000"
  85      20707265 
  85      73736564 
  85      20746865 
  85      20222563 
  86 02bf 00       		.align	2
  87              	.LC40:
  88 02c0 626D322E 		.ascii	"bm2.txt\000"
  88      74787400 
  89              		.text
  90              		.align	2
  91              		.global	main
  92              		.code 16
  93              		.thumb_func
  95              	main:
  96              	.LFB4:
  97              		.file 1 "main.c"
   1:main.c        **** //*----------------------------------------------------------------------------
   2:main.c        **** //*
   3:main.c        **** //* AT91SAM7 efsl example (11/2005)
   4:main.c        **** //* by Martin Thomas, Kaiserslautern, Germany <mthomas@rhrk.uni-kl.de>
   5:main.c        **** //*
   6:main.c        **** //* Some code from examples by Atmel and Keil
   7:main.c        **** //*
   8:main.c        **** //*----------------------------------------------------------------------------
   9:main.c        **** 
  10:main.c        **** #include "Board.h"
  11:main.c        **** //#define _inline inline
  12:main.c        **** //#include "lib_AT91SAM7S64.h"
  13:main.c        **** #include "systime.h"
  14:main.c        **** 
  15:main.c        **** #include "serial.h"
  16:main.c        **** #include <string.h>
  17:main.c        **** 
  18:main.c        **** #include "efs.h"
  19:main.c        **** #include "ls.h"
  20:main.c        **** #include "mkfs.h"
  21:main.c        **** #include "interfaces/efsl_dbg_printf_arm.h"
  22:main.c        **** 
  23:main.c        **** #define rprintf efsl_debug_printf_arm
  24:main.c        **** 
  25:main.c        **** #define TCK  1000                           /* Timer Clock  */
  26:main.c        **** #define PIV  ((MCK/TCK/16)-1)               /* Periodic Interval Value */
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** static void led1(int on)
  31:main.c        **** {
  32:main.c        **** 	AT91PS_PIO  pPIOA = AT91C_BASE_PIOA;
  33:main.c        **** 	
  34:main.c        **** 	if (on) pPIOA->PIO_CODR = LED1;
  35:main.c        **** 	else pPIOA->PIO_SODR = LED1;
  36:main.c        **** }
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** EmbeddedFileSystem efs;
  40:main.c        **** EmbeddedFile filer, filew;
  41:main.c        **** DirList list;
  42:main.c        **** unsigned short e;
  43:main.c        **** unsigned char buf[513];
  44:main.c        **** 
  45:main.c        **** static char LogFileName[] = "logSAM_5.txt";
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** static void benchmark()
  49:main.c        **** {
  50:main.c        **** 	signed char res;
  51:main.c        **** 	char bmfile[] = "bm2.txt";
  52:main.c        **** 	unsigned long starttime, deltat, bytes;
  53:main.c        **** 	int error;
  54:main.c        **** 	unsigned short l = 100;
  55:main.c        **** 	
  56:main.c        **** 	if ( ( res = efs_init( &efs, 0 ) ) != 0 ) {
  57:main.c        **** 		rprintf("efs_init failed with %i\n",res);
  58:main.c        **** 		return;
  59:main.c        **** 	}
  60:main.c        **** 	
  61:main.c        **** 	rmfile( &efs.myFs, (euint8*)bmfile );
  62:main.c        **** 	
  63:main.c        **** 	if ( file_fopen( &filew, &efs.myFs , bmfile , 'w' ) != 0 ) {
  64:main.c        **** 		rprintf("\nfile_open for %s failed", bmfile);
  65:main.c        **** 		fs_umount( &efs.myFs );
  66:main.c        **** 		return;
  67:main.c        **** 	}
  68:main.c        **** 		
  69:main.c        **** 	rprintf("Write benchmark start - write to file %s (%i bytes/write)\n", 
  70:main.c        **** 		bmfile, l);
  71:main.c        **** 	
  72:main.c        **** 	bytes = 0;
  73:main.c        **** 	error = 0;
  74:main.c        **** 	starttime = systime_get();	// millisec.
  75:main.c        **** 	
  76:main.c        **** 	do { 
  77:main.c        **** 		if ( file_write( &filew, l, buf ) != l ) {
  78:main.c        **** 			error = 1;
  79:main.c        **** 		}
  80:main.c        **** 		else {
  81:main.c        **** 			bytes+=l;
  82:main.c        **** 		}
  83:main.c        **** 		deltat = (unsigned long)(systime_get()-starttime);
  84:main.c        **** 	} while ( ( deltat < 5000UL ) && !error );
  85:main.c        **** 	
  86:main.c        **** 	file_fclose( &filew );
  87:main.c        **** 	fs_flushFs( &(efs.myFs) ); // close & flushing included in time
  88:main.c        **** 	
  89:main.c        **** 	deltat = (unsigned long)(systime_get()-starttime);
  90:main.c        **** 	if ( error ) rprintf("An error occured during write!\n");
  91:main.c        **** 	rprintf("%lu bytes written in %lu ms (%lu KBytes/sec)\n", 
  92:main.c        **** 		bytes, deltat, (unsigned long)(((bytes/deltat)*1000UL)/1024UL) ) ;
  93:main.c        **** 
  94:main.c        **** 	
  95:main.c        **** 	rprintf("Read benchmark start - from file %s (in %i bytes blocks)\n", 
  96:main.c        **** 		bmfile, l);
  97:main.c        **** 	
  98:main.c        **** 	if ( file_fopen( &filer, &efs.myFs , bmfile , 'r' ) != 0 ) {
  99:main.c        **** 		rprintf("\nfile_open for %s failed", bmfile);
 100:main.c        **** 		fs_umount( &efs.myFs );
 101:main.c        **** 		return;
 102:main.c        **** 	}
 103:main.c        **** 
 104:main.c        **** 	bytes = 0;
 105:main.c        **** 	error = 0;
 106:main.c        **** 	starttime = systime_get();	// millisec.
 107:main.c        **** 		
 108:main.c        **** 	while ( ( e = file_read( &filer, l, buf ) ) != 0 ) {
 109:main.c        **** 		bytes += e;
 110:main.c        **** 	}
 111:main.c        **** 
 112:main.c        **** 	file_fclose( &filer );
 113:main.c        **** 
 114:main.c        **** 	deltat = (unsigned long)(systime_get()-starttime);
 115:main.c        **** 	rprintf("%lu bytes read in %lu ms (%lu KBytes/sec)\n", 
 116:main.c        **** 		bytes, deltat, (unsigned long)(((bytes/deltat)*1000UL)/1024UL) ) ;
 117:main.c        **** 		
 118:main.c        **** 	
 119:main.c        **** 	fs_umount( &efs.myFs ); 
 120:main.c        **** }
 121:main.c        **** 
 122:main.c        **** 
 123:main.c        **** int main(void)
 124:main.c        **** {
  98              		.loc 1 124 0
  99 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 100              	.LCFI0:
 125:main.c        **** 	signed char res;
 126:main.c        **** 	int c, flag = 0;
 127:main.c        **** 	
 128:main.c        **** 	
 129:main.c        **** 	AT91PS_PMC  pPMC  = AT91C_BASE_PMC;
 130:main.c        **** 	AT91PS_PIO  pPIOA = AT91C_BASE_PIOA;
 131:main.c        **** 	AT91PS_RSTC pRSTC = AT91C_BASE_RSTC;
 132:main.c        **** 	
 133:main.c        **** 	// Enable the clock for PIO and UART0
 134:main.c        **** 	pPMC->PMC_PCER = ( ( 1 << AT91C_ID_PIOA ) | ( 1 << AT91C_ID_US0 ) ); // n.b. IDs are just bit-numb
 101              		.loc 1 134 0
 102 0002 D24B     		ldr	r3, .L61
 135:main.c        **** 	
 136:main.c        **** 	// Configure the PIO Lines corresponding to LED1 to LED4
 137:main.c        **** 	pPIOA->PIO_PER = LED_MASK; // pins controlled by PIO (GPIO)
 103              		.loc 1 137 0
 104 0004 D24D     		ldr	r5, .L61+4
 105              		.loc 1 134 0
 106 0006 4422     		mov	r2, #68
 107 0008 1A61     		str	r2, [r3, #16]
 108              		.loc 1 137 0
 109 000a 0F23     		mov	r3, #15
 138:main.c        **** 	pPIOA->PIO_OER = LED_MASK; // pins outputs
 139:main.c        **** 	
 140:main.c        **** 	// Turn off the LEDs. Low Active: set bits to turn off 
 141:main.c        **** 	pPIOA->PIO_SODR = LED_MASK;
 142:main.c        **** 	
 143:main.c        **** 	// enable reset-key on demo-board 
 144:main.c        **** 	pRSTC->RSTC_RMR = (0xA5000000 | AT91C_RSTC_URSTEN);
 110              		.loc 1 144 0
 111 000c D14A     		ldr	r2, .L61+8
 112              		.loc 1 137 0
 113 000e 2B60     		str	r3, [r5]
 114              		.loc 1 138 0
 115 0010 2B61     		str	r3, [r5, #16]
 116              		.loc 1 141 0
 117 0012 2B63     		str	r3, [r5, #48]
 118              		.loc 1 144 0
 119 0014 D04B     		ldr	r3, .L61+12
 120              		.loc 1 124 0
 121 0016 83B0     		sub	sp, sp, #12
 122              	.LCFI1:
 123              		.loc 1 144 0
 124 0018 9A60     		str	r2, [r3, #8]
 145:main.c        **** 
 146:main.c        **** 	systime_init();
 125              		.loc 1 146 0
 126 001a FFF7FEFF 		bl	systime_init
 147:main.c        **** 
 148:main.c        **** 	uart0_init();
 127              		.loc 1 148 0
 128 001e FFF7FEFF 		bl	uart0_init
 149:main.c        **** 	uart0_prints("\n\nAT91SAM7 Filesystem-Demo (P:AT91SAM7S64 L:efsl)\n");
 129              		.loc 1 149 0
 130 0022 CE48     		ldr	r0, .L61+16
 131 0024 FFF7FEFF 		bl	uart0_prints
 150:main.c        **** 	uart0_prints("efsl AT91-Interface and this Demo-Application\n");
 132              		.loc 1 150 0
 133 0028 CD48     		ldr	r0, .L61+20
 134 002a FFF7FEFF 		bl	uart0_prints
 151:main.c        **** 	uart0_prints("done by Martin Thomas, Kaiserslautern, Germany\n\n");
 135              		.loc 1 151 0
 136 002e CD48     		ldr	r0, .L61+24
 137 0030 FFF7FEFF 		bl	uart0_prints
 138              	.LBB20:
 139              	.LBB21:
 140              		.loc 1 34 0
 141 0034 0126     		mov	r6, #1
 142              	.LBE21:
 143              	.LBE20:
 152:main.c        **** 	
 153:main.c        **** 	/* init efsl debug-output */
 154:main.c        **** 	efsl_debug_devopen_arm(uart0_putc);
 144              		.loc 1 154 0
 145 0036 CC48     		ldr	r0, .L61+28
 146 0038 FFF7FEFF 		bl	efsl_debug_devopen_arm
 155:main.c        **** 	
 156:main.c        **** 	led1(1);
 157:main.c        **** 	
 158:main.c        **** 	rprintf("CARD init...");
 147              		.loc 1 158 0
 148 003c CB48     		ldr	r0, .L61+32
 149              	.LBB22:
 150              	.LBB23:
 151              		.loc 1 34 0
 152 003e 6E63     		str	r6, [r5, #52]
 153              	.LBE23:
 154              	.LBE22:
 155              		.loc 1 158 0
 156 0040 FFF7FEFF 		bl	efsl_debug_printf_arm
 159:main.c        **** 
 160:main.c        **** 	if ( ( res = efs_init( &efs, 0 ) ) != 0 ) {
 157              		.loc 1 160 0
 158 0044 CA4C     		ldr	r4, .L61+36
 159 0046 0021     		mov	r1, #0
 160 0048 201C     		mov	r0, r4
 161 004a FFF7FEFF 		bl	efs_init
 162 004e 0006     		lsl	r0, r0, #24
 163 0050 010E     		lsr	r1, r0, #24
 164              	.LVL0:
 165 0052 0029     		cmp	r1, #0
 166 0054 09D0     		beq	.L2
 161:main.c        **** 		rprintf("failed with %i\n",res);
 167              		.loc 1 161 0
 168 0056 0906     		lsl	r1, r1, #24
 169              	.LVL1:
 170 0058 C648     		ldr	r0, .L61+40
 171 005a 0916     		asr	r1, r1, #24
 172 005c FFF7FEFF 		bl	efsl_debug_printf_arm
 173              	.L4:
 162:main.c        **** 		while(1) { res = efs_init( &efs, 0 ); }
 174              		.loc 1 162 0
 175 0060 0021     		mov	r1, #0
 176 0062 C348     		ldr	r0, .L61+36
 177 0064 FFF7FEFF 		bl	efs_init
 178 0068 FAE7     		b	.L4
 179              	.LVL2:
 180              	.L2:
 163:main.c        **** 	}
 164:main.c        **** 	else {
 165:main.c        **** 		rprintf("ok\n");
 181              		.loc 1 165 0
 182 006a C348     		ldr	r0, .L61+44
 183 006c FFF7FEFF 		bl	efsl_debug_printf_arm
 184              	.LVL3:
 185              	.LBB24:
 186              	.LBB25:
 187              		.loc 1 35 0
 188 0070 2E63     		str	r6, [r5, #48]
 189              	.LBE25:
 190              	.LBE24:
 166:main.c        **** 		
 167:main.c        **** 		led1(0);
 168:main.c        **** 		
 169:main.c        **** 		rprintf("\nDirectory of 'root':\n");
 191              		.loc 1 169 0
 192 0072 C248     		ldr	r0, .L61+48
 193 0074 FFF7FEFF 		bl	efsl_debug_printf_arm
 170:main.c        **** 		ls_openDir( &list, &(efs.myFs) , "/");
 194              		.loc 1 170 0
 195 0078 C14B     		ldr	r3, .L61+52
 196 007a C24A     		ldr	r2, .L61+56
 197 007c E118     		add	r1, r4, r3
 198 007e C248     		ldr	r0, .L61+60
 199 0080 FFF7FEFF 		bl	ls_openDir
 200 0084 06E0     		b	.L5
 201              	.L6:
 171:main.c        **** 		while ( ls_getNext( &list ) == 0 ) {
 172:main.c        **** 			list.currentEntry.FileName[LIST_MAXLENFILENAME-1] = '\0';
 173:main.c        **** 			rprintf( "%s ( %li bytes )\n" ,
 202              		.loc 1 173 0
 203 0086 211C     		mov	r1, r4
 204              		.loc 1 172 0
 205 0088 E074     		strb	r0, [r4, #19]
 206              		.loc 1 173 0
 207 008a 0831     		add	r1, r1, #8
 208 008c BF48     		ldr	r0, .L61+64
 209 008e 6269     		ldr	r2, [r4, #20]
 210 0090 FFF7FEFF 		bl	efsl_debug_printf_arm
 211              	.L5:
 212              		.loc 1 171 0
 213 0094 BC4C     		ldr	r4, .L61+60
 214 0096 201C     		mov	r0, r4
 215 0098 FFF7FEFF 		bl	ls_getNext
 216 009c 0006     		lsl	r0, r0, #24
 217 009e 000E     		lsr	r0, r0, #24
 218 00a0 0028     		cmp	r0, #0
 219 00a2 F0D0     		beq	.L6
 220              	.LBB26:
 221              	.LBB27:
 222              		.loc 1 34 0
 223 00a4 AA4B     		ldr	r3, .L61+4
 224              	.LBE27:
 225              	.LBE26:
 174:main.c        **** 				list.currentEntry.FileName,
 175:main.c        **** 				list.currentEntry.FileSize ) ;
 176:main.c        **** 		}
 177:main.c        **** 
 178:main.c        **** #if 1
 179:main.c        **** 
 180:main.c        **** 		led1(1);
 181:main.c        **** 		
 182:main.c        **** 		if ( file_fopen( &filer, &efs.myFs , LogFileName , 'r' ) == 0 ) {
 226              		.loc 1 182 0
 227 00a6 BA4C     		ldr	r4, .L61+68
 228              	.LBB28:
 229              	.LBB29:
 230              		.loc 1 34 0
 231 00a8 0122     		mov	r2, #1
 232 00aa 5A63     		str	r2, [r3, #52]
 233              	.LBE29:
 234              	.LBE28:
 235              		.loc 1 182 0
 236 00ac B948     		ldr	r0, .L61+72
 237 00ae BA49     		ldr	r1, .L61+76
 238 00b0 221C     		mov	r2, r4
 239 00b2 7223     		mov	r3, #114
 240 00b4 FFF7FEFF 		bl	file_fopen
 241 00b8 0006     		lsl	r0, r0, #24
 242 00ba 0028     		cmp	r0, #0
 243 00bc 1DD1     		bne	.L8
 183:main.c        **** 			rprintf("\nFile %s open. Content:\n", LogFileName);
 244              		.loc 1 183 0
 245 00be B748     		ldr	r0, .L61+80
 246 00c0 211C     		mov	r1, r4
 247 00c2 FFF7FEFF 		bl	efsl_debug_printf_arm
 248 00c6 04E0     		b	.L10
 249              	.L11:
 184:main.c        **** 			while ( ( e = file_read( &filer, 512, buf ) ) != 0 ) {
 185:main.c        **** 				buf[e]='\0';
 250              		.loc 1 185 0
 251 00c8 0023     		mov	r3, #0
 252 00ca 2354     		strb	r3, [r4, r0]
 186:main.c        **** 				uart0_puts((char*)buf);
 253              		.loc 1 186 0
 254 00cc 201C     		mov	r0, r4
 255 00ce FFF7FEFF 		bl	uart0_puts
 256              	.L10:
 257              		.loc 1 184 0
 258 00d2 B04D     		ldr	r5, .L61+72
 259 00d4 B24C     		ldr	r4, .L61+84
 260 00d6 8021     		mov	r1, #128
 261 00d8 281C     		mov	r0, r5
 262 00da 8900     		lsl	r1, r1, #2
 263 00dc 221C     		mov	r2, r4
 264 00de FFF7FEFF 		bl	file_read
 265 00e2 B04B     		ldr	r3, .L61+88
 266 00e4 0004     		lsl	r0, r0, #16
 267 00e6 000C     		lsr	r0, r0, #16
 268 00e8 1880     		strh	r0, [r3]
 269 00ea 0028     		cmp	r0, #0
 270 00ec ECD1     		bne	.L11
 187:main.c        **** 			}
 188:main.c        **** 			rprintf("\n");
 271              		.loc 1 188 0
 272 00ee AE48     		ldr	r0, .L61+92
 273 00f0 FFF7FEFF 		bl	efsl_debug_printf_arm
 189:main.c        **** 			file_fclose( &filer );
 274              		.loc 1 189 0
 275 00f4 281C     		mov	r0, r5
 276 00f6 FFF7FEFF 		bl	file_fclose
 277              	.L8:
 278              	.LBB30:
 279              	.LBB31:
 280              		.loc 1 35 0
 281 00fa 954B     		ldr	r3, .L61+4
 282              	.LBE31:
 283              	.LBE30:
 190:main.c        **** 		}
 191:main.c        **** 		
 192:main.c        **** 		led1(0);
 193:main.c        **** 		
 194:main.c        **** 		if ( file_fopen( &filew, &efs.myFs , LogFileName , 'a' ) == 0 ) {
 284              		.loc 1 194 0
 285 00fc AB4D     		ldr	r5, .L61+96
 286 00fe A44E     		ldr	r6, .L61+68
 287              	.LBB32:
 288              	.LBB33:
 289              		.loc 1 35 0
 290 0100 0122     		mov	r2, #1
 291 0102 1A63     		str	r2, [r3, #48]
 292              	.LBE33:
 293              	.LBE32:
 294              		.loc 1 194 0
 295 0104 A449     		ldr	r1, .L61+76
 296 0106 281C     		mov	r0, r5
 297 0108 321C     		mov	r2, r6
 298 010a 6123     		mov	r3, #97
 299 010c FFF7FEFF 		bl	file_fopen
 300 0110 0006     		lsl	r0, r0, #24
 301 0112 0028     		cmp	r0, #0
 302 0114 21D1     		bne	.L13
 195:main.c        **** 			rprintf("\nFile %s open for append. Appending...", LogFileName);
 303              		.loc 1 195 0
 304 0116 A648     		ldr	r0, .L61+100
 305 0118 311C     		mov	r1, r6
 306 011a FFF7FEFF 		bl	efsl_debug_printf_arm
 196:main.c        **** 			strcpy((char*)buf, "Martin hat's angehaengt\r\n");
 307              		.loc 1 196 0
 308 011e A04C     		ldr	r4, .L61+84
 309 0120 A449     		ldr	r1, .L61+104
 310 0122 201C     		mov	r0, r4
 311 0124 FFF7FEFF 		bl	strcpy
 197:main.c        **** 			if ( file_write( &filew, strlen((char*)buf), buf ) == strlen((char*)buf) ) {
 312              		.loc 1 197 0
 313 0128 201C     		mov	r0, r4
 314 012a FFF7FEFF 		bl	strlen
 315 012e 221C     		mov	r2, r4
 316 0130 011C     		mov	r1, r0
 317 0132 281C     		mov	r0, r5
 318 0134 FFF7FEFF 		bl	file_write
 319 0138 051C     		mov	r5, r0
 320 013a 201C     		mov	r0, r4
 321 013c FFF7FEFF 		bl	strlen
 322 0140 8542     		cmp	r5, r0
 323 0142 03D1     		bne	.L15
 198:main.c        **** 				rprintf("ok\n");
 324              		.loc 1 198 0
 325 0144 8C48     		ldr	r0, .L61+44
 326 0146 FFF7FEFF 		bl	efsl_debug_printf_arm
 327 014a 03E0     		b	.L17
 328              	.L15:
 199:main.c        **** 			}
 200:main.c        **** 			else {
 201:main.c        **** 				rprintf("failed\n", LogFileName);
 329              		.loc 1 201 0
 330 014c 9A48     		ldr	r0, .L61+108
 331 014e 311C     		mov	r1, r6
 332 0150 FFF7FEFF 		bl	efsl_debug_printf_arm
 333              	.L17:
 202:main.c        **** 			}
 203:main.c        **** 			file_fclose( &filew );
 334              		.loc 1 203 0
 335 0154 9548     		ldr	r0, .L61+96
 336 0156 FFF7FEFF 		bl	file_fclose
 337              	.L13:
 338              	.LBB34:
 339              	.LBB35:
 340              		.loc 1 34 0
 341 015a 7D4B     		ldr	r3, .L61+4
 342              	.LBE35:
 343              	.LBE34:
 204:main.c        **** 		}
 205:main.c        **** 		
 206:main.c        **** 		led1(1);
 207:main.c        **** 		
 208:main.c        **** 		if ( file_fopen( &filer, &efs.myFs , LogFileName , 'r' ) == 0 ) {
 344              		.loc 1 208 0
 345 015c 8C4C     		ldr	r4, .L61+68
 346              	.LBB36:
 347              	.LBB37:
 348              		.loc 1 34 0
 349 015e 0122     		mov	r2, #1
 350 0160 5A63     		str	r2, [r3, #52]
 351              	.LBE37:
 352              	.LBE36:
 353              		.loc 1 208 0
 354 0162 8C48     		ldr	r0, .L61+72
 355 0164 8C49     		ldr	r1, .L61+76
 356 0166 221C     		mov	r2, r4
 357 0168 7223     		mov	r3, #114
 358 016a FFF7FEFF 		bl	file_fopen
 359 016e 0006     		lsl	r0, r0, #24
 360 0170 0028     		cmp	r0, #0
 361 0172 1DD1     		bne	.L18
 209:main.c        **** 			rprintf("\nFile %s open. Content:\n", LogFileName);
 362              		.loc 1 209 0
 363 0174 8948     		ldr	r0, .L61+80
 364 0176 211C     		mov	r1, r4
 365 0178 FFF7FEFF 		bl	efsl_debug_printf_arm
 366 017c 04E0     		b	.L20
 367              	.L21:
 210:main.c        **** 			while ( ( e = file_read( &filer, 512, buf ) ) != 0 ) {
 211:main.c        **** 				buf[e]='\0';
 368              		.loc 1 211 0
 369 017e 0023     		mov	r3, #0
 370 0180 2354     		strb	r3, [r4, r0]
 212:main.c        **** 				uart0_puts((char*)buf);
 371              		.loc 1 212 0
 372 0182 201C     		mov	r0, r4
 373 0184 FFF7FEFF 		bl	uart0_puts
 374              	.L20:
 375              		.loc 1 210 0
 376 0188 824D     		ldr	r5, .L61+72
 377 018a 854C     		ldr	r4, .L61+84
 378 018c 8021     		mov	r1, #128
 379 018e 281C     		mov	r0, r5
 380 0190 8900     		lsl	r1, r1, #2
 381 0192 221C     		mov	r2, r4
 382 0194 FFF7FEFF 		bl	file_read
 383 0198 824B     		ldr	r3, .L61+88
 384 019a 0004     		lsl	r0, r0, #16
 385 019c 000C     		lsr	r0, r0, #16
 386 019e 1880     		strh	r0, [r3]
 387 01a0 0028     		cmp	r0, #0
 388 01a2 ECD1     		bne	.L21
 213:main.c        **** 			}
 214:main.c        **** 			rprintf("\n");
 389              		.loc 1 214 0
 390 01a4 8048     		ldr	r0, .L61+92
 391 01a6 FFF7FEFF 		bl	efsl_debug_printf_arm
 215:main.c        **** 			file_fclose( &filer );
 392              		.loc 1 215 0
 393 01aa 281C     		mov	r0, r5
 394 01ac FFF7FEFF 		bl	file_fclose
 395              	.L18:
 396              	.LBB38:
 397              	.LBB39:
 398              		.loc 1 35 0
 399 01b0 674B     		ldr	r3, .L61+4
 400 01b2 0122     		mov	r2, #1
 401 01b4 1A63     		str	r2, [r3, #48]
 402              	.LBE39:
 403              	.LBE38:
 216:main.c        **** 		}
 217:main.c        **** 
 218:main.c        **** #endif
 219:main.c        **** 		
 220:main.c        **** 		led1(0);
 221:main.c        **** 		
 222:main.c        **** 		fs_umount( &efs.myFs ) ;
 404              		.loc 1 222 0
 405 01b6 7848     		ldr	r0, .L61+76
 406 01b8 FFF7FEFF 		bl	fs_umount
 223:main.c        **** 	}
 224:main.c        **** 	
 225:main.c        **** 	rprintf("\nHit B to start the benchmark\n");
 407              		.loc 1 225 0
 408 01bc 7F48     		ldr	r0, .L61+112
 409 01be FFF7FEFF 		bl	efsl_debug_printf_arm
 410              	.LVL4:
 411              	.L56:
 412 01c2 0020     		mov	r0, #0
 413 01c4 0090     		str	r0, [sp]
 414              	.L60:
 226:main.c        **** 	
 227:main.c        **** 	for (;;) {
 228:main.c        **** 	
 229:main.c        **** 		if ( uart0_kbhit() ) {
 415              		.loc 1 229 0
 416 01c6 FFF7FEFF 		bl	uart0_kbhit
 417 01ca 0028     		cmp	r0, #0
 418 01cc FBD0     		beq	.L60
 230:main.c        **** 			c = uart0_getc();
 419              		.loc 1 230 0
 420 01ce FFF7FEFF 		bl	uart0_getc
 421 01d2 011C     		mov	r1, r0
 422              	.LVL5:
 231:main.c        **** 			if ( c == 'B' ) {
 423              		.loc 1 231 0
 424 01d4 4228     		cmp	r0, #66
 425 01d6 00D0     		beq	.LCB362
 426 01d8 9DE0     		b	.L25	@long jump
 427              	.LCB362:
 428              	.LVL6:
 429              	.LBB40:
 430              	.LBB41:
 431              		.loc 1 51 0
 432 01da 794B     		ldr	r3, .L61+116
 433              	.LBE41:
 434              		.loc 1 56 0
 435 01dc 644D     		ldr	r5, .L61+36
 436              	.LBB42:
 437              		.loc 1 51 0
 438 01de 01AC     		add	r4, sp, #4
 439              	.LVL7:
 440 01e0 221C     		mov	r2, r4
 441 01e2 03CB     		ldmia	r3!, {r0, r1}
 442 01e4 03C2     		stmia	r2!, {r0, r1}
 443              	.LVL8:
 444              	.LBE42:
 445              		.loc 1 56 0
 446 01e6 0021     		mov	r1, #0
 447 01e8 281C     		mov	r0, r5
 448 01ea FFF7FEFF 		bl	efs_init
 449 01ee 0006     		lsl	r0, r0, #24
 450 01f0 010E     		lsr	r1, r0, #24
 451              	.LVL9:
 452              	.LBB43:
 453 01f2 0029     		cmp	r1, #0
 454 01f4 03D0     		beq	.L27
 455              		.loc 1 57 0
 456 01f6 0906     		lsl	r1, r1, #24
 457              	.LVL10:
 458 01f8 7248     		ldr	r0, .L61+120
 459 01fa 0916     		asr	r1, r1, #24
 460 01fc 8EE0     		b	.L57
 461              	.LVL11:
 462              	.L27:
 463              		.loc 1 61 0
 464 01fe 6049     		ldr	r1, .L61+52
 465              	.LVL12:
 466 0200 6D18     		add	r5, r5, r1
 467 0202 281C     		mov	r0, r5
 468 0204 211C     		mov	r1, r4
 469 0206 FFF7FEFF 		bl	rmfile
 470              	.LBE43:
 471              		.loc 1 63 0
 472 020a 6848     		ldr	r0, .L61+96
 473 020c 291C     		mov	r1, r5
 474 020e 221C     		mov	r2, r4
 475 0210 7723     		mov	r3, #119
 476 0212 FFF7FEFF 		bl	file_fopen
 477 0216 0006     		lsl	r0, r0, #24
 478              	.LBB44:
 479 0218 0028     		cmp	r0, #0
 480 021a 4AD1     		bne	.L59
 481              		.loc 1 69 0
 482 021c 211C     		mov	r1, r4
 483 021e 6A48     		ldr	r0, .L61+124
 484 0220 6422     		mov	r2, #100
 485 0222 FFF7FEFF 		bl	efsl_debug_printf_arm
 486              	.LBE44:
 487              		.loc 1 74 0
 488 0226 FFF7FEFF 		bl	systime_get
 489 022a 0027     		mov	r7, #0
 490 022c 041C     		mov	r4, r0
 491              	.LVL13:
 492 022e 0026     		mov	r6, #0
 493              	.LVL14:
 494              	.L32:
 495              		.loc 1 77 0
 496 0230 5E48     		ldr	r0, .L61+96
 497 0232 5B4A     		ldr	r2, .L61+84
 498 0234 6421     		mov	r1, #100
 499 0236 FFF7FEFF 		bl	file_write
 500              	.LBB45:
 501 023a 6428     		cmp	r0, #100
 502 023c 01D0     		beq	.L33
 503 023e 0126     		mov	r6, #1
 504 0240 00E0     		b	.L35
 505              	.L33:
 506              		.loc 1 81 0
 507 0242 6437     		add	r7, r7, #100
 508              	.L35:
 509              	.LBE45:
 510              		.loc 1 83 0
 511 0244 FFF7FEFF 		bl	systime_get
 512              	.LBB46:
 513              		.loc 1 84 0
 514 0248 604B     		ldr	r3, .L61+128
 515 024a 001B     		sub	r0, r0, r4
 516 024c 9842     		cmp	r0, r3
 517 024e 02D8     		bhi	.L36
 518 0250 002E     		cmp	r6, #0
 519 0252 71D1     		bne	.L54
 520 0254 ECE7     		b	.L32
 521              	.L36:
 522              		.loc 1 86 0
 523 0256 5548     		ldr	r0, .L61+96
 524 0258 FFF7FEFF 		bl	file_fclose
 525              		.loc 1 87 0
 526 025c 4E48     		ldr	r0, .L61+76
 527 025e FFF7FEFF 		bl	fs_flushFs
 528              	.LBE46:
 529              		.loc 1 89 0
 530 0262 FFF7FEFF 		bl	systime_get
 531              	.LBB47:
 532 0266 051B     		sub	r5, r0, r4
 533              	.LVL15:
 534              		.loc 1 90 0
 535 0268 002E     		cmp	r6, #0
 536 026a 02D0     		beq	.L39
 537              	.L40:
 538 026c 5848     		ldr	r0, .L61+132
 539 026e FFF7FEFF 		bl	efsl_debug_printf_arm
 540              	.L39:
 541              		.loc 1 91 0
 542 0272 291C     		mov	r1, r5
 543 0274 381C     		mov	r0, r7
 544 0276 FFF7FEFF 		bl	__udivsi3
 545 027a 4301     		lsl	r3, r0, #5
 546 027c 1B1A     		sub	r3, r3, r0
 547 027e 9B00     		lsl	r3, r3, #2
 548 0280 544C     		ldr	r4, .L61+136
 549              	.LVL16:
 550 0282 1B18     		add	r3, r3, r0
 551 0284 DB00     		lsl	r3, r3, #3
 552 0286 9B0A     		lsr	r3, r3, #10
 553 0288 201C     		mov	r0, r4
 554 028a 2A1C     		mov	r2, r5
 555 028c 391C     		mov	r1, r7
 556              		.loc 1 95 0
 557 028e 01AC     		add	r4, sp, #4
 558              		.loc 1 91 0
 559 0290 FFF7FEFF 		bl	efsl_debug_printf_arm
 560              		.loc 1 95 0
 561 0294 5048     		ldr	r0, .L61+140
 562 0296 211C     		mov	r1, r4
 563 0298 6422     		mov	r2, #100
 564 029a FFF7FEFF 		bl	efsl_debug_printf_arm
 565              	.LBE47:
 566              		.loc 1 98 0
 567 029e 3E4D     		ldr	r5, .L61+76
 568              	.LVL17:
 569 02a0 3C48     		ldr	r0, .L61+72
 570 02a2 291C     		mov	r1, r5
 571 02a4 221C     		mov	r2, r4
 572 02a6 7223     		mov	r3, #114
 573 02a8 FFF7FEFF 		bl	file_fopen
 574 02ac 0006     		lsl	r0, r0, #24
 575              	.LBB48:
 576 02ae 0028     		cmp	r0, #0
 577 02b0 05D0     		beq	.L41
 578              	.LVL18:
 579              	.L59:
 580              		.loc 1 99 0
 581 02b2 4A48     		ldr	r0, .L61+144
 582 02b4 211C     		mov	r1, r4
 583 02b6 FFF7FEFF 		bl	efsl_debug_printf_arm
 584              		.loc 1 100 0
 585 02ba 281C     		mov	r0, r5
 586 02bc 28E0     		b	.L58
 587              	.LVL19:
 588              	.L41:
 589              	.LBE48:
 590              		.loc 1 106 0
 591 02be FFF7FEFF 		bl	systime_get
 592 02c2 0026     		mov	r6, #0
 593              	.LVL20:
 594 02c4 051C     		mov	r5, r0
 595              	.LVL21:
 596 02c6 00E0     		b	.L43
 597              	.L44:
 598              	.LBB49:
 599              		.loc 1 109 0
 600 02c8 3618     		add	r6, r6, r0
 601              	.L43:
 602              	.LBE49:
 603              		.loc 1 108 0
 604 02ca 324C     		ldr	r4, .L61+72
 605 02cc 344A     		ldr	r2, .L61+84
 606 02ce 201C     		mov	r0, r4
 607 02d0 6421     		mov	r1, #100
 608 02d2 FFF7FEFF 		bl	file_read
 609              	.LBB50:
 610 02d6 334B     		ldr	r3, .L61+88
 611 02d8 0004     		lsl	r0, r0, #16
 612 02da 000C     		lsr	r0, r0, #16
 613 02dc 1880     		strh	r0, [r3]
 614 02de 0028     		cmp	r0, #0
 615 02e0 F2D1     		bne	.L44
 616              		.loc 1 112 0
 617 02e2 201C     		mov	r0, r4
 618 02e4 FFF7FEFF 		bl	file_fclose
 619              	.LBE50:
 620              		.loc 1 114 0
 621 02e8 FFF7FEFF 		bl	systime_get
 622              	.LBB51:
 623 02ec 441B     		sub	r4, r0, r5
 624              	.LVL22:
 625              		.loc 1 115 0
 626 02ee 211C     		mov	r1, r4
 627 02f0 301C     		mov	r0, r6
 628 02f2 FFF7FEFF 		bl	__udivsi3
 629 02f6 4301     		lsl	r3, r0, #5
 630 02f8 1B1A     		sub	r3, r3, r0
 631 02fa 9B00     		lsl	r3, r3, #2
 632 02fc 384D     		ldr	r5, .L61+148
 633              	.LVL23:
 634 02fe 1B18     		add	r3, r3, r0
 635 0300 DB00     		lsl	r3, r3, #3
 636 0302 281C     		mov	r0, r5
 637 0304 9B0A     		lsr	r3, r3, #10
 638 0306 311C     		mov	r1, r6
 639 0308 221C     		mov	r2, r4
 640 030a FFF7FEFF 		bl	efsl_debug_printf_arm
 641              		.loc 1 119 0
 642 030e 2248     		ldr	r0, .L61+76
 643              	.LVL24:
 644              	.L58:
 645 0310 FFF7FEFF 		bl	fs_umount
 646 0314 04E0     		b	.L29
 647              	.LVL25:
 648              	.L25:
 649              	.LBE51:
 650              	.LBE40:
 232:main.c        **** 				benchmark();
 233:main.c        **** 			}
 234:main.c        **** 			else {
 235:main.c        **** 				rprintf("\nYou pressed the \"%c\" key\n", (char)c);
 651              		.loc 1 235 0
 652 0316 0906     		lsl	r1, r1, #24
 653 0318 3248     		ldr	r0, .L61+152
 654              	.LVL26:
 655 031a 090E     		lsr	r1, r1, #24
 656              	.L57:
 657 031c FFF7FEFF 		bl	efsl_debug_printf_arm
 658              	.L29:
 236:main.c        **** 			}
 237:main.c        **** 			if ( flag ) {
 659              		.loc 1 237 0
 660 0320 009B     		ldr	r3, [sp]
 661 0322 002B     		cmp	r3, #0
 662 0324 03D0     		beq	.L46
 663              	.LBB52:
 664              	.LBB53:
 665              		.loc 1 35 0
 666 0326 0A4B     		ldr	r3, .L61+4
 667 0328 0122     		mov	r2, #1
 668 032a 1A63     		str	r2, [r3, #48]
 669 032c 49E7     		b	.L56
 670              	.L46:
 671              	.LBE53:
 672              	.LBE52:
 673              	.LBB54:
 674              	.LBB55:
 675              		.loc 1 34 0
 676 032e 084B     		ldr	r3, .L61+4
 677 0330 0122     		mov	r2, #1
 678 0332 5A63     		str	r2, [r3, #52]
 679 0334 0092     		str	r2, [sp]
 680 0336 46E7     		b	.L60
 681              	.LVL27:
 682              	.L54:
 683              	.LBE55:
 684              	.LBE54:
 685              	.LBB56:
 686              	.LBB57:
 687              		.loc 1 86 0
 688 0338 1C48     		ldr	r0, .L61+96
 689 033a FFF7FEFF 		bl	file_fclose
 690              		.loc 1 87 0
 691 033e 1648     		ldr	r0, .L61+76
 692 0340 FFF7FEFF 		bl	fs_flushFs
 693              	.LBE57:
 694              		.loc 1 89 0
 695 0344 FFF7FEFF 		bl	systime_get
 696              	.LBB58:
 697 0348 051B     		sub	r5, r0, r4
 698              	.LVL28:
 699 034a 8FE7     		b	.L40
 700              	.L62:
 701              		.align	2
 702              	.L61:
 703 034c 00FCFFFF 		.word	-1024
 704 0350 00F4FFFF 		.word	-3072
 705 0354 010000A5 		.word	-1526726655
 706 0358 00FDFFFF 		.word	-768
 707 035c 00000000 		.word	.LC0
 708 0360 34000000 		.word	.LC2
 709 0364 64000000 		.word	.LC4
 710 0368 00000000 		.word	uart0_putc
 711 036c 98000000 		.word	.LC7
 712 0370 00000000 		.word	efs
 713 0374 A8000000 		.word	.LC10
 714 0378 B8000000 		.word	.LC12
 715 037c BC000000 		.word	.LC14
 716 0380 240D0000 		.word	3364
 717 0384 D4000000 		.word	.LC18
 718 0388 00000000 		.word	list
 719 038c D8000000 		.word	.LC20
 720 0390 00000000 		.word	LogFileName
 721 0394 00000000 		.word	filer
 722 0398 240D0000 		.word	efs+3364
 723 039c EC000000 		.word	.LC25
 724 03a0 00000000 		.word	buf
 725 03a4 00000000 		.word	e
 726 03a8 08010000 		.word	.LC29
 727 03ac 00000000 		.word	filew
 728 03b0 0C010000 		.word	.LC32
 729 03b4 34010000 		.word	.LC34
 730 03b8 50010000 		.word	.LC36
 731 03bc 58010000 		.word	.LC38
 732 03c0 C0020000 		.word	.LC40
 733 03c4 78010000 		.word	.LC42
 734 03c8 B0010000 		.word	.LC46
 735 03cc 87130000 		.word	4999
 736 03d0 EC010000 		.word	.LC48
 737 03d4 0C020000 		.word	.LC50
 738 03d8 3C020000 		.word	.LC52
 739 03dc 94010000 		.word	.LC44
 740 03e0 78020000 		.word	.LC54
 741 03e4 A4020000 		.word	.LC56
 742              	.LBE58:
 743              	.LBE56:
 744              	.LFE4:
 746              		.data
 747              		.align	2
 750              	LogFileName:
 751 0000 6C6F6753 		.ascii	"logSAM_5.txt\000"
 751      414D5F35 
 751      2E747874 
 751      00
 752              		.comm	efs,3428,4
 753              		.comm	filer,80,4
 754              		.comm	filew,80,4
 755              		.comm	list,52,4
 756              		.comm	e,2,2
 757              		.comm	buf,513,1
 810              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/tmp//ccoRUaS9.s:1      .text:00000000 $t
/var/tmp//ccoRUaS9.s:95     .text:00000000 main
/var/tmp//ccoRUaS9.s:703    .text:0000034c $d
                            *COM*:00000d64 efs
                            *COM*:00000034 list
/var/tmp//ccoRUaS9.s:750    .data:00000000 LogFileName
                            *COM*:00000050 filer
                            *COM*:00000201 buf
                            *COM*:00000002 e
                            *COM*:00000050 filew

UNDEFINED SYMBOLS
__udivsi3
systime_init
uart0_init
uart0_prints
efsl_debug_devopen_arm
efsl_debug_printf_arm
efs_init
ls_openDir
ls_getNext
file_fopen
uart0_puts
file_read
file_fclose
strcpy
strlen
file_write
fs_umount
uart0_kbhit
uart0_getc
rmfile
systime_get
fs_flushFs
uart0_putc
